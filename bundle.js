!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=68)}({18:function(t,e){var n,r,i=t.exports={};function s(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===s||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:s}catch(t){n=s}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(t){r=o}}();var l,c=[],h=!1,d=-1;function u(){h&&l&&(h=!1,l.length?c=l.concat(c):d=-1,c.length&&p())}function p(){if(!h){var t=a(u);h=!0;for(var e=c.length;e;){for(l=c,c=[];++d<e;)l&&l[d].run();d=-1,e=c.length}l=null,h=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function f(t,e){this.fun=t,this.array=e}function _(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new f(t,e)),1!==c.length||h||a(p)},f.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=_,i.addListener=_,i.once=_,i.off=_,i.removeListener=_,i.removeAllListeners=_,i.emit=_,i.prependListener=_,i.prependOnceListener=_,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},19:function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},20:function(t,e,n){"use strict";(function(t,n){class r{constructor(t){this.tasks=[],this.count=t}sched(){if(this.count>0&&this.tasks.length>0){this.count--;let t=this.tasks.shift();if(void 0===t)throw"Unexpected undefined value in tasks list";t()}}acquire(){return new Promise((e,r)=>{this.tasks.push(()=>{var t=!1;e(()=>{t||(t=!0,this.count++,this.sched())})}),t&&t.nextTick?t.nextTick(this.sched.bind(this)):n(this.sched.bind(this))})}use(t){return this.acquire().then(e=>t().then(t=>(e(),t)).catch(t=>{throw e(),t}))}}e.Semaphore=r;e.Mutex=class extends r{constructor(){super(1)}}}).call(this,n(18),n(65).setImmediate)},64:function(t,e,n){},65:function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function s(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new s(i.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new s(i.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},s.prototype.unref=s.prototype.ref=function(){},s.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(66),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(19))},66:function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i=1,s={},o=!1,a=t.document,l=Object.getPrototypeOf&&Object.getPrototypeOf(t);l=l&&l.setTimeout?l:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick(function(){h(t)})}:function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?function(){var e="setImmediate$"+Math.random()+"$",n=function(n){n.source===t&&"string"==typeof n.data&&0===n.data.indexOf(e)&&h(+n.data.slice(e.length))};t.addEventListener?t.addEventListener("message",n,!1):t.attachEvent("onmessage",n),r=function(n){t.postMessage(e+n,"*")}}():t.MessageChannel?function(){var t=new MessageChannel;t.port1.onmessage=function(t){h(t.data)},r=function(e){t.port2.postMessage(e)}}():a&&"onreadystatechange"in a.createElement("script")?function(){var t=a.documentElement;r=function(e){var n=a.createElement("script");n.onreadystatechange=function(){h(e),n.onreadystatechange=null,t.removeChild(n),n=null},t.appendChild(n)}}():r=function(t){setTimeout(h,0,t)},l.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var o={callback:t,args:e};return s[i]=o,r(i),i++},l.clearImmediate=c}function c(t){delete s[t]}function h(t){if(o)setTimeout(h,0,t);else{var e=s[t];if(e){o=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{c(t),o=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(19),n(18))},67:function(t,e){const n=document.getElementById("BackGrid"),r=n.querySelectorAll("vaadin-grid-column");r[0].headerRenderer=function(t){t.textContent="Pitch"},r[0].renderer=function(t,e,n){t.textContent=n.item.pitch},r[1].headerRenderer=function(t){t.textContent="Time"},r[1].renderer=function(t,e,n){t.textContent=n.item.time};const i=document.getElementById("FrontGrid"),s=i.querySelectorAll("vaadin-grid-column");s[0].headerRenderer=function(t){t.textContent="Pitch"},s[0].renderer=function(t,e,n){t.textContent=n.item.pitch},s[1].headerRenderer=function(t){t.textContent="Time"},s[1].renderer=function(t,e,n){t.textContent=n.item.time},setTimeout(function(){n.items=[{pitch:400,time:"Lennon"},{pitch:506,time:"Starr"}]},5e3),document.getElementById("infobar").innerHTML="no datano data";var o=1e5,a=0,l=0,c=0;function h(){let t=((o-a)/32.768).toFixed(0),e="Pitch Back: "+c.toFixed(0).toString()+"    Pitch Front: "+l.toFixed(0).toString()+"    TimeDiff: "+t.toString();document.getElementById("infobar").innerHTML=e}document.getElementById("pp_back").addEventListener("pitchperfect-data-event",function(t){var e=t.detail.message;if(e.length>1)for(x=0;x<e.length;x++)0==x?n.items=[{pitch:e[x].PitchVal.toFixed(0),time:e[x].TimerVal.toFixed(0)}]:n.items=n.items.concat([{pitch:e[x].PitchVal.toFixed(0),time:e[x].TimerVal.toFixed(0)}]);else o=e[0].TimerVal,c=e[0].PitchVal,h();console.log("back event",e)}),document.getElementById("pp_front").addEventListener("pitchperfect-data-event",function(t){var e=t.detail.message;if(e.length>1)for(x=0;x<e.length;x++)0==x?i.items=[{pitch:e[x].PitchVal.toFixed(0),time:e[x].TimerVal.toFixed(0)}]:i.items=i.items.concat([{pitch:e[x].PitchVal.toFixed(0),time:e[x].TimerVal.toFixed(0)}]);else a=e[0].TimerVal,l=e[0].PitchVal,h()})},68:function(t,e,n){"use strict";n.r(e);n(64);
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const r=new WeakMap,i=t=>"function"==typeof t&&r.has(t),s=void 0!==window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,o=(t,e,n=null)=>{for(;e!==n;){const n=e.nextSibling;t.removeChild(e),e=n}},a={},l={},c=`{{lit-${String(Math.random()).slice(2)}}}`,h=`\x3c!--${c}--\x3e`,d=new RegExp(`${c}|${h}`),u="$lit$";class p{constructor(t,e){this.parts=[],this.element=e;const n=[],r=[],i=document.createTreeWalker(e.content,133,null,!1);let s=0,o=-1,a=0;const{strings:l,values:{length:h}}=t;for(;a<h;){const t=i.nextNode();if(null!==t){if(o++,1===t.nodeType){if(t.hasAttributes()){const e=t.attributes,{length:n}=e;let r=0;for(let t=0;t<n;t++)f(e[t].name,u)&&r++;for(;r-- >0;){const e=l[a],n=g.exec(e)[2],r=n.toLowerCase()+u,i=t.getAttribute(r);t.removeAttribute(r);const s=i.split(d);this.parts.push({type:"attribute",index:o,name:n,strings:s}),a+=s.length-1}}"TEMPLATE"===t.tagName&&(r.push(t),i.currentNode=t.content)}else if(3===t.nodeType){const e=t.data;if(e.indexOf(c)>=0){const r=t.parentNode,i=e.split(d),s=i.length-1;for(let e=0;e<s;e++){let n,s=i[e];if(""===s)n=m();else{const t=g.exec(s);null!==t&&f(t[2],u)&&(s=s.slice(0,t.index)+t[1]+t[2].slice(0,-u.length)+t[3]),n=document.createTextNode(s)}r.insertBefore(n,t),this.parts.push({type:"node",index:++o})}""===i[s]?(r.insertBefore(m(),t),n.push(t)):t.data=i[s],a+=s}}else if(8===t.nodeType)if(t.data===c){const e=t.parentNode;null!==t.previousSibling&&o!==s||(o++,e.insertBefore(m(),t)),s=o,this.parts.push({type:"node",index:o}),null===t.nextSibling?t.data="":(n.push(t),o--),a++}else{let e=-1;for(;-1!==(e=t.data.indexOf(c,e+1));)this.parts.push({type:"node",index:-1}),a++}}else i.currentNode=r.pop()}for(const t of n)t.parentNode.removeChild(t)}}const f=(t,e)=>{const n=t.length-e.length;return n>=0&&t.slice(n)===e},_=t=>-1!==t.index,m=()=>document.createComment(""),g=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
class y{constructor(t,e,n){this.__parts=[],this.template=t,this.processor=e,this.options=n}update(t){let e=0;for(const n of this.__parts)void 0!==n&&n.setValue(t[e]),e++;for(const t of this.__parts)void 0!==t&&t.commit()}_clone(){const t=s?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),e=[],n=this.template.parts,r=document.createTreeWalker(t,133,null,!1);let i,o=0,a=0,l=r.nextNode();for(;o<n.length;)if(i=n[o],_(i)){for(;a<i.index;)a++,"TEMPLATE"===l.nodeName&&(e.push(l),r.currentNode=l.content),null===(l=r.nextNode())&&(r.currentNode=e.pop(),l=r.nextNode());if("node"===i.type){const t=this.processor.handleTextExpression(this.options);t.insertAfterNode(l.previousSibling),this.__parts.push(t)}else this.__parts.push(...this.processor.handleAttributeExpressions(l,i.name,i.strings,this.options));o++}else this.__parts.push(void 0),o++;return s&&(document.adoptNode(t),customElements.upgrade(t)),t}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const v=` ${c} `;class b{constructor(t,e,n,r){this.strings=t,this.values=e,this.type=n,this.processor=r}getHTML(){const t=this.strings.length-1;let e="",n=!1;for(let r=0;r<t;r++){const t=this.strings[r],i=t.lastIndexOf("\x3c!--");n=(i>-1||n)&&-1===t.indexOf("--\x3e",i+1);const s=g.exec(t);e+=null===s?t+(n?v:h):t.substr(0,s.index)+s[1]+s[2]+u+s[3]+c}return e+=this.strings[t]}getTemplateElement(){const t=document.createElement("template");return t.innerHTML=this.getHTML(),t}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const w=t=>null===t||!("object"==typeof t||"function"==typeof t),x=t=>Array.isArray(t)||!(!t||!t[Symbol.iterator]);class C{constructor(t,e,n){this.dirty=!0,this.element=t,this.name=e,this.strings=n,this.parts=[];for(let t=0;t<n.length-1;t++)this.parts[t]=this._createPart()}_createPart(){return new S(this)}_getValue(){const t=this.strings,e=t.length-1;let n="";for(let r=0;r<e;r++){n+=t[r];const e=this.parts[r];if(void 0!==e){const t=e.value;if(w(t)||!x(t))n+="string"==typeof t?t:String(t);else for(const e of t)n+="string"==typeof e?e:String(e)}}return n+=t[e]}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class S{constructor(t){this.value=void 0,this.committer=t}setValue(t){t===a||w(t)&&t===this.value||(this.value=t,i(t)||(this.committer.dirty=!0))}commit(){for(;i(this.value);){const t=this.value;this.value=a,t(this)}this.value!==a&&this.committer.commit()}}class A{constructor(t){this.value=void 0,this.__pendingValue=void 0,this.options=t}appendInto(t){this.startNode=t.appendChild(m()),this.endNode=t.appendChild(m())}insertAfterNode(t){this.startNode=t,this.endNode=t.nextSibling}appendIntoPart(t){t.__insert(this.startNode=m()),t.__insert(this.endNode=m())}insertAfterPart(t){t.__insert(this.startNode=m()),this.endNode=t.endNode,t.endNode=this.startNode}setValue(t){this.__pendingValue=t}commit(){for(;i(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=a,t(this)}const t=this.__pendingValue;t!==a&&(w(t)?t!==this.value&&this.__commitText(t):t instanceof b?this.__commitTemplateResult(t):t instanceof Node?this.__commitNode(t):x(t)?this.__commitIterable(t):t===l?(this.value=l,this.clear()):this.__commitText(t))}__insert(t){this.endNode.parentNode.insertBefore(t,this.endNode)}__commitNode(t){this.value!==t&&(this.clear(),this.__insert(t),this.value=t)}__commitText(t){const e=this.startNode.nextSibling,n="string"==typeof(t=null==t?"":t)?t:String(t);e===this.endNode.previousSibling&&3===e.nodeType?e.data=n:this.__commitNode(document.createTextNode(n)),this.value=t}__commitTemplateResult(t){const e=this.options.templateFactory(t);if(this.value instanceof y&&this.value.template===e)this.value.update(t.values);else{const n=new y(e,t.processor,this.options),r=n._clone();n.update(t.values),this.__commitNode(r),this.value=n}}__commitIterable(t){Array.isArray(this.value)||(this.value=[],this.clear());const e=this.value;let n,r=0;for(const i of t)void 0===(n=e[r])&&(n=new A(this.options),e.push(n),0===r?n.appendIntoPart(this):n.insertAfterPart(e[r-1])),n.setValue(i),n.commit(),r++;r<e.length&&(e.length=r,this.clear(n&&n.endNode))}clear(t=this.startNode){o(this.startNode.parentNode,t.nextSibling,this.endNode)}}class T{constructor(t,e,n){if(this.value=void 0,this.__pendingValue=void 0,2!==n.length||""!==n[0]||""!==n[1])throw new Error("Boolean attributes can only contain a single expression");this.element=t,this.name=e,this.strings=n}setValue(t){this.__pendingValue=t}commit(){for(;i(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=a,t(this)}if(this.__pendingValue===a)return;const t=!!this.__pendingValue;this.value!==t&&(t?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=t),this.__pendingValue=a}}class P extends C{constructor(t,e,n){super(t,e,n),this.single=2===n.length&&""===n[0]&&""===n[1]}_createPart(){return new E(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class E extends S{}let I=!1;try{const t={get capture(){return I=!0,!1}};window.addEventListener("test",t,t),window.removeEventListener("test",t,t)}catch(t){}class N{constructor(t,e,n){this.value=void 0,this.__pendingValue=void 0,this.element=t,this.eventName=e,this.eventContext=n,this.__boundHandleEvent=(t=>this.handleEvent(t))}setValue(t){this.__pendingValue=t}commit(){for(;i(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=a,t(this)}if(this.__pendingValue===a)return;const t=this.__pendingValue,e=this.value,n=null==t||null!=e&&(t.capture!==e.capture||t.once!==e.once||t.passive!==e.passive),r=null!=t&&(null==e||n);n&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),r&&(this.__options=M(t),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=t,this.__pendingValue=a}handleEvent(t){"function"==typeof this.value?this.value.call(this.eventContext||this.element,t):this.value.handleEvent(t)}}const M=t=>t&&(I?{capture:t.capture,passive:t.passive,once:t.once}:t.capture);
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const O=new class{handleAttributeExpressions(t,e,n,r){const i=e[0];return"."===i?new P(t,e.slice(1),n).parts:"@"===i?[new N(t,e.slice(1),r.eventContext)]:"?"===i?[new T(t,e.slice(1),n)]:new C(t,e,n).parts}handleTextExpression(t){return new A(t)}};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */function R(t){let e=k.get(t.type);void 0===e&&(e={stringsArray:new WeakMap,keyString:new Map},k.set(t.type,e));let n=e.stringsArray.get(t.strings);if(void 0!==n)return n;const r=t.strings.join(c);return void 0===(n=e.keyString.get(r))&&(n=new p(t,t.getTemplateElement()),e.keyString.set(r,n)),e.stringsArray.set(t.strings,n),n}const k=new Map,z=new WeakMap;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.1.2");const D=(t,...e)=>new b(t,e,"html",O),L=133;function F(t,e){const{element:{content:n},parts:r}=t,i=document.createTreeWalker(n,L,null,!1);let s=B(r),o=r[s],a=-1,l=0;const c=[];let h=null;for(;i.nextNode();){a++;const t=i.currentNode;for(t.previousSibling===h&&(h=null),e.has(t)&&(c.push(t),null===h&&(h=t)),null!==h&&l++;void 0!==o&&o.index===a;)o.index=null!==h?-1:o.index-l,o=r[s=B(r,s)]}c.forEach(t=>t.parentNode.removeChild(t))}const H=t=>{let e=11===t.nodeType?0:1;const n=document.createTreeWalker(t,L,null,!1);for(;n.nextNode();)e++;return e},B=(t,e=-1)=>{for(let n=e+1;n<t.length;n++){const e=t[n];if(_(e))return n}return-1};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const V=(t,e)=>`${t}--${e}`;let U=!0;void 0===window.ShadyCSS?U=!1:void 0===window.ShadyCSS.prepareTemplateDom&&(console.warn("Incompatible ShadyCSS version detected. Please update to at least @webcomponents/webcomponentsjs@2.0.2 and @webcomponents/shadycss@1.3.1."),U=!1);const $=["html","svg"],j=new Set,q=(t,e,n)=>{j.add(t);const r=n?n.element:document.createElement("template"),i=e.querySelectorAll("style"),{length:s}=i;if(0===s)return void window.ShadyCSS.prepareTemplateStyles(r,t);const o=document.createElement("style");for(let t=0;t<s;t++){const e=i[t];e.parentNode.removeChild(e),o.textContent+=e.textContent}(t=>{$.forEach(e=>{const n=k.get(V(e,t));void 0!==n&&n.keyString.forEach(t=>{const{element:{content:e}}=t,n=new Set;Array.from(e.querySelectorAll("style")).forEach(t=>{n.add(t)}),F(t,n)})})})(t);const a=r.content;n?function(t,e,n=null){const{element:{content:r},parts:i}=t;if(null===n||void 0===n)return void r.appendChild(e);const s=document.createTreeWalker(r,L,null,!1);let o=B(i),a=0,l=-1;for(;s.nextNode();)for(l++,s.currentNode===n&&(a=H(e),n.parentNode.insertBefore(e,n));-1!==o&&i[o].index===l;){if(a>0){for(;-1!==o;)i[o].index+=a,o=B(i,o);return}o=B(i,o)}}(n,o,a.firstChild):a.insertBefore(o,a.firstChild),window.ShadyCSS.prepareTemplateStyles(r,t);const l=a.querySelector("style");if(window.ShadyCSS.nativeShadow&&null!==l)e.insertBefore(l.cloneNode(!0),e.firstChild);else if(n){a.insertBefore(o,a.firstChild);const t=new Set;t.add(o),F(n,t)}},G=(t,e)=>t,Y=(t,e)=>{if(t in e)for(;e!==Object.prototype;){if(e.hasOwnProperty(t))return Object.getOwnPropertyDescriptor(e,t);e=Object.getPrototypeOf(e)}},W={toAttribute(t,e){switch(e){case Boolean:return t?"":null;case Object:case Array:return null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){switch(e){case Boolean:return null!==t;case Number:return null===t?null:Number(t);case Object:case Array:return JSON.parse(t)}return t}},X=(t,e)=>e!==t&&(e==e||t==t),J={attribute:!0,type:String,converter:W,reflect:!1,hasChanged:X},K=Promise.resolve(!0),Z=1,Q=4,tt=8,et=16,nt=32;class rt extends HTMLElement{constructor(){super(),this._updateState=0,this._instanceProperties=void 0,this._updatePromise=K,this._hasConnectedResolver=void 0,this._changedProperties=new Map,this._reflectingProperties=void 0,this.initialize()}static get observedAttributes(){this._finalize();const t=[];for(const[e,n]of this._classProperties){const r=this._attributeNameForProperty(e,n);void 0!==r&&(this._attributeToPropertyMap.set(r,e),t.push(r))}return t}static _ensureClassProperties(){if(!this.hasOwnProperty(G("_classProperties",this))){this._classProperties=new Map;const t=Object.getPrototypeOf(this)._classProperties;void 0!==t&&t.forEach((t,e)=>this._classProperties.set(e,t))}}static createProperty(t,e=J){if(this._ensureClassProperties(),this._classProperties.set(t,e),!e.noAccessor){const e=Y(t,this.prototype);let n;if(void 0!==e&&e.set&&e.get){const{set:r,get:i}=e;n={get(){return i.call(this)},set(e){const n=this[t];r.call(this,e),this.requestUpdate(t,n)},configurable:!0,enumerable:!0}}else{const e="symbol"==typeof t?Symbol():`__${t}`;n={get(){return this[e]},set(n){const r=this[t];this[e]=n,this.requestUpdate(t,r)},configurable:!0,enumerable:!0}}Object.defineProperty(this.prototype,t,n)}}static _finalize(){if(this.hasOwnProperty(G("finalized",this))&&this.finalized)return;const t=Object.getPrototypeOf(this);if("function"==typeof t._finalize&&t._finalize(),this.finalized=!0,this._ensureClassProperties(),this._attributeToPropertyMap=new Map,this.hasOwnProperty(G("properties",this))){const t=this.properties,e=[...Object.getOwnPropertyNames(t),..."function"==typeof Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(t):[]];for(const n of e)this.createProperty(n,t[n])}}static _attributeNameForProperty(t,e){const n=e.attribute;return!1===n?void 0:"string"==typeof n?n:"string"==typeof t?t.toLowerCase():void 0}static _valueHasChanged(t,e,n=X){return n(t,e)}static _propertyValueFromAttribute(t,e){const n=e.type,r=e.converter||W,i="function"==typeof r?r:r.fromAttribute;return i?i(t,n):t}static _propertyValueToAttribute(t,e){if(void 0===e.reflect)return;const n=e.type,r=e.converter;return(r&&r.toAttribute||W.toAttribute)(t,n)}initialize(){this._saveInstanceProperties()}_saveInstanceProperties(){for(const[t]of this.constructor._classProperties)if(this.hasOwnProperty(t)){const e=this[t];delete this[t],this._instanceProperties||(this._instanceProperties=new Map),this._instanceProperties.set(t,e)}}_applyInstanceProperties(){for(const[t,e]of this._instanceProperties)this[t]=e;this._instanceProperties=void 0}connectedCallback(){this._updateState=this._updateState|nt,this._hasConnectedResolver?(this._hasConnectedResolver(),this._hasConnectedResolver=void 0):this.requestUpdate()}disconnectedCallback(){}attributeChangedCallback(t,e,n){e!==n&&this._attributeToProperty(t,n)}_propertyToAttribute(t,e,n=J){const r=this.constructor,i=r._attributeNameForProperty(t,n);if(void 0!==i){const t=r._propertyValueToAttribute(e,n);if(void 0===t)return;this._updateState=this._updateState|tt,null==t?this.removeAttribute(i):this.setAttribute(i,t),this._updateState=this._updateState&~tt}}_attributeToProperty(t,e){if(this._updateState&tt)return;const n=this.constructor,r=n._attributeToPropertyMap.get(t);if(void 0!==r){const t=n._classProperties.get(r)||J;this._updateState=this._updateState|et,this[r]=n._propertyValueFromAttribute(e,t),this._updateState=this._updateState&~et}}requestUpdate(t,e){let n=!0;if(void 0!==t&&!this._changedProperties.has(t)){const r=this.constructor,i=r._classProperties.get(t)||J;r._valueHasChanged(this[t],e,i.hasChanged)?(this._changedProperties.set(t,e),!0!==i.reflect||this._updateState&et||(void 0===this._reflectingProperties&&(this._reflectingProperties=new Map),this._reflectingProperties.set(t,i))):n=!1}return!this._hasRequestedUpdate&&n&&this._enqueueUpdate(),this.updateComplete}async _enqueueUpdate(){let t;this._updateState=this._updateState|Q;const e=this._updatePromise;this._updatePromise=new Promise(e=>t=e),await e,this._hasConnected||await new Promise(t=>this._hasConnectedResolver=t);const n=this.performUpdate();null!=n&&"function"==typeof n.then&&await n,t(!this._hasRequestedUpdate)}get _hasConnected(){return this._updateState&nt}get _hasRequestedUpdate(){return this._updateState&Q}get hasUpdated(){return this._updateState&Z}performUpdate(){if(this._instanceProperties&&this._applyInstanceProperties(),this.shouldUpdate(this._changedProperties)){const t=this._changedProperties;this.update(t),this._markUpdated(),this._updateState&Z||(this._updateState=this._updateState|Z,this.firstUpdated(t)),this.updated(t)}else this._markUpdated()}_markUpdated(){this._changedProperties=new Map,this._updateState=this._updateState&~Q}get updateComplete(){return this._updatePromise}shouldUpdate(t){return!0}update(t){if(void 0!==this._reflectingProperties&&this._reflectingProperties.size>0){for(const[t,e]of this._reflectingProperties)this._propertyToAttribute(t,this[t],e);this._reflectingProperties=void 0}}updated(t){}firstUpdated(t){}}rt.finalized=!0;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const it=t=>e=>"function"==typeof e?((t,e)=>(window.customElements.define(t,e),e))(t,e):((t,e)=>{const{kind:n,elements:r}=e;return{kind:n,elements:r,finisher(e){window.customElements.define(t,e)}}})(t,e),st=(t,e)=>({kind:"field",key:Symbol(),placement:"own",descriptor:{},initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(n){n.createProperty(e.key,t)}}),ot=t=>(e,n)=>void 0!==n?((t,e,n)=>{e.constructor.createProperty(n,t)})(t,e,n):st(t,e),at=(ct((t,e)=>t.querySelector(e)),ct((t,e)=>t.querySelectorAll(e)),(t,e,n)=>{Object.defineProperty(e,n,t)}),lt=(t,e)=>({kind:"method",placement:"prototype",key:e.key,descriptor:t});function ct(t){return e=>(n,r)=>{const i={get(){return t(this.renderRoot,e)},enumerable:!0,configurable:!0};return void 0!==r?at(i,n,r):lt(i,n)}}const ht="adoptedStyleSheets"in Document.prototype;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
class dt extends rt{static get styles(){return[]}static get _uniqueStyles(){if(void 0===this._styles){const t=this.styles.reduceRight((t,e)=>(t.add(e),t),new Set);this._styles=[],t.forEach(t=>this._styles.unshift(t))}return this._styles}initialize(){super.initialize(),this.renderRoot=this.createRenderRoot(),window.ShadowRoot&&this.renderRoot instanceof window.ShadowRoot&&this.adoptStyles()}createRenderRoot(){return this.attachShadow({mode:"open"})}adoptStyles(){const t=this.constructor._uniqueStyles;0!==t.length&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow?ht?this.renderRoot.adoptedStyleSheets=t.map(t=>t.styleSheet):this._needsShimAdoptedStyleSheets=!0:window.ShadyCSS.ScopingShim.prepareAdoptedCssText(t.map(t=>t.cssText),this.localName))}connectedCallback(){super.connectedCallback(),this.hasUpdated&&void 0!==window.ShadyCSS&&window.ShadyCSS.styleElement(this)}update(t){super.update(t);const e=this.render();e instanceof b&&this.constructor.render(e,this.renderRoot,{scopeName:this.localName,eventContext:this}),this._needsShimAdoptedStyleSheets&&(this._needsShimAdoptedStyleSheets=!1,this.constructor._uniqueStyles.forEach(t=>{const e=document.createElement("style");e.textContent=t.cssText,this.renderRoot.appendChild(e)}))}render(){}}dt.finalized=!0,dt.render=((t,e,n)=>{if(!n||"object"!=typeof n||!n.scopeName)throw new Error("The `scopeName` option is required.");const r=n.scopeName,i=z.has(e),s=U&&11===e.nodeType&&!!e.host,a=s&&!j.has(r),l=a?document.createDocumentFragment():e;if(((t,e,n)=>{let r=z.get(e);void 0===r&&(o(e,e.firstChild),z.set(e,r=new A(Object.assign({templateFactory:R},n))),r.appendInto(e)),r.setValue(t),r.commit()})(t,l,Object.assign({templateFactory:(t=>e=>{const n=V(e.type,t);let r=k.get(n);void 0===r&&(r={stringsArray:new WeakMap,keyString:new Map},k.set(n,r));let i=r.stringsArray.get(e.strings);if(void 0!==i)return i;const s=e.strings.join(c);if(void 0===(i=r.keyString.get(s))){const n=e.getTemplateElement();U&&window.ShadyCSS.prepareTemplateDom(n,t),i=new p(e,n),r.keyString.set(s,i)}return r.stringsArray.set(e.strings,i),i})(r)},n)),a){const t=z.get(l);z.delete(l);const n=t.value instanceof y?t.value.template:void 0;q(r,l,n),o(e,e.firstChild),e.appendChild(l),z.set(e,t)}!i&&s&&window.ShadyCSS.styleElement(e.host)});var ut,pt=n(20);!function(t){t[t.Disconnected=1]="Disconnected",t[t.Connecting=2]="Connecting",t[t.Connected=3]="Connected",t[t.Disconnecting=4]="Disconnecting",t[t.Error=5]="Error"}(ut||(ut={}));var ft,_t=function(t,e,n,r){var i,s=arguments.length,o=s<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(o=(s<3?i(o):s>3?i(e,n,o):i(e,n))||o);return s>3&&o&&Object.defineProperty(e,n,o),o};!function(t){t[t.read=0]="read",t[t.write=1]="write",t[t.enableNotify=2]="enableNotify",t[t.disableNotify=3]="disableNotify"}(ft||(ft={}));let mt=class extends dt{constructor(){super(),this.name="nameit",this.connectedStr="connect",this.connected=!1,this.primaryServiceObject=[[{service:"heart_rate",characteristic:"heart_rate_measurement"}]],this.read=!1,this.btledata=null,this.buttonColour="blue",this.buttonPointer="pointer",this.bluetoothDevice=null,this.bluetoothGatt=null,this.prevConnectedStr="",this._handleBtGattStateChange=this._handleBtGattStateChange.bind(this),this._handleNotifyChanged=this._handleNotifyChanged.bind(this)}bluetoothCallback(t){this.connectedStr=t}render(){if("connected"==this.connectedStr){if(this.buttonColour="green",null!=this.btledata&&(this.processBTLEcommands(),this.btledata=null),null!=this.data){var t=this.data;this.bluetoothGatt.writevalueToService(t[0],0).then(e=>{t.length>1&&this.bluetoothGatt.writevalueToService(t[1],0)}),this.data=null}this.read&&this.readBtle(0)}else"connect"==this.connectedStr?this.buttonColour="blue":"connecting"==this.connectedStr?this.buttonColour="orange":this.buttonColour="red";return this.prevConnectedStr=this.connectedStr,D`
       <style>
       
        .button {
        background-color: ${this.buttonColour}; 
        border: none;
        color: var(--btn-color, white);
        padding: 10px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 4px;
        border-radius: 15px 50px 30px;
        cursor: ${this.buttonPointer};
        outline:0;
        }
      </style>
      <button class="button" @click="${this.connect}"> ${this.name} ${this.connectedStr}</button>`}async connect(){let t=this.connectedStr;if(null!=this.bluetoothGatt&&this.bluetoothGatt.disconnect(this.bluetoothGatt),"connect"==t)try{this.bluetoothDevice=await navigator.bluetooth.requestDevice({filters:[{services:[this.primaryServiceObject[0][0].service,this.primaryServiceObject[1][0].service]}],optionalServices:[this.primaryServiceObject[0][0].service,this.primaryServiceObject[1][0].service]}),this.bluetoothGatt=new class extends EventTarget{constructor(t,e){super(),this.bluetoothDevice=null,this.connectionStr="disconnected",this.gatServer=null,this.currentService=null,this.currentCharacteristics=null,this.notifyCharacteristics=null,this.primaryServiceObject=[],this.semaphore=new pt.Semaphore(1),this.maxretry=0,this.state=ut.Disconnected,this.bluetoothDevice=t,this.state=ut.Disconnected,this.primaryServiceObject=e,this.SetNotify=this.SetNotify.bind(this),this.handleNotifyChanged=this.handleNotifyChanged.bind(this)}log(t){console.log(t)}setState(t){let e="old state = "+ut[this.state]+" new state = "+ut[t];switch(this.log(e),this.state=t,this.state){case ut.Disconnected:this.currentService=null,this.currentCharacteristics=null,this.connectionStr="connect";break;case ut.Connecting:this.connectionStr="connecting";break;case ut.Disconnecting:this.connectionStr="disconnecting";break;case ut.Connected:this.connectionStr="connected";break;default:this.connectionStr="error"}this.dispatchEvent(new Event("state-change"))}async timeout(){this.maxretry<10&&this.state===ut.Connecting&&(this.maxretry++,this.connectit())}connect(){this.state===ut.Disconnected&&(this.setState(ut.Connecting),this.maxretry=0,this.connectit())}disconnect(t){this.bluetoothDevice&&(this.setState(ut.Disconnecting),console.log("Disconnecting from Bluetooth Device..."),this.bluetoothDevice.gatt.connected?this.bluetoothDevice.gatt.disconnect():(console.log("> Bluetooth Device is already disconnected"),this.setState(ut.Disconnected)),this.bluetoothDevice=null)}async connectit(){try{this.gatServer=await this.bluetoothDevice.gatt.connect(),this.setState(ut.Connected)}catch(t){console.log("connecting failed  \n"),this.state,ut.Connecting,console.log("try again over 5 seconds \n"),setTimeout(this.timeout.bind(this),5e3)}}onDisconnected(){switch(console.log("> Bluetooth Device disconnected"),this.state){case ut.Disconnecting:case ut.Error:this.setState(ut.Disconnected);break;default:this.setState(ut.Disconnected),this.connect()}}async getCharacteristic(t){this.currentService=await this.gatServer.getPrimaryService(this.primaryServiceObject[t][0].service),this.currentCharacteristics=await this.currentService.getCharacteristic(this.primaryServiceObject[t][0].characteristic)}async readvalueFromService(t){if(this.state===ut.Connected){let e=await this.semaphore.acquire();try{await this.getCharacteristic(t);let n=await this.currentCharacteristics.readValue();return n.getUint8(0),e(),n}catch(t){console.log("Argh! "+t),e()}}}async SetNotify(t,e){if(this.state===ut.Connected){let n=await this.semaphore.acquire();try{await this.getCharacteristic(e),!0===t?(await this.currentCharacteristics.startNotifications(),this.notifyCharacteristics=this.currentCharacteristics,console.log("notify set"),this.notifyCharacteristics.addEventListener("characteristicvaluechanged",this.handleNotifyChanged)):await this.currentCharacteristics.stopNotifications(),n()}catch(t){console.log("Argh! "+t),n()}}}async writevalueToService(t,e){if(this.state===ut.Connected){let n=await this.semaphore.acquire();try{await this.getCharacteristic(e),await this.currentCharacteristics.writeValue(t),n()}catch(t){console.log("Argh! "+t),n()}}}handleNotifyChanged(t){let e=event.target.value;e=e.buffer?e:new DataView(e);let n=new CustomEvent("notify-data-event",{detail:{message:e},bubbles:!0,composed:!0});this.dispatchEvent(n)}}(this.bluetoothDevice,this.primaryServiceObject),this.bluetoothDevice.addEventListener("gattserverdisconnected",this.bluetoothGatt.onDisconnected.bind(this.bluetoothGatt)),this.bluetoothGatt.addEventListener("state-change",this._handleBtGattStateChange),this.bluetoothGatt.addEventListener("notify-data-event",this._handleNotifyChanged),this.bluetoothGatt.connect()}catch(t){console.log("Argh! "+t)}}async readBtle(t){await this.bluetoothGatt.readvalueFromService(t).then(t=>{this.read=!1,console.log(t);let e=new CustomEvent("data-event",{detail:{message:t},bubbles:!0,composed:!0});this.dispatchEvent(e)},t=>{this.read=!1})}async processBTLEcommands(){for(const t of this.btledata)t.action==ft.write&&await this.bluetoothGatt.writevalueToService(t.data,t.serviceNr),t.action==ft.read&&await this.readBtle(t.serviceNr),t.action==ft.enableNotify&&await this.bluetoothGatt.SetNotify(!0,t.serviceNr),t.action==ft.disableNotify&&await this.bluetoothGatt.SetNotify(!1,t.serviceNr)}_handleBtGattStateChange(t){if(this.connectedStr=t.target.connectionStr,"connected"==this.connectedStr){let t=new CustomEvent("data-event",{detail:{message:"connected"},bubbles:!0,composed:!0});this.dispatchEvent(t)}}_handleNotifyChanged(t){if("connected"==this.connectedStr){let e=new CustomEvent("data-event",{detail:{message:t.detail.message},bubbles:!0,composed:!0});this.dispatchEvent(e)}}};_t([ot()],mt.prototype,"name",void 0),_t([ot()],mt.prototype,"connectedStr",void 0),_t([ot()],mt.prototype,"connected",void 0),_t([ot({type:Array})],mt.prototype,"primaryServiceObject",void 0),_t([ot()],mt.prototype,"read",void 0),_t([ot()],mt.prototype,"data",void 0),_t([ot()],mt.prototype,"btledata",void 0),mt=_t([it("lsg-bluetooth")],mt);var gt=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},yt=function(t){return 1===t.length&&(t=function(t){return function(e,n){return gt(t(e),n)}}(t)),{left:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var s=r+i>>>1;t(e[s],n)<0?r=s+1:i=s}return r},right:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var s=r+i>>>1;t(e[s],n)>0?i=s:r=s+1}return r}}};var vt=yt(gt),bt=vt.right,wt=(vt.left,bt);var xt=Array.prototype,Ct=(xt.slice,xt.map,Math.sqrt(50)),St=Math.sqrt(10),At=Math.sqrt(2),Tt=function(t,e,n){var r,i,s,o,a=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(o=Pt(t,e,n))||!isFinite(o))return[];if(o>0)for(t=Math.ceil(t/o),e=Math.floor(e/o),s=new Array(i=Math.ceil(e-t+1));++a<i;)s[a]=(t+a)*o;else for(t=Math.floor(t*o),e=Math.ceil(e*o),s=new Array(i=Math.ceil(t-e+1));++a<i;)s[a]=(t-a)/o;return r&&s.reverse(),s};function Pt(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),s=r/Math.pow(10,i);return i>=0?(s>=Ct?10:s>=St?5:s>=At?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(s>=Ct?10:s>=St?5:s>=At?2:1)}function Et(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),s=r/i;return s>=Ct?i*=10:s>=St?i*=5:s>=At&&(i*=2),e<t?-i:i}var It=function(t,e){var n,r,i=t.length,s=-1;if(null==e){for(;++s<i;)if(null!=(n=t[s])&&n>=n)for(r=n;++s<i;)null!=(n=t[s])&&n>r&&(r=n)}else for(;++s<i;)if(null!=(n=e(t[s],s,t))&&n>=n)for(r=n;++s<i;)null!=(n=e(t[s],s,t))&&n>r&&(r=n);return r},Nt=function(t,e){var n,r,i=t.length,s=-1;if(null==e){for(;++s<i;)if(null!=(n=t[s])&&n>=n)for(r=n;++s<i;)null!=(n=t[s])&&r>n&&(r=n)}else for(;++s<i;)if(null!=(n=e(t[s],s,t))&&n>=n)for(r=n;++s<i;)null!=(n=e(t[s],s,t))&&r>n&&(r=n);return r};Array.prototype.slice;var Mt={value:function(){}};function Ot(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new Rt(r)}function Rt(t){this._=t}function kt(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function zt(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=Mt,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}Rt.prototype=Ot.prototype={constructor:Rt,on:function(t,e){var n,r=this._,i=function(t,e){return t.trim().split(/^|\s+/).map(function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})}(t+"",r),s=-1,o=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++s<o;)if(n=(t=i[s]).type)r[n]=zt(r[n],t.name,e);else if(null==e)for(n in r)r[n]=zt(r[n],t.name,null);return this}for(;++s<o;)if((n=(t=i[s]).type)&&(n=kt(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Rt(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),s=0;s<n;++s)i[s]=arguments[s+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(s=0,n=(r=this._[t]).length;s<n;++s)r[s].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,s=r.length;i<s;++i)r[i].value.apply(e,n)}};var Dt=Ot;function Lt(){}var Ft=function(t){return null==t?Lt:function(){return this.querySelector(t)}};function Ht(){return[]}var Bt=function(t){return null==t?Ht:function(){return this.querySelectorAll(t)}},Vt=function(t){return function(){return this.matches(t)}},Ut=function(t){return new Array(t.length)};function $t(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}$t.prototype={constructor:$t,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var jt="$";function qt(t,e,n,r,i,s){for(var o,a=0,l=e.length,c=s.length;a<c;++a)(o=e[a])?(o.__data__=s[a],r[a]=o):n[a]=new $t(t,s[a]);for(;a<l;++a)(o=e[a])&&(i[a]=o)}function Gt(t,e,n,r,i,s,o){var a,l,c,h={},d=e.length,u=s.length,p=new Array(d);for(a=0;a<d;++a)(l=e[a])&&(p[a]=c=jt+o.call(l,l.__data__,a,e),c in h?i[a]=l:h[c]=l);for(a=0;a<u;++a)(l=h[c=jt+o.call(t,s[a],a,s)])?(r[a]=l,l.__data__=s[a],h[c]=null):n[a]=new $t(t,s[a]);for(a=0;a<d;++a)(l=e[a])&&h[p[a]]===l&&(i[a]=l)}function Yt(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var Wt="http://www.w3.org/1999/xhtml",Xt={svg:"http://www.w3.org/2000/svg",xhtml:Wt,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},Jt=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),Xt.hasOwnProperty(e)?{space:Xt[e],local:t}:t};var Kt=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function Zt(t,e){return t.style.getPropertyValue(e)||Kt(t).getComputedStyle(t,null).getPropertyValue(e)}function Qt(t){return t.trim().split(/^|\s+/)}function te(t){return t.classList||new ee(t)}function ee(t){this._node=t,this._names=Qt(t.getAttribute("class")||"")}function ne(t,e){for(var n=te(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function re(t,e){for(var n=te(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}ee.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function ie(){this.textContent=""}function se(){this.innerHTML=""}function oe(){this.nextSibling&&this.parentNode.appendChild(this)}function ae(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}var le=function(t){var e=Jt(t);return(e.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===Wt&&e.documentElement.namespaceURI===Wt?e.createElement(t):e.createElementNS(n,t)}})(e)};function ce(){return null}function he(){var t=this.parentNode;t&&t.removeChild(this)}function de(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function ue(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}var pe={},fe=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(pe={mouseenter:"mouseover",mouseleave:"mouseout"}));function _e(t,e,n){return t=me(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function me(t,e,n){return function(r){var i=fe;fe=r;try{t.call(this,this.__data__,e,n)}finally{fe=i}}}function ge(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,s=e.length;r<s;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function ye(t,e,n){var r=pe.hasOwnProperty(t.type)?_e:me;return function(i,s,o){var a,l=this.__on,c=r(e,s,o);if(l)for(var h=0,d=l.length;h<d;++h)if((a=l[h]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=c,a.capture=n),void(a.value=e);this.addEventListener(t.type,c,n),a={type:t.type,name:t.name,value:e,listener:c,capture:n},l?l.push(a):this.__on=[a]}}function ve(t,e,n){var r=Kt(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}var be=[null];function we(t,e){this._groups=t,this._parents=e}function xe(){return new we([[document.documentElement]],be)}we.prototype=xe.prototype={constructor:we,select:function(t){"function"!=typeof t&&(t=Ft(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var s,o,a=e[i],l=a.length,c=r[i]=new Array(l),h=0;h<l;++h)(s=a[h])&&(o=t.call(s,s.__data__,h,a))&&("__data__"in s&&(o.__data__=s.__data__),c[h]=o);return new we(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=Bt(t));for(var e=this._groups,n=e.length,r=[],i=[],s=0;s<n;++s)for(var o,a=e[s],l=a.length,c=0;c<l;++c)(o=a[c])&&(r.push(t.call(o,o.__data__,c,a)),i.push(o));return new we(r,i)},filter:function(t){"function"!=typeof t&&(t=Vt(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var s,o=e[i],a=o.length,l=r[i]=[],c=0;c<a;++c)(s=o[c])&&t.call(s,s.__data__,c,o)&&l.push(s);return new we(r,this._parents)},data:function(t,e){if(!t)return p=new Array(this.size()),c=-1,this.each(function(t){p[++c]=t}),p;var n=e?Gt:qt,r=this._parents,i=this._groups;"function"!=typeof t&&(t=function(t){return function(){return t}}(t));for(var s=i.length,o=new Array(s),a=new Array(s),l=new Array(s),c=0;c<s;++c){var h=r[c],d=i[c],u=d.length,p=t.call(h,h&&h.__data__,c,r),f=p.length,_=a[c]=new Array(f),m=o[c]=new Array(f);n(h,d,_,m,l[c]=new Array(u),p,e);for(var g,y,v=0,b=0;v<f;++v)if(g=_[v]){for(v>=b&&(b=v+1);!(y=m[b])&&++b<f;);g._next=y||null}}return(o=new we(o,r))._enter=a,o._exit=l,o},enter:function(){return new we(this._enter||this._groups.map(Ut),this._parents)},exit:function(){return new we(this._exit||this._groups.map(Ut),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,s=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(i=e(i)),null==n?s.remove():n(s),r&&i?r.merge(i).order():i},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,s=Math.min(r,i),o=new Array(r),a=0;a<s;++a)for(var l,c=e[a],h=n[a],d=c.length,u=o[a]=new Array(d),p=0;p<d;++p)(l=c[p]||h[p])&&(u[p]=l);for(;a<r;++a)o[a]=e[a];return new we(o,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],s=i.length-1,o=i[s];--s>=0;)(r=i[s])&&(o&&4^r.compareDocumentPosition(o)&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=Yt);for(var n=this._groups,r=n.length,i=new Array(r),s=0;s<r;++s){for(var o,a=n[s],l=a.length,c=i[s]=new Array(l),h=0;h<l;++h)(o=a[h])&&(c[h]=o);c.sort(e)}return new we(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,s=r.length;i<s;++i){var o=r[i];if(o)return o}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,s=e[n],o=0,a=s.length;o<a;++o)(i=s[o])&&t.call(i,i.__data__,o,s);return this},attr:function(t,e){var n=Jt(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):Zt(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=Qt(t+"");if(arguments.length<2){for(var r=te(this.node()),i=-1,s=n.length;++i<s;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?ne:re)(this,t)}}:e?function(t){return function(){ne(this,t)}}:function(t){return function(){re(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?ie:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?se:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(oe)},lower:function(){return this.each(ae)},append:function(t){var e="function"==typeof t?t:le(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:le(t),r=null==e?ce:"function"==typeof e?e:Ft(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(he)},clone:function(t){return this.select(t?ue:de)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,s=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),o=s.length;if(!(arguments.length<2)){for(a=e?ye:ge,null==n&&(n=!1),r=0;r<o;++r)this.each(a(s[r],e,n));return this}var a=this.node().__on;if(a)for(var l,c=0,h=a.length;c<h;++c)for(r=0,l=a[c];r<o;++r)if((i=s[r]).type===l.type&&i.name===l.name)return l.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return ve(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return ve(this,t,e)}})(t,e))}};var Ce=xe,Se=function(t){return"string"==typeof t?new we([[document.querySelector(t)]],[document.documentElement]):new we([[t]],be)};var Ae=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function Te(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function Pe(){}var Ee="\\s*([+-]?\\d+)\\s*",Ie="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ne="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Me=/^#([0-9a-f]{3,8})$/,Oe=new RegExp("^rgb\\("+[Ee,Ee,Ee]+"\\)$"),Re=new RegExp("^rgb\\("+[Ne,Ne,Ne]+"\\)$"),ke=new RegExp("^rgba\\("+[Ee,Ee,Ee,Ie]+"\\)$"),ze=new RegExp("^rgba\\("+[Ne,Ne,Ne,Ie]+"\\)$"),De=new RegExp("^hsl\\("+[Ie,Ne,Ne]+"\\)$"),Le=new RegExp("^hsla\\("+[Ie,Ne,Ne,Ie]+"\\)$"),Fe={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function He(){return this.rgb().formatHex()}function Be(){return this.rgb().formatRgb()}function Ve(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=Me.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?Ue(e):3===n?new qe(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?new qe(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?new qe(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=Oe.exec(t))?new qe(e[1],e[2],e[3],1):(e=Re.exec(t))?new qe(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=ke.exec(t))?$e(e[1],e[2],e[3],e[4]):(e=ze.exec(t))?$e(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=De.exec(t))?Xe(e[1],e[2]/100,e[3]/100,1):(e=Le.exec(t))?Xe(e[1],e[2]/100,e[3]/100,e[4]):Fe.hasOwnProperty(t)?Ue(Fe[t]):"transparent"===t?new qe(NaN,NaN,NaN,0):null}function Ue(t){return new qe(t>>16&255,t>>8&255,255&t,1)}function $e(t,e,n,r){return r<=0&&(t=e=n=NaN),new qe(t,e,n,r)}function je(t,e,n,r){return 1===arguments.length?function(t){return t instanceof Pe||(t=Ve(t)),t?new qe((t=t.rgb()).r,t.g,t.b,t.opacity):new qe}(t):new qe(t,e,n,null==r?1:r)}function qe(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Ge(){return"#"+We(this.r)+We(this.g)+We(this.b)}function Ye(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function We(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Xe(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Ke(t,e,n,r)}function Je(t){if(t instanceof Ke)return new Ke(t.h,t.s,t.l,t.opacity);if(t instanceof Pe||(t=Ve(t)),!t)return new Ke;if(t instanceof Ke)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),s=Math.max(e,n,r),o=NaN,a=s-i,l=(s+i)/2;return a?(o=e===s?(n-r)/a+6*(n<r):n===s?(r-e)/a+2:(e-n)/a+4,a/=l<.5?s+i:2-s-i,o*=60):a=l>0&&l<1?0:o,new Ke(o,a,l,t.opacity)}function Ke(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Ze(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function Qe(t,e,n,r,i){var s=t*t,o=s*t;return((1-3*t+3*s-o)*e+(4-6*s+3*o)*n+(1+3*t+3*s-3*o)*r+o*i)/6}Ae(Pe,Ve,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:He,formatHex:He,formatHsl:function(){return Je(this).formatHsl()},formatRgb:Be,toString:Be}),Ae(qe,je,Te(Pe,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new qe(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new qe(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Ge,formatHex:Ge,formatRgb:Ye,toString:Ye})),Ae(Ke,function(t,e,n,r){return 1===arguments.length?Je(t):new Ke(t,e,n,null==r?1:r)},Te(Pe,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ke(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ke(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new qe(Ze(t>=240?t-240:t+120,i,r),Ze(t,i,r),Ze(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var tn=function(t){return function(){return t}};function en(t,e){return function(n){return t+n*e}}function nn(t){return 1==(t=+t)?rn:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):tn(isNaN(e)?n:e)}}function rn(t,e){var n=e-t;return n?en(t,n):tn(isNaN(t)?e:t)}var sn=function t(e){var n=nn(e);function r(t,e){var r=n((t=je(t)).r,(e=je(e)).r),i=n(t.g,e.g),s=n(t.b,e.b),o=rn(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=s(e),t.opacity=o(e),t+""}}return r.gamma=t,r}(1);function on(t){return function(e){var n,r,i=e.length,s=new Array(i),o=new Array(i),a=new Array(i);for(n=0;n<i;++n)r=je(e[n]),s[n]=r.r||0,o[n]=r.g||0,a[n]=r.b||0;return s=t(s),o=t(o),a=t(a),r.opacity=1,function(t){return r.r=s(t),r.g=o(t),r.b=a(t),r+""}}}on(function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],s=t[r+1],o=r>0?t[r-1]:2*i-s,a=r<e-1?t[r+2]:2*s-i;return Qe((n-r/e)*e,o,i,s,a)}}),on(function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],s=t[r%e],o=t[(r+1)%e],a=t[(r+2)%e];return Qe((n-r/e)*e,i,s,o,a)}});var an=function(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}},ln=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,cn=new RegExp(ln.source,"g");var hn,dn,un=function(t,e){var n,r,i,s=ln.lastIndex=cn.lastIndex=0,o=-1,a=[],l=[];for(t+="",e+="";(n=ln.exec(t))&&(r=cn.exec(e));)(i=r.index)>s&&(i=e.slice(s,i),a[o]?a[o]+=i:a[++o]=i),(n=n[0])===(r=r[0])?a[o]?a[o]+=r:a[++o]=r:(a[++o]=null,l.push({i:o,x:an(n,r)})),s=cn.lastIndex;return s<e.length&&(i=e.slice(s),a[o]?a[o]+=i:a[++o]=i),a.length<2?l[0]?function(t){return function(e){return t(e)+""}}(l[0].x):function(t){return function(){return t}}(e):(e=l.length,function(t){for(var n,r=0;r<e;++r)a[(n=l[r]).i]=n.x(t);return a.join("")})},pn=0,fn=0,_n=0,mn=1e3,gn=0,yn=0,vn=0,bn="object"==typeof performance&&performance.now?performance:Date,wn="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function xn(){return yn||(wn(Cn),yn=bn.now()+vn)}function Cn(){yn=0}function Sn(){this._call=this._time=this._next=null}function An(t,e,n){var r=new Sn;return r.restart(t,e,n),r}function Tn(){yn=(gn=bn.now())+vn,pn=fn=0;try{!function(){xn(),++pn;for(var t,e=hn;e;)(t=yn-e._time)>=0&&e._call.call(null,t),e=e._next;--pn}()}finally{pn=0,function(){var t,e,n=hn,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:hn=e);dn=t,En(r)}(),yn=0}}function Pn(){var t=bn.now(),e=t-gn;e>mn&&(vn-=e,gn=t)}function En(t){pn||(fn&&(fn=clearTimeout(fn)),t-yn>24?(t<1/0&&(fn=setTimeout(Tn,t-bn.now()-vn)),_n&&(_n=clearInterval(_n))):(_n||(gn=bn.now(),_n=setInterval(Pn,mn)),pn=1,wn(Tn)))}Sn.prototype=An.prototype={constructor:Sn,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?xn():+n)+(null==e?0:+e),this._next||dn===this||(dn?dn._next=this:hn=this,dn=this),this._call=t,this._time=n,En()},stop:function(){this._call&&(this._call=null,this._time=1/0,En())}};var In=function(t,e,n){var r=new Sn;return e=null==e?0:+e,r.restart(function(n){r.stop(),t(n+e)},e,n),r},Nn=Dt("start","end","cancel","interrupt"),Mn=[],On=0,Rn=1,kn=2,zn=3,Dn=4,Ln=5,Fn=6,Hn=function(t,e,n,r,i,s){var o=t.__transition;if(o){if(n in o)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function s(l){var c,h,d,u;if(n.state!==Rn)return a();for(c in i)if((u=i[c]).name===n.name){if(u.state===zn)return In(s);u.state===Dn?(u.state=Fn,u.timer.stop(),u.on.call("interrupt",t,t.__data__,u.index,u.group),delete i[c]):+c<e&&(u.state=Fn,u.timer.stop(),u.on.call("cancel",t,t.__data__,u.index,u.group),delete i[c])}if(In(function(){n.state===zn&&(n.state=Dn,n.timer.restart(o,n.delay,n.time),o(l))}),n.state=kn,n.on.call("start",t,t.__data__,n.index,n.group),n.state===kn){for(n.state=zn,r=new Array(d=n.tween.length),c=0,h=-1;c<d;++c)(u=n.tween[c].value.call(t,t.__data__,n.index,n.group))&&(r[++h]=u);r.length=h+1}}function o(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(a),n.state=Ln,1),s=-1,o=r.length;++s<o;)r[s].call(t,i);n.state===Ln&&(n.on.call("end",t,t.__data__,n.index,n.group),a())}function a(){for(var r in n.state=Fn,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=An(function(t){n.state=Rn,n.timer.restart(s,n.delay,n.time),n.delay<=t&&s(t-n.delay)},0,n.time)}(t,n,{name:e,index:r,group:i,on:Nn,tween:Mn,time:s.time,delay:s.delay,duration:s.duration,ease:s.ease,timer:null,state:On})};function Bn(t,e){var n=Un(t,e);if(n.state>On)throw new Error("too late; already scheduled");return n}function Vn(t,e){var n=Un(t,e);if(n.state>zn)throw new Error("too late; already running");return n}function Un(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var $n,jn,qn,Gn,Yn=function(t,e){var n,r,i,s=t.__transition,o=!0;if(s){for(i in e=null==e?null:e+"",s)(n=s[i]).name===e?(r=n.state>kn&&n.state<Ln,n.state=Fn,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete s[i]):o=!1;o&&delete t.__transition}},Wn=180/Math.PI,Xn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Jn=function(t,e,n,r,i,s){var o,a,l;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(l=t*n+e*r)&&(n-=t*l,r-=e*l),(a=Math.sqrt(n*n+r*r))&&(n/=a,r/=a,l/=a),t*r<e*n&&(t=-t,e=-e,l=-l,o=-o),{translateX:i,translateY:s,rotate:Math.atan2(e,t)*Wn,skewX:Math.atan(l)*Wn,scaleX:o,scaleY:a}};function Kn(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(s,o){var a=[],l=[];return s=t(s),o=t(o),function(t,r,i,s,o,a){if(t!==i||r!==s){var l=o.push("translate(",null,e,null,n);a.push({i:l-4,x:an(t,i)},{i:l-2,x:an(r,s)})}else(i||s)&&o.push("translate("+i+e+s+n)}(s.translateX,s.translateY,o.translateX,o.translateY,a,l),function(t,e,n,s){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),s.push({i:n.push(i(n)+"rotate(",null,r)-2,x:an(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(s.rotate,o.rotate,a,l),function(t,e,n,s){t!==e?s.push({i:n.push(i(n)+"skewX(",null,r)-2,x:an(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(s.skewX,o.skewX,a,l),function(t,e,n,r,s,o){if(t!==n||e!==r){var a=s.push(i(s)+"scale(",null,",",null,")");o.push({i:a-4,x:an(t,n)},{i:a-2,x:an(e,r)})}else 1===n&&1===r||s.push(i(s)+"scale("+n+","+r+")")}(s.scaleX,s.scaleY,o.scaleX,o.scaleY,a,l),s=o=null,function(t){for(var e,n=-1,r=l.length;++n<r;)a[(e=l[n]).i]=e.x(t);return a.join("")}}}var Zn=Kn(function(t){return"none"===t?Xn:($n||($n=document.createElement("DIV"),jn=document.documentElement,qn=document.defaultView),$n.style.transform=t,t=qn.getComputedStyle(jn.appendChild($n),null).getPropertyValue("transform"),jn.removeChild($n),t=t.slice(7,-1).split(","),Jn(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Qn=Kn(function(t){return null==t?Xn:(Gn||(Gn=document.createElementNS("http://www.w3.org/2000/svg","g")),Gn.setAttribute("transform",t),(t=Gn.transform.baseVal.consolidate())?(t=t.matrix,Jn(t.a,t.b,t.c,t.d,t.e,t.f)):Xn)},", ",")",")");function tr(t,e,n){var r=t._id;return t.each(function(){var t=Vn(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)}),function(t){return Un(t,r).value[e]}}var er=function(t,e){var n;return("number"==typeof e?an:e instanceof Ve?sn:(n=Ve(e))?(e=n,sn):un)(t,e)};var nr=Ce.prototype.constructor;function rr(t){return function(){this.style.removeProperty(t)}}var ir=0;function sr(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function or(){return++ir}var ar=Ce.prototype;sr.prototype=function(t){return Ce().transition(t)}.prototype={constructor:sr,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Ft(t));for(var r=this._groups,i=r.length,s=new Array(i),o=0;o<i;++o)for(var a,l,c=r[o],h=c.length,d=s[o]=new Array(h),u=0;u<h;++u)(a=c[u])&&(l=t.call(a,a.__data__,u,c))&&("__data__"in a&&(l.__data__=a.__data__),d[u]=l,Hn(d[u],e,n,u,d,Un(a,n)));return new sr(s,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Bt(t));for(var r=this._groups,i=r.length,s=[],o=[],a=0;a<i;++a)for(var l,c=r[a],h=c.length,d=0;d<h;++d)if(l=c[d]){for(var u,p=t.call(l,l.__data__,d,c),f=Un(l,n),_=0,m=p.length;_<m;++_)(u=p[_])&&Hn(u,e,n,_,p,f);s.push(p),o.push(l)}return new sr(s,o,e,n)},filter:function(t){"function"!=typeof t&&(t=Vt(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var s,o=e[i],a=o.length,l=r[i]=[],c=0;c<a;++c)(s=o[c])&&t.call(s,s.__data__,c,o)&&l.push(s);return new sr(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,s=Math.min(r,i),o=new Array(r),a=0;a<s;++a)for(var l,c=e[a],h=n[a],d=c.length,u=o[a]=new Array(d),p=0;p<d;++p)(l=c[p]||h[p])&&(u[p]=l);for(;a<r;++a)o[a]=e[a];return new sr(o,this._parents,this._name,this._id)},selection:function(){return new nr(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=or(),r=this._groups,i=r.length,s=0;s<i;++s)for(var o,a=r[s],l=a.length,c=0;c<l;++c)if(o=a[c]){var h=Un(o,e);Hn(o,t,n,c,a,{time:h.time+h.delay+h.duration,delay:0,duration:h.duration,ease:h.ease})}return new sr(r,this._parents,t,n)},call:ar.call,nodes:ar.nodes,node:ar.node,size:ar.size,empty:ar.empty,each:ar.each,on:function(t,e){var n=this._id;return arguments.length<2?Un(this.node(),n).on.on(t):this.each(function(t,e,n){var r,i,s=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}(e)?Bn:Vn;return function(){var o=s(this,t),a=o.on;a!==r&&(i=(r=a).copy()).on(e,n),o.on=i}}(n,t,e))},attr:function(t,e){var n=Jt(t),r="transform"===n?Qn:er;return this.attrTween(t,"function"==typeof e?(n.local?function(t,e,n){var r,i,s;return function(){var o,a,l=n(this);if(null!=l)return(o=this.getAttributeNS(t.space,t.local))===(a=l+"")?null:o===r&&a===i?s:(i=a,s=e(r=o,l));this.removeAttributeNS(t.space,t.local)}}:function(t,e,n){var r,i,s;return function(){var o,a,l=n(this);if(null!=l)return(o=this.getAttribute(t))===(a=l+"")?null:o===r&&a===i?s:(i=a,s=e(r=o,l));this.removeAttribute(t)}})(n,r,tr(this,"attr."+t,e)):null==e?(n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(n):(n.local?function(t,e,n){var r,i,s=n+"";return function(){var o=this.getAttributeNS(t.space,t.local);return o===s?null:o===r?i:i=e(r=o,n)}}:function(t,e,n){var r,i,s=n+"";return function(){var o=this.getAttribute(t);return o===s?null:o===r?i:i=e(r=o,n)}})(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=Jt(t);return this.tween(n,(r.local?function(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}(t,i)),n}return i._value=e,i}:function(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}(t,i)),n}return i._value=e,i})(r,e))},style:function(t,e,n){var r="transform"==(t+="")?Zn:er;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var s=Zt(this,t),o=(this.style.removeProperty(t),Zt(this,t));return s===o?null:s===n&&o===r?i:i=e(n=s,r=o)}}(t,r)).on("end.style."+t,rr(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,s;return function(){var o=Zt(this,t),a=n(this),l=a+"";return null==a&&(this.style.removeProperty(t),l=a=Zt(this,t)),o===l?null:o===r&&l===i?s:(i=l,s=e(r=o,a))}}(t,r,tr(this,"style."+t,e))).each(function(t,e){var n,r,i,s,o="style."+e,a="end."+o;return function(){var l=Vn(this,t),c=l.on,h=null==l.value[o]?s||(s=rr(e)):void 0;c===n&&i===h||(r=(n=c).copy()).on(a,i=h),l.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,s=n+"";return function(){var o=Zt(this,t);return o===s?null:o===r?i:i=e(r=o,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){var r,i;function s(){var s=e.apply(this,arguments);return s!==i&&(r=(i=s)&&function(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}(t,s,n)),r}return s._value=e,s}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(tr(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,function(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&function(t){return function(e){this.textContent=t.call(this,e)}}(r)),e}return r._value=t,r}(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=Un(this.node(),n).tween,s=0,o=i.length;s<o;++s)if((r=i[s]).name===t)return r.value;return null}return this.each((null==e?function(t,e){var n,r;return function(){var i=Vn(this,t),s=i.tween;if(s!==n)for(var o=0,a=(r=n=s).length;o<a;++o)if(r[o].name===e){(r=r.slice()).splice(o,1);break}i.tween=r}}:function(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var s=Vn(this,t),o=s.tween;if(o!==r){i=(r=o).slice();for(var a={name:e,value:n},l=0,c=i.length;l<c;++l)if(i[l].name===e){i[l]=a;break}l===c&&i.push(a)}s.tween=i}})(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){Bn(this,t).delay=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){Bn(this,t).delay=e}})(e,t)):Un(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){Vn(this,t).duration=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){Vn(this,t).duration=e}})(e,t)):Un(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){Vn(this,t).ease=e}}(e,t)):Un(this.node(),e).ease},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise(function(s,o){var a={value:o},l={value:function(){0==--i&&s()}};n.each(function(){var n=Vn(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(a),e._.interrupt.push(a),e._.end.push(l)),n.on=e})})}};var lr={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function cr(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return lr.time=xn(),lr;return n}Ce.prototype.interrupt=function(t){return this.each(function(){Yn(this,t)})},Ce.prototype.transition=function(t){var e,n;t instanceof sr?(e=t._id,t=t._name):(e=or(),(n=lr).time=xn(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,s=0;s<i;++s)for(var o,a=r[s],l=a.length,c=0;c<l;++c)(o=a[c])&&Hn(o,t,e,c,a,n||cr(o,e));return new sr(r,this._parents,t,e)};function hr(t){return[+t[0],+t[1]]}function dr(t){return[hr(t[0]),hr(t[1])]}["w","e"].map(ur),["n","s"].map(ur),["n","w","e","s","nw","ne","sw","se"].map(ur);function ur(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var pr=Math.PI,fr=2*pr,_r=fr-1e-6;function mr(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function gr(){return new mr}mr.prototype=gr.prototype={constructor:mr,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,s){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+s)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var s=this._x1,o=this._y1,a=n-t,l=r-e,c=s-t,h=o-e,d=c*c+h*h;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(d>1e-6)if(Math.abs(h*a-l*c)>1e-6&&i){var u=n-s,p=r-o,f=a*a+l*l,_=u*u+p*p,m=Math.sqrt(f),g=Math.sqrt(d),y=i*Math.tan((pr-Math.acos((f+d-_)/(2*m*g)))/2),v=y/g,b=y/m;Math.abs(v-1)>1e-6&&(this._+="L"+(t+v*c)+","+(e+v*h)),this._+="A"+i+","+i+",0,0,"+ +(h*u>c*p)+","+(this._x1=t+b*a)+","+(this._y1=e+b*l)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,s){t=+t,e=+e,s=!!s;var o=(n=+n)*Math.cos(r),a=n*Math.sin(r),l=t+o,c=e+a,h=1^s,d=s?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+l+","+c:(Math.abs(this._x1-l)>1e-6||Math.abs(this._y1-c)>1e-6)&&(this._+="L"+l+","+c),n&&(d<0&&(d=d%fr+fr),d>_r?this._+="A"+n+","+n+",0,1,"+h+","+(t-o)+","+(e-a)+"A"+n+","+n+",0,1,"+h+","+(this._x1=l)+","+(this._y1=c):d>1e-6&&(this._+="A"+n+","+n+",0,"+ +(d>=pr)+","+h+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var yr=gr;function vr(){}function br(t,e){var n=new vr;if(t instanceof vr)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var r,i=-1,s=t.length;if(null==e)for(;++i<s;)n.set(i,t[i]);else for(;++i<s;)n.set(e(r=t[i],i,t),r)}else if(t)for(var o in t)n.set(o,t[o]);return n}vr.prototype=br.prototype={constructor:vr,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var wr=br;function xr(){}var Cr=wr.prototype;function Sr(t,e){var n=new xr;if(t instanceof xr)t.each(function(t){n.add(t)});else if(t){var r=-1,i=t.length;if(null==e)for(;++r<i;)n.add(t[r]);else for(;++r<i;)n.add(e(t[r],r,t))}return n}xr.prototype=Sr.prototype={constructor:xr,has:Cr.has,add:function(t){return this["$"+(t+="")]=t,this},remove:Cr.remove,clear:Cr.clear,values:Cr.keys,size:Cr.size,empty:Cr.empty,each:Cr.each};Array.prototype.slice;var Ar={},Tr={},Pr=34,Er=10,Ir=13;function Nr(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+'] || ""'}).join(",")+"}")}function Mr(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var r in t)r in e||n.push(e[r]=r)}),n}function Or(t,e){var n=t+"",r=n.length;return r<e?new Array(e-r+1).join(0)+n:n}function Rr(t){var e=t.getUTCHours(),n=t.getUTCMinutes(),r=t.getUTCSeconds(),i=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":function(t){return t<0?"-"+Or(-t,6):t>9999?"+"+Or(t,6):Or(t,4)}(t.getUTCFullYear())+"-"+Or(t.getUTCMonth()+1,2)+"-"+Or(t.getUTCDate(),2)+(i?"T"+Or(e,2)+":"+Or(n,2)+":"+Or(r,2)+"."+Or(i,3)+"Z":r?"T"+Or(e,2)+":"+Or(n,2)+":"+Or(r,2)+"Z":n||e?"T"+Or(e,2)+":"+Or(n,2)+"Z":"")}var kr=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function r(t,e){var r,i=[],s=t.length,o=0,a=0,l=s<=0,c=!1;function h(){if(l)return Tr;if(c)return c=!1,Ar;var e,r,i=o;if(t.charCodeAt(i)===Pr){for(;o++<s&&t.charCodeAt(o)!==Pr||t.charCodeAt(++o)===Pr;);return(e=o)>=s?l=!0:(r=t.charCodeAt(o++))===Er?c=!0:r===Ir&&(c=!0,t.charCodeAt(o)===Er&&++o),t.slice(i+1,e-1).replace(/""/g,'"')}for(;o<s;){if((r=t.charCodeAt(e=o++))===Er)c=!0;else if(r===Ir)c=!0,t.charCodeAt(o)===Er&&++o;else if(r!==n)continue;return t.slice(i,e)}return l=!0,t.slice(i,s)}for(t.charCodeAt(s-1)===Er&&--s,t.charCodeAt(s-1)===Ir&&--s;(r=h())!==Tr;){for(var d=[];r!==Ar&&r!==Tr;)d.push(r),r=h();e&&null==(d=e(d,a++))||i.push(d)}return i}function i(e,n){return e.map(function(e){return n.map(function(t){return o(e[t])}).join(t)})}function s(e){return e.map(o).join(t)}function o(t){return null==t?"":t instanceof Date?Rr(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,i,s=r(t,function(t,r){if(n)return n(t,r-1);i=t,n=e?function(t,e){var n=Nr(t);return function(r,i){return e(n(r),i,t)}}(t,e):Nr(t)});return s.columns=i||[],s},parseRows:r,format:function(e,n){return null==n&&(n=Mr(e)),[n.map(o).join(t)].concat(i(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=Mr(t)),i(t,e).join("\n")},formatRows:function(t){return t.map(s).join("\n")},formatRow:s,formatValue:o}},zr=kr(","),Dr=zr.parse,Lr=(zr.parseRows,zr.format,zr.formatBody,zr.formatRows,zr.formatRow,zr.formatValue,kr("\t")),Fr=Lr.parse;Lr.parseRows,Lr.format,Lr.formatBody,Lr.formatRows,Lr.formatRow,Lr.formatValue;function Hr(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Br=function(t,e){return fetch(t,e).then(Hr)};function Vr(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),Br(e,n).then(function(e){return t(e,r)})}}Vr(Dr),Vr(Fr);function Ur(t){return function(e,n){return Br(e,n).then(function(e){return(new DOMParser).parseFromString(e,t)})}}Ur("application/xml"),Ur("text/html"),Ur("image/svg+xml");function $r(t,e,n,r){if(isNaN(e)||isNaN(n))return t;var i,s,o,a,l,c,h,d,u,p=t._root,f={data:r},_=t._x0,m=t._y0,g=t._x1,y=t._y1;if(!p)return t._root=f,t;for(;p.length;)if((c=e>=(s=(_+g)/2))?_=s:g=s,(h=n>=(o=(m+y)/2))?m=o:y=o,i=p,!(p=p[d=h<<1|c]))return i[d]=f,t;if(a=+t._x.call(null,p.data),l=+t._y.call(null,p.data),e===a&&n===l)return f.next=p,i?i[d]=f:t._root=f,t;do{i=i?i[d]=new Array(4):t._root=new Array(4),(c=e>=(s=(_+g)/2))?_=s:g=s,(h=n>=(o=(m+y)/2))?m=o:y=o}while((d=h<<1|c)==(u=(l>=o)<<1|a>=s));return i[u]=p,i[d]=f,t}var jr=function(t,e,n,r,i){this.node=t,this.x0=e,this.y0=n,this.x1=r,this.y1=i};function qr(t){return t[0]}function Gr(t){return t[1]}function Yr(t,e,n){var r=new Wr(null==e?qr:e,null==n?Gr:n,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Wr(t,e,n,r,i,s){this._x=t,this._y=e,this._x0=n,this._y0=r,this._x1=i,this._y1=s,this._root=void 0}function Xr(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}var Jr=Yr.prototype=Wr.prototype;Jr.copy=function(){var t,e,n=new Wr(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=Xr(r),n;for(t=[{source:r,target:n._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(e=r.source[i])&&(e.length?t.push({source:e,target:r.target[i]=new Array(4)}):r.target[i]=Xr(e));return n},Jr.add=function(t){var e=+this._x.call(null,t),n=+this._y.call(null,t);return $r(this.cover(e,n),e,n,t)},Jr.addAll=function(t){var e,n,r,i,s=t.length,o=new Array(s),a=new Array(s),l=1/0,c=1/0,h=-1/0,d=-1/0;for(n=0;n<s;++n)isNaN(r=+this._x.call(null,e=t[n]))||isNaN(i=+this._y.call(null,e))||(o[n]=r,a[n]=i,r<l&&(l=r),r>h&&(h=r),i<c&&(c=i),i>d&&(d=i));if(l>h||c>d)return this;for(this.cover(l,c).cover(h,d),n=0;n<s;++n)$r(this,o[n],a[n],t[n]);return this},Jr.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,r=this._y0,i=this._x1,s=this._y1;if(isNaN(n))i=(n=Math.floor(t))+1,s=(r=Math.floor(e))+1;else{for(var o,a,l=i-n,c=this._root;n>t||t>=i||r>e||e>=s;)switch(a=(e<r)<<1|t<n,(o=new Array(4))[a]=c,c=o,l*=2,a){case 0:i=n+l,s=r+l;break;case 1:n=i-l,s=r+l;break;case 2:i=n+l,r=s-l;break;case 3:n=i-l,r=s-l}this._root&&this._root.length&&(this._root=c)}return this._x0=n,this._y0=r,this._x1=i,this._y1=s,this},Jr.data=function(){var t=[];return this.visit(function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)}),t},Jr.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Jr.find=function(t,e,n){var r,i,s,o,a,l,c,h=this._x0,d=this._y0,u=this._x1,p=this._y1,f=[],_=this._root;for(_&&f.push(new jr(_,h,d,u,p)),null==n?n=1/0:(h=t-n,d=e-n,u=t+n,p=e+n,n*=n);l=f.pop();)if(!(!(_=l.node)||(i=l.x0)>u||(s=l.y0)>p||(o=l.x1)<h||(a=l.y1)<d))if(_.length){var m=(i+o)/2,g=(s+a)/2;f.push(new jr(_[3],m,g,o,a),new jr(_[2],i,g,m,a),new jr(_[1],m,s,o,g),new jr(_[0],i,s,m,g)),(c=(e>=g)<<1|t>=m)&&(l=f[f.length-1],f[f.length-1]=f[f.length-1-c],f[f.length-1-c]=l)}else{var y=t-+this._x.call(null,_.data),v=e-+this._y.call(null,_.data),b=y*y+v*v;if(b<n){var w=Math.sqrt(n=b);h=t-w,d=e-w,u=t+w,p=e+w,r=_.data}}return r},Jr.remove=function(t){if(isNaN(s=+this._x.call(null,t))||isNaN(o=+this._y.call(null,t)))return this;var e,n,r,i,s,o,a,l,c,h,d,u,p=this._root,f=this._x0,_=this._y0,m=this._x1,g=this._y1;if(!p)return this;if(p.length)for(;;){if((c=s>=(a=(f+m)/2))?f=a:m=a,(h=o>=(l=(_+g)/2))?_=l:g=l,e=p,!(p=p[d=h<<1|c]))return this;if(!p.length)break;(e[d+1&3]||e[d+2&3]||e[d+3&3])&&(n=e,u=d)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):e?(i?e[d]=i:delete e[d],(p=e[0]||e[1]||e[2]||e[3])&&p===(e[3]||e[2]||e[1]||e[0])&&!p.length&&(n?n[u]=p:this._root=p),this):(this._root=i,this)},Jr.removeAll=function(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this},Jr.root=function(){return this._root},Jr.size=function(){var t=0;return this.visit(function(e){if(!e.length)do{++t}while(e=e.next)}),t},Jr.visit=function(t){var e,n,r,i,s,o,a=[],l=this._root;for(l&&a.push(new jr(l,this._x0,this._y0,this._x1,this._y1));e=a.pop();)if(!t(l=e.node,r=e.x0,i=e.y0,s=e.x1,o=e.y1)&&l.length){var c=(r+s)/2,h=(i+o)/2;(n=l[3])&&a.push(new jr(n,c,h,s,o)),(n=l[2])&&a.push(new jr(n,r,h,c,o)),(n=l[1])&&a.push(new jr(n,c,i,s,h)),(n=l[0])&&a.push(new jr(n,r,i,c,h))}return this},Jr.visitAfter=function(t){var e,n=[],r=[];for(this._root&&n.push(new jr(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var i=e.node;if(i.length){var s,o=e.x0,a=e.y0,l=e.x1,c=e.y1,h=(o+l)/2,d=(a+c)/2;(s=i[0])&&n.push(new jr(s,o,a,h,d)),(s=i[1])&&n.push(new jr(s,h,a,l,d)),(s=i[2])&&n.push(new jr(s,o,d,h,c)),(s=i[3])&&n.push(new jr(s,h,d,l,c))}r.push(e)}for(;e=r.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},Jr.x=function(t){return arguments.length?(this._x=t,this):this._x},Jr.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var Kr=function(){return Math.random()},Zr=(function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(Kr),function t(e){function n(t,n){var r,i;return t=null==t?0:+t,n=null==n?1:+n,function(){var s;if(null!=r)s=r,r=null;else do{r=2*e()-1,s=2*e()-1,i=r*r+s*s}while(!i||i>1);return t+n*s*Math.sqrt(-2*Math.log(i)/i)}}return n.source=t,n}(Kr)),Qr=(function t(e){function n(){var t=Zr.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(Kr),function t(e){function n(t){return function(){for(var n=0,r=0;r<t;++r)n+=e();return n}}return n.source=t,n}(Kr));(function t(e){function n(t){var n=Qr.source(e)(t);return function(){return n()/t}}return n.source=t,n})(Kr),function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(Kr);function ti(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}var ei=Array.prototype,ni=(ei.map,ei.slice);var ri=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function ii(t){if(!(e=ri.exec(t)))throw new Error("invalid format: "+t);var e;return new si({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function si(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}ii.prototype=si.prototype,si.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var oi,ai,li,ci,hi=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},di=function(t){return(t=hi(Math.abs(t)))?t[1]:NaN},ui=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(e+1):t},pi=function(t,e){var n=hi(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},fi={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return pi(100*t,e)},r:pi,s:function(t,e){var n=hi(t,e);if(!n)return t+"";var r=n[0],i=n[1],s=i-(oi=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,o=r.length;return s===o?r:s>o?r+new Array(s-o+1).join("0"):s>0?r.slice(0,s)+"."+r.slice(s):"0."+new Array(1-s).join("0")+hi(t,Math.max(0,e+s-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},_i=function(t){return t},mi=Array.prototype.map,gi=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],yi=function(t){var e=void 0===t.grouping||void 0===t.thousands?_i:function(t,e){return function(n,r){for(var i=n.length,s=[],o=0,a=t[0],l=0;i>0&&a>0&&(l+a+1>r&&(a=Math.max(1,r-l)),s.push(n.substring(i-=a,i+a)),!((l+=a+1)>r));)a=t[o=(o+1)%t.length];return s.reverse().join(e)}}(mi.call(t.grouping,Number),t.thousands+""),n=void 0===t.currency?"":t.currency[0]+"",r=void 0===t.currency?"":t.currency[1]+"",i=void 0===t.decimal?".":t.decimal+"",s=void 0===t.numerals?_i:function(t){return function(e){return e.replace(/[0-9]/g,function(e){return t[+e]})}}(mi.call(t.numerals,String)),o=void 0===t.percent?"%":t.percent+"",a=void 0===t.minus?"-":t.minus+"",l=void 0===t.nan?"NaN":t.nan+"";function c(t){var c=(t=ii(t)).fill,h=t.align,d=t.sign,u=t.symbol,p=t.zero,f=t.width,_=t.comma,m=t.precision,g=t.trim,y=t.type;"n"===y?(_=!0,y="g"):fi[y]||(void 0===m&&(m=12),g=!0,y="g"),(p||"0"===c&&"="===h)&&(p=!0,c="0",h="=");var v="$"===u?n:"#"===u&&/[boxX]/.test(y)?"0"+y.toLowerCase():"",b="$"===u?r:/[%p]/.test(y)?o:"",w=fi[y],x=/[defgprs%]/.test(y);function C(t){var n,r,o,u=v,C=b;if("c"===y)C=w(t)+C,t="";else{var S=(t=+t)<0;if(t=isNaN(t)?l:w(Math.abs(t),m),g&&(t=ui(t)),S&&0==+t&&(S=!1),u=(S?"("===d?d:a:"-"===d||"("===d?"":d)+u,C=("s"===y?gi[8+oi/3]:"")+C+(S&&"("===d?")":""),x)for(n=-1,r=t.length;++n<r;)if(48>(o=t.charCodeAt(n))||o>57){C=(46===o?i+t.slice(n+1):t.slice(n))+C,t=t.slice(0,n);break}}_&&!p&&(t=e(t,1/0));var A=u.length+t.length+C.length,T=A<f?new Array(f-A+1).join(c):"";switch(_&&p&&(t=e(T+t,T.length?f-C.length:1/0),T=""),h){case"<":t=u+t+C+T;break;case"=":t=u+T+t+C;break;case"^":t=T.slice(0,A=T.length>>1)+u+t+C+T.slice(A);break;default:t=T+u+t+C}return s(t)}return m=void 0===m?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,m)):Math.max(0,Math.min(20,m)),C.toString=function(){return t+""},C}return{format:c,formatPrefix:function(t,e){var n=c(((t=ii(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(di(e)/3))),i=Math.pow(10,-r),s=gi[8+r/3];return function(t){return n(i*t)+s}}}};!function(t){ai=yi(t),li=ai.format,ci=ai.formatPrefix}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"});var vi=function(t,e,n,r){var i,s=Et(t,e,n);switch((r=ii(null==r?",f":r)).type){case"s":var o=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(di(e)/3)))-di(Math.abs(t)))}(s,o))||(r.precision=i),ci(r,o);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,di(e)-di(t))+1}(s,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-di(Math.abs(t)))}(s))||(r.precision=i-2*("%"===r.type))}return li(r)};function bi(t){var e=t.domain;return t.ticks=function(t){var n=e();return Tt(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return vi(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i=e(),s=0,o=i.length-1,a=i[s],l=i[o];return l<a&&(r=a,a=l,l=r,r=s,s=o,o=r),(r=Pt(a,l,n))>0?r=Pt(a=Math.floor(a/r)*r,l=Math.ceil(l/r)*r,n):r<0&&(r=Pt(a=Math.ceil(a*r)/r,l=Math.floor(l*r)/r,n)),r>0?(i[s]=Math.floor(a/r)*r,i[o]=Math.ceil(l/r)*r,e(i)):r<0&&(i[s]=Math.ceil(a*r)/r,i[o]=Math.floor(l*r)/r,e(i)),t},t}var wi=new Date,xi=new Date;function Ci(t,e,n,r){function i(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return i.floor=function(e){return t(e=new Date(+e)),e},i.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},i.round=function(t){var e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},i.range=function(n,r,s){var o,a=[];if(n=i.ceil(n),s=null==s?1:Math.floor(s),!(n<r&&s>0))return a;do{a.push(o=new Date(+n)),e(n,s),t(n)}while(o<n&&n<r);return a},i.filter=function(n){return Ci(function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););})},n&&(i.count=function(e,r){return wi.setTime(+e),xi.setTime(+r),t(wi),t(xi),Math.floor(n(wi,xi))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(e){return r(e)%t==0}:function(e){return i.count(0,e)%t==0}):i:null}),i}var Si=Ci(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t,e){return e.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()});Si.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ci(function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,n){e.setFullYear(e.getFullYear()+n*t)}):null};var Ai=Si,Ti=(Si.range,Ci(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,e){t.setMonth(t.getMonth()+e)},function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())},function(t){return t.getMonth()})),Pi=(Ti.range,6e4),Ei=6048e5;function Ii(t){return Ci(function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+7*e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Pi)/Ei})}var Ni=Ii(0),Mi=Ii(1),Oi=Ii(2),Ri=Ii(3),ki=Ii(4),zi=Ii(5),Di=Ii(6),Li=(Ni.range,Mi.range,Oi.range,Ri.range,ki.range,zi.range,Di.range,Ci(function(t){t.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Pi)/864e5},function(t){return t.getDate()-1})),Fi=Li,Hi=(Li.range,Ci(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*Pi)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getHours()})),Bi=(Hi.range,Ci(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())},function(t,e){t.setTime(+t+e*Pi)},function(t,e){return(e-t)/Pi},function(t){return t.getMinutes()})),Vi=(Bi.range,Ci(function(t){t.setTime(t-t.getMilliseconds())},function(t,e){t.setTime(+t+1e3*e)},function(t,e){return(e-t)/1e3},function(t){return t.getUTCSeconds()})),Ui=(Vi.range,Ci(function(){},function(t,e){t.setTime(+t+e)},function(t,e){return e-t}));Ui.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Ci(function(e){e.setTime(Math.floor(e/t)*t)},function(e,n){e.setTime(+e+n*t)},function(e,n){return(n-e)/t}):Ui:null};Ui.range;function $i(t){return Ci(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+7*e)},function(t,e){return(e-t)/Ei})}var ji=$i(0),qi=$i(1),Gi=$i(2),Yi=$i(3),Wi=$i(4),Xi=$i(5),Ji=$i(6),Ki=(ji.range,qi.range,Gi.range,Yi.range,Wi.range,Xi.range,Ji.range,Ci(function(t){t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+e)},function(t,e){return(e-t)/864e5},function(t){return t.getUTCDate()-1})),Zi=Ki,Qi=(Ki.range,Ci(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)},function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));Qi.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ci(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)}):null};var ts=Qi;Qi.range;function es(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function ns(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function rs(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var is,ss={"-":"",_:" ",0:"0"},os=/^\s*\d+/,as=/^%/,ls=/[\\^$*+?|[\]().{}]/g;function cs(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",s=i.length;return r+(s<n?new Array(n-s+1).join(e)+i:i)}function hs(t){return t.replace(ls,"\\$&")}function ds(t){return new RegExp("^(?:"+t.map(hs).join("|")+")","i")}function us(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function ps(t,e,n){var r=os.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function fs(t,e,n){var r=os.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function _s(t,e,n){var r=os.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function ms(t,e,n){var r=os.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function gs(t,e,n){var r=os.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function ys(t,e,n){var r=os.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function vs(t,e,n){var r=os.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function bs(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function ws(t,e,n){var r=os.exec(e.slice(n,n+1));return r?(t.q=3*r[0]-3,n+r[0].length):-1}function xs(t,e,n){var r=os.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function Cs(t,e,n){var r=os.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function Ss(t,e,n){var r=os.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function As(t,e,n){var r=os.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function Ts(t,e,n){var r=os.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function Ps(t,e,n){var r=os.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function Es(t,e,n){var r=os.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function Is(t,e,n){var r=os.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function Ns(t,e,n){var r=as.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function Ms(t,e,n){var r=os.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function Os(t,e,n){var r=os.exec(e.slice(n));return r?(t.s=+r[0],n+r[0].length):-1}function Rs(t,e){return cs(t.getDate(),e,2)}function ks(t,e){return cs(t.getHours(),e,2)}function zs(t,e){return cs(t.getHours()%12||12,e,2)}function Ds(t,e){return cs(1+Fi.count(Ai(t),t),e,3)}function Ls(t,e){return cs(t.getMilliseconds(),e,3)}function Fs(t,e){return Ls(t,e)+"000"}function Hs(t,e){return cs(t.getMonth()+1,e,2)}function Bs(t,e){return cs(t.getMinutes(),e,2)}function Vs(t,e){return cs(t.getSeconds(),e,2)}function Us(t){var e=t.getDay();return 0===e?7:e}function $s(t,e){return cs(Ni.count(Ai(t)-1,t),e,2)}function js(t,e){var n=t.getDay();return t=n>=4||0===n?ki(t):ki.ceil(t),cs(ki.count(Ai(t),t)+(4===Ai(t).getDay()),e,2)}function qs(t){return t.getDay()}function Gs(t,e){return cs(Mi.count(Ai(t)-1,t),e,2)}function Ys(t,e){return cs(t.getFullYear()%100,e,2)}function Ws(t,e){return cs(t.getFullYear()%1e4,e,4)}function Xs(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+cs(e/60|0,"0",2)+cs(e%60,"0",2)}function Js(t,e){return cs(t.getUTCDate(),e,2)}function Ks(t,e){return cs(t.getUTCHours(),e,2)}function Zs(t,e){return cs(t.getUTCHours()%12||12,e,2)}function Qs(t,e){return cs(1+Zi.count(ts(t),t),e,3)}function to(t,e){return cs(t.getUTCMilliseconds(),e,3)}function eo(t,e){return to(t,e)+"000"}function no(t,e){return cs(t.getUTCMonth()+1,e,2)}function ro(t,e){return cs(t.getUTCMinutes(),e,2)}function io(t,e){return cs(t.getUTCSeconds(),e,2)}function so(t){var e=t.getUTCDay();return 0===e?7:e}function oo(t,e){return cs(ji.count(ts(t)-1,t),e,2)}function ao(t,e){var n=t.getUTCDay();return t=n>=4||0===n?Wi(t):Wi.ceil(t),cs(Wi.count(ts(t),t)+(4===ts(t).getUTCDay()),e,2)}function lo(t){return t.getUTCDay()}function co(t,e){return cs(qi.count(ts(t)-1,t),e,2)}function ho(t,e){return cs(t.getUTCFullYear()%100,e,2)}function uo(t,e){return cs(t.getUTCFullYear()%1e4,e,4)}function po(){return"+0000"}function fo(){return"%"}function _o(t){return+t}function mo(t){return Math.floor(+t/1e3)}!function(t){is=function(t){var e=t.dateTime,n=t.date,r=t.time,i=t.periods,s=t.days,o=t.shortDays,a=t.months,l=t.shortMonths,c=ds(i),h=us(i),d=ds(s),u=us(s),p=ds(o),f=us(o),_=ds(a),m=us(a),g=ds(l),y=us(l),v={a:function(t){return o[t.getDay()]},A:function(t){return s[t.getDay()]},b:function(t){return l[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:Rs,e:Rs,f:Fs,H:ks,I:zs,j:Ds,L:Ls,m:Hs,M:Bs,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:_o,s:mo,S:Vs,u:Us,U:$s,V:js,w:qs,W:Gs,x:null,X:null,y:Ys,Y:Ws,Z:Xs,"%":fo},b={a:function(t){return o[t.getUTCDay()]},A:function(t){return s[t.getUTCDay()]},b:function(t){return l[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:Js,e:Js,f:eo,H:Ks,I:Zs,j:Qs,L:to,m:no,M:ro,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:_o,s:mo,S:io,u:so,U:oo,V:ao,w:lo,W:co,x:null,X:null,y:ho,Y:uo,Z:po,"%":fo},w={a:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.w=f[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=d.exec(e.slice(n));return r?(t.w=u[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=g.exec(e.slice(n));return r?(t.m=y[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=_.exec(e.slice(n));return r?(t.m=m[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return S(t,e,n,r)},d:Cs,e:Cs,f:Is,H:As,I:As,j:Ss,L:Es,m:xs,M:Ts,p:function(t,e,n){var r=c.exec(e.slice(n));return r?(t.p=h[r[0].toLowerCase()],n+r[0].length):-1},q:ws,Q:Ms,s:Os,S:Ps,u:fs,U:_s,V:ms,w:ps,W:gs,x:function(t,e,r){return S(t,n,e,r)},X:function(t,e,n){return S(t,r,e,n)},y:vs,Y:ys,Z:bs,"%":Ns};function x(t,e){return function(n){var r,i,s,o=[],a=-1,l=0,c=t.length;for(n instanceof Date||(n=new Date(+n));++a<c;)37===t.charCodeAt(a)&&(o.push(t.slice(l,a)),null!=(i=ss[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(s=e[r])&&(r=s(n,i)),o.push(r),l=a+1);return o.push(t.slice(l,a)),o.join("")}}function C(t,e){return function(n){var r,i,s=rs(1900,void 0,1);if(S(s,t,n+="",0)!=n.length)return null;if("Q"in s)return new Date(s.Q);if("s"in s)return new Date(1e3*s.s+("L"in s?s.L:0));if(!e||"Z"in s||(s.Z=0),"p"in s&&(s.H=s.H%12+12*s.p),void 0===s.m&&(s.m="q"in s?s.q:0),"V"in s){if(s.V<1||s.V>53)return null;"w"in s||(s.w=1),"Z"in s?(r=(i=(r=ns(rs(s.y,0,1))).getUTCDay())>4||0===i?qi.ceil(r):qi(r),r=Zi.offset(r,7*(s.V-1)),s.y=r.getUTCFullYear(),s.m=r.getUTCMonth(),s.d=r.getUTCDate()+(s.w+6)%7):(r=(i=(r=es(rs(s.y,0,1))).getDay())>4||0===i?Mi.ceil(r):Mi(r),r=Fi.offset(r,7*(s.V-1)),s.y=r.getFullYear(),s.m=r.getMonth(),s.d=r.getDate()+(s.w+6)%7)}else("W"in s||"U"in s)&&("w"in s||(s.w="u"in s?s.u%7:"W"in s?1:0),i="Z"in s?ns(rs(s.y,0,1)).getUTCDay():es(rs(s.y,0,1)).getDay(),s.m=0,s.d="W"in s?(s.w+6)%7+7*s.W-(i+5)%7:s.w+7*s.U-(i+6)%7);return"Z"in s?(s.H+=s.Z/100|0,s.M+=s.Z%100,ns(s)):es(s)}}function S(t,e,n,r){for(var i,s,o=0,a=e.length,l=n.length;o<a;){if(r>=l)return-1;if(37===(i=e.charCodeAt(o++))){if(i=e.charAt(o++),!(s=w[i in ss?e.charAt(o++):i])||(r=s(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return v.x=x(n,v),v.X=x(r,v),v.c=x(e,v),b.x=x(n,b),b.X=x(r,b),b.c=x(e,b),{format:function(t){var e=x(t+="",v);return e.toString=function(){return t},e},parse:function(t){var e=C(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=x(t+="",b);return e.toString=function(){return t},e},utcParse:function(t){var e=C(t+="",!0);return e.toString=function(){return t},e}}}(t),is.format,is.parse,is.utcFormat,is.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var go=Ci(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCMonth(t.getUTCMonth()+e)},function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),yo=(go.range,Ci(function(t){t.setUTCMinutes(0,0,0)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getUTCHours()})),vo=(yo.range,Ci(function(t){t.setUTCSeconds(0,0)},function(t,e){t.setTime(+t+e*Pi)},function(t,e){return(e-t)/Pi},function(t){return t.getUTCMinutes()}));vo.range;var bo=function(t){return function(){return t}},wo=Math.abs,xo=Math.atan2,Co=Math.cos,So=Math.max,Ao=Math.min,To=Math.sin,Po=Math.sqrt,Eo=1e-12,Io=Math.PI,No=Io/2,Mo=2*Io;function Oo(t){return t>=1?No:t<=-1?-No:Math.asin(t)}function Ro(t){return t.innerRadius}function ko(t){return t.outerRadius}function zo(t){return t.startAngle}function Do(t){return t.endAngle}function Lo(t){return t&&t.padAngle}function Fo(t,e,n,r,i,s,o){var a=t-n,l=e-r,c=(o?s:-s)/Po(a*a+l*l),h=c*l,d=-c*a,u=t+h,p=e+d,f=n+h,_=r+d,m=(u+f)/2,g=(p+_)/2,y=f-u,v=_-p,b=y*y+v*v,w=i-s,x=u*_-f*p,C=(v<0?-1:1)*Po(So(0,w*w*b-x*x)),S=(x*v-y*C)/b,A=(-x*y-v*C)/b,T=(x*v+y*C)/b,P=(-x*y+v*C)/b,E=S-m,I=A-g,N=T-m,M=P-g;return E*E+I*I>N*N+M*M&&(S=T,A=P),{cx:S,cy:A,x01:-h,y01:-d,x11:S*(i/w-1),y11:A*(i/w-1)}}var Ho=function(){var t=Ro,e=ko,n=bo(0),r=null,i=zo,s=Do,o=Lo,a=null;function l(){var l,c,h=+t.apply(this,arguments),d=+e.apply(this,arguments),u=i.apply(this,arguments)-No,p=s.apply(this,arguments)-No,f=wo(p-u),_=p>u;if(a||(a=l=yr()),d<h&&(c=d,d=h,h=c),d>Eo)if(f>Mo-Eo)a.moveTo(d*Co(u),d*To(u)),a.arc(0,0,d,u,p,!_),h>Eo&&(a.moveTo(h*Co(p),h*To(p)),a.arc(0,0,h,p,u,_));else{var m,g,y=u,v=p,b=u,w=p,x=f,C=f,S=o.apply(this,arguments)/2,A=S>Eo&&(r?+r.apply(this,arguments):Po(h*h+d*d)),T=Ao(wo(d-h)/2,+n.apply(this,arguments)),P=T,E=T;if(A>Eo){var I=Oo(A/h*To(S)),N=Oo(A/d*To(S));(x-=2*I)>Eo?(b+=I*=_?1:-1,w-=I):(x=0,b=w=(u+p)/2),(C-=2*N)>Eo?(y+=N*=_?1:-1,v-=N):(C=0,y=v=(u+p)/2)}var M=d*Co(y),O=d*To(y),R=h*Co(w),k=h*To(w);if(T>Eo){var z,D=d*Co(v),L=d*To(v),F=h*Co(b),H=h*To(b);if(f<Io&&(z=function(t,e,n,r,i,s,o,a){var l=n-t,c=r-e,h=o-i,d=a-s,u=d*l-h*c;if(!(u*u<Eo))return[t+(u=(h*(e-s)-d*(t-i))/u)*l,e+u*c]}(M,O,F,H,D,L,R,k))){var B=M-z[0],V=O-z[1],U=D-z[0],$=L-z[1],j=1/To(function(t){return t>1?0:t<-1?Io:Math.acos(t)}((B*U+V*$)/(Po(B*B+V*V)*Po(U*U+$*$)))/2),q=Po(z[0]*z[0]+z[1]*z[1]);P=Ao(T,(h-q)/(j-1)),E=Ao(T,(d-q)/(j+1))}}C>Eo?E>Eo?(m=Fo(F,H,M,O,d,E,_),g=Fo(D,L,R,k,d,E,_),a.moveTo(m.cx+m.x01,m.cy+m.y01),E<T?a.arc(m.cx,m.cy,E,xo(m.y01,m.x01),xo(g.y01,g.x01),!_):(a.arc(m.cx,m.cy,E,xo(m.y01,m.x01),xo(m.y11,m.x11),!_),a.arc(0,0,d,xo(m.cy+m.y11,m.cx+m.x11),xo(g.cy+g.y11,g.cx+g.x11),!_),a.arc(g.cx,g.cy,E,xo(g.y11,g.x11),xo(g.y01,g.x01),!_))):(a.moveTo(M,O),a.arc(0,0,d,y,v,!_)):a.moveTo(M,O),h>Eo&&x>Eo?P>Eo?(m=Fo(R,k,D,L,h,-P,_),g=Fo(M,O,F,H,h,-P,_),a.lineTo(m.cx+m.x01,m.cy+m.y01),P<T?a.arc(m.cx,m.cy,P,xo(m.y01,m.x01),xo(g.y01,g.x01),!_):(a.arc(m.cx,m.cy,P,xo(m.y01,m.x01),xo(m.y11,m.x11),!_),a.arc(0,0,h,xo(m.cy+m.y11,m.cx+m.x11),xo(g.cy+g.y11,g.cx+g.x11),_),a.arc(g.cx,g.cy,P,xo(g.y11,g.x11),xo(g.y01,g.x01),!_))):a.arc(0,0,h,w,b,_):a.lineTo(R,k)}else a.moveTo(0,0);if(a.closePath(),l)return a=null,l+""||null}return l.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +s.apply(this,arguments))/2-Io/2;return[Co(r)*n,To(r)*n]},l.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:bo(+e),l):t},l.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:bo(+t),l):e},l.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:bo(+t),l):n},l.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:bo(+t),l):r},l.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:bo(+t),l):i},l.endAngle=function(t){return arguments.length?(s="function"==typeof t?t:bo(+t),l):s},l.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:bo(+t),l):o},l.context=function(t){return arguments.length?(a=null==t?null:t,l):a},l},Bo=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},Vo=function(t){return t},Uo=function(){var t=Vo,e=Bo,n=null,r=bo(0),i=bo(Mo),s=bo(0);function o(o){var a,l,c,h,d,u=o.length,p=0,f=new Array(u),_=new Array(u),m=+r.apply(this,arguments),g=Math.min(Mo,Math.max(-Mo,i.apply(this,arguments)-m)),y=Math.min(Math.abs(g)/u,s.apply(this,arguments)),v=y*(g<0?-1:1);for(a=0;a<u;++a)(d=_[f[a]=a]=+t(o[a],a,o))>0&&(p+=d);for(null!=e?f.sort(function(t,n){return e(_[t],_[n])}):null!=n&&f.sort(function(t,e){return n(o[t],o[e])}),a=0,c=p?(g-u*v)/p:0;a<u;++a,m=h)l=f[a],h=m+((d=_[l])>0?d*c:0)+v,_[l]={data:o[l],index:a,value:d,startAngle:m,endAngle:h,padAngle:y};return _}return o.value=function(e){return arguments.length?(t="function"==typeof e?e:bo(+e),o):t},o.sortValues=function(t){return arguments.length?(e=t,n=null,o):e},o.sort=function(t){return arguments.length?(n=t,e=null,o):n},o.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:bo(+t),o):r},o.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:bo(+t),o):i},o.padAngle=function(t){return arguments.length?(s="function"==typeof t?t:bo(+t),o):s},o};function $o(){this._=null}function jo(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function qo(t,e){var n=e,r=e.R,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function Go(t,e){var n=e,r=e.L,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function Yo(t){for(;t.L;)t=t.L;return t}$o.prototype={constructor:$o,insert:function(t,e){var n,r,i;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=Yo(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(r=n.U).L?(i=r.R)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.R&&(qo(this,n),n=(t=n).U),n.C=!1,r.C=!0,Go(this,r)):(i=r.L)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.L&&(Go(this,n),n=(t=n).U),n.C=!1,r.C=!0,qo(this,r)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,i=t.U,s=t.L,o=t.R;if(n=s?o?Yo(o):s:o,i?i.L===t?i.L=n:i.R=n:this._=n,s&&o?(r=n.C,n.C=t.C,n.L=s,s.U=n,n!==o?(i=n.U,n.U=t.U,t=n.R,i.L=t,n.R=o,o.U=n):(n.U=i,i=n,t=n.R)):(r=t.C,t=n),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((e=i.R).C&&(e.C=!1,i.C=!0,qo(this,i),e=i.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,Go(this,e),e=i.R),e.C=i.C,i.C=e.R.C=!1,qo(this,i),t=this._;break}}else if((e=i.L).C&&(e.C=!1,i.C=!0,Go(this,i),e=i.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,qo(this,e),e=i.L),e.C=i.C,i.C=e.L.C=!1,Go(this,i),t=this._;break}e.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Wo=$o;function Xo(t,e,n,r){var i=[null,null],s=ga.push(i)-1;return i.left=t,i.right=e,n&&Ko(i,t,e,n),r&&Ko(i,e,t,r),_a[t.index].halfedges.push(s),_a[e.index].halfedges.push(s),i}function Jo(t,e,n){var r=[e,n];return r.left=t,r}function Ko(t,e,n,r){t[0]||t[1]?t.left===n?t[1]=r:t[0]=r:(t[0]=r,t.left=e,t.right=n)}function Zo(t,e,n,r,i){var s,o=t[0],a=t[1],l=o[0],c=o[1],h=0,d=1,u=a[0]-l,p=a[1]-c;if(s=e-l,u||!(s>0)){if(s/=u,u<0){if(s<h)return;s<d&&(d=s)}else if(u>0){if(s>d)return;s>h&&(h=s)}if(s=r-l,u||!(s<0)){if(s/=u,u<0){if(s>d)return;s>h&&(h=s)}else if(u>0){if(s<h)return;s<d&&(d=s)}if(s=n-c,p||!(s>0)){if(s/=p,p<0){if(s<h)return;s<d&&(d=s)}else if(p>0){if(s>d)return;s>h&&(h=s)}if(s=i-c,p||!(s<0)){if(s/=p,p<0){if(s>d)return;s>h&&(h=s)}else if(p>0){if(s<h)return;s<d&&(d=s)}return!(h>0||d<1)||(h>0&&(t[0]=[l+h*u,c+h*p]),d<1&&(t[1]=[l+d*u,c+d*p]),!0)}}}}}function Qo(t,e,n,r,i){var s=t[1];if(s)return!0;var o,a,l=t[0],c=t.left,h=t.right,d=c[0],u=c[1],p=h[0],f=h[1],_=(d+p)/2,m=(u+f)/2;if(f===u){if(_<e||_>=r)return;if(d>p){if(l){if(l[1]>=i)return}else l=[_,n];s=[_,i]}else{if(l){if(l[1]<n)return}else l=[_,i];s=[_,n]}}else if(a=m-(o=(d-p)/(f-u))*_,o<-1||o>1)if(d>p){if(l){if(l[1]>=i)return}else l=[(n-a)/o,n];s=[(i-a)/o,i]}else{if(l){if(l[1]<n)return}else l=[(i-a)/o,i];s=[(n-a)/o,n]}else if(u<f){if(l){if(l[0]>=r)return}else l=[e,o*e+a];s=[r,o*r+a]}else{if(l){if(l[0]<e)return}else l=[r,o*r+a];s=[e,o*e+a]}return t[0]=l,t[1]=s,!0}function ta(t,e){var n=t.site,r=e.left,i=e.right;return n===i&&(i=r,r=n),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(n===r?(r=e[1],i=e[0]):(r=e[0],i=e[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function ea(t,e){return e[+(e.left!==t.site)]}function na(t,e){return e[+(e.left===t.site)]}var ra,ia=[];function sa(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,i=t.site,s=n.site;if(r!==s){var o=i[0],a=i[1],l=r[0]-o,c=r[1]-a,h=s[0]-o,d=s[1]-a,u=2*(l*d-c*h);if(!(u>=-va)){var p=l*l+c*c,f=h*h+d*d,_=(d*p-c*f)/u,m=(l*f-h*p)/u,g=ia.pop()||new function(){jo(this),this.x=this.y=this.arc=this.site=this.cy=null};g.arc=t,g.site=i,g.x=_+o,g.y=(g.cy=m+a)+Math.sqrt(_*_+m*m),t.circle=g;for(var y=null,v=ma._;v;)if(g.y<v.y||g.y===v.y&&g.x<=v.x){if(!v.L){y=v.P;break}v=v.L}else{if(!v.R){y=v;break}v=v.R}ma.insert(y,g),y||(ra=g)}}}}function oa(t){var e=t.circle;e&&(e.P||(ra=e.N),ma.remove(e),ia.push(e),jo(e),t.circle=null)}var aa=[];function la(t){var e=aa.pop()||new function(){jo(this),this.edge=this.site=this.circle=null};return e.site=t,e}function ca(t){oa(t),fa.remove(t),aa.push(t),jo(t)}function ha(t){var e=t.circle,n=e.x,r=e.cy,i=[n,r],s=t.P,o=t.N,a=[t];ca(t);for(var l=s;l.circle&&Math.abs(n-l.circle.x)<ya&&Math.abs(r-l.circle.cy)<ya;)s=l.P,a.unshift(l),ca(l),l=s;a.unshift(l),oa(l);for(var c=o;c.circle&&Math.abs(n-c.circle.x)<ya&&Math.abs(r-c.circle.cy)<ya;)o=c.N,a.push(c),ca(c),c=o;a.push(c),oa(c);var h,d=a.length;for(h=1;h<d;++h)c=a[h],l=a[h-1],Ko(c.edge,l.site,c.site,i);l=a[0],(c=a[d-1]).edge=Xo(l.site,c.site,null,i),sa(l),sa(c)}function da(t){for(var e,n,r,i,s=t[0],o=t[1],a=fa._;a;)if((r=ua(a,o)-s)>ya)a=a.L;else{if(!((i=s-pa(a,o))>ya)){r>-ya?(e=a.P,n=a):i>-ya?(e=a,n=a.N):e=n=a;break}if(!a.R){e=a;break}a=a.R}!function(t){_a[t.index]={site:t,halfedges:[]}}(t);var l=la(t);if(fa.insert(e,l),e||n){if(e===n)return oa(e),n=la(e.site),fa.insert(l,n),l.edge=n.edge=Xo(e.site,l.site),sa(e),void sa(n);if(n){oa(e),oa(n);var c=e.site,h=c[0],d=c[1],u=t[0]-h,p=t[1]-d,f=n.site,_=f[0]-h,m=f[1]-d,g=2*(u*m-p*_),y=u*u+p*p,v=_*_+m*m,b=[(m*y-p*v)/g+h,(u*v-_*y)/g+d];Ko(n.edge,c,f,b),l.edge=Xo(c,t,null,b),n.edge=Xo(t,f,null,b),sa(e),sa(n)}else l.edge=Xo(e.site,l.site)}}function ua(t,e){var n=t.site,r=n[0],i=n[1],s=i-e;if(!s)return r;var o=t.P;if(!o)return-1/0;var a=(n=o.site)[0],l=n[1],c=l-e;if(!c)return a;var h=a-r,d=1/s-1/c,u=h/c;return d?(-u+Math.sqrt(u*u-2*d*(h*h/(-2*c)-l+c/2+i-s/2)))/d+r:(r+a)/2}function pa(t,e){var n=t.N;if(n)return ua(n,e);var r=t.site;return r[1]===e?r[0]:1/0}var fa,_a,ma,ga,ya=1e-6,va=1e-12;function ba(t,e,n){return(t[0]-n[0])*(e[1]-t[1])-(t[0]-e[0])*(n[1]-t[1])}function wa(t,e){return e[1]-t[1]||e[0]-t[0]}function xa(t,e){var n,r,i,s=t.sort(wa).pop();for(ga=[],_a=new Array(t.length),fa=new Wo,ma=new Wo;;)if(i=ra,s&&(!i||s[1]<i.y||s[1]===i.y&&s[0]<i.x))s[0]===n&&s[1]===r||(da(s),n=s[0],r=s[1]),s=t.pop();else{if(!i)break;ha(i.arc)}if(function(){for(var t,e,n,r,i=0,s=_a.length;i<s;++i)if((t=_a[i])&&(r=(e=t.halfedges).length)){var o=new Array(r),a=new Array(r);for(n=0;n<r;++n)o[n]=n,a[n]=ta(t,ga[e[n]]);for(o.sort(function(t,e){return a[e]-a[t]}),n=0;n<r;++n)a[n]=e[o[n]];for(n=0;n<r;++n)e[n]=a[n]}}(),e){var o=+e[0][0],a=+e[0][1],l=+e[1][0],c=+e[1][1];!function(t,e,n,r){for(var i,s=ga.length;s--;)Qo(i=ga[s],t,e,n,r)&&Zo(i,t,e,n,r)&&(Math.abs(i[0][0]-i[1][0])>ya||Math.abs(i[0][1]-i[1][1])>ya)||delete ga[s]}(o,a,l,c),function(t,e,n,r){var i,s,o,a,l,c,h,d,u,p,f,_,m=_a.length,g=!0;for(i=0;i<m;++i)if(s=_a[i]){for(o=s.site,a=(l=s.halfedges).length;a--;)ga[l[a]]||l.splice(a,1);for(a=0,c=l.length;a<c;)f=(p=na(s,ga[l[a]]))[0],_=p[1],d=(h=ea(s,ga[l[++a%c]]))[0],u=h[1],(Math.abs(f-d)>ya||Math.abs(_-u)>ya)&&(l.splice(a,0,ga.push(Jo(o,p,Math.abs(f-t)<ya&&r-_>ya?[t,Math.abs(d-t)<ya?u:r]:Math.abs(_-r)<ya&&n-f>ya?[Math.abs(u-r)<ya?d:n,r]:Math.abs(f-n)<ya&&_-e>ya?[n,Math.abs(d-n)<ya?u:e]:Math.abs(_-e)<ya&&f-t>ya?[Math.abs(u-e)<ya?d:t,e]:null))-1),++c);c&&(g=!1)}if(g){var y,v,b,w=1/0;for(i=0,g=null;i<m;++i)(s=_a[i])&&(b=(y=(o=s.site)[0]-t)*y+(v=o[1]-e)*v)<w&&(w=b,g=s);if(g){var x=[t,e],C=[t,r],S=[n,r],A=[n,e];g.halfedges.push(ga.push(Jo(o=g.site,x,C))-1,ga.push(Jo(o,C,S))-1,ga.push(Jo(o,S,A))-1,ga.push(Jo(o,A,x))-1)}}for(i=0;i<m;++i)(s=_a[i])&&(s.halfedges.length||delete _a[i])}(o,a,l,c)}this.edges=ga,this.cells=_a,fa=ma=ga=_a=null}xa.prototype={constructor:xa,polygons:function(){var t=this.edges;return this.cells.map(function(e){var n=e.halfedges.map(function(n){return ea(e,t[n])});return n.data=e.site.data,n})},triangles:function(){var t=[],e=this.edges;return this.cells.forEach(function(n,r){if(s=(i=n.halfedges).length)for(var i,s,o,a=n.site,l=-1,c=e[i[s-1]],h=c.left===a?c.right:c.left;++l<s;)o=h,h=(c=e[i[l]]).left===a?c.right:c.left,o&&h&&r<o.index&&r<h.index&&ba(a,o,h)<0&&t.push([a.data,o.data,h.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,e,n){for(var r,i,s=this,o=s._found||0,a=s.cells.length;!(i=s.cells[o]);)if(++o>=a)return null;var l=t-i.site[0],c=e-i.site[1],h=l*l+c*c;do{i=s.cells[r=o],o=null,i.halfedges.forEach(function(n){var r=s.edges[n],a=r.left;if(a!==i.site&&a||(a=r.right)){var l=t-a[0],c=e-a[1],d=l*l+c*c;d<h&&(h=d,o=a.index)}})}while(null!==o);return s._found=r,null==n||h<=n*n?i.site:null}};Math.SQRT2;function Ca(t,e,n){this.k=t,this.x=e,this.y=n}Ca.prototype={constructor:Ca,scale:function(t){return 1===t?this:new Ca(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new Ca(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new Ca(1,0,0);Ca.prototype;customElements.define("lsg-pie",class extends dt{static get properties(){return{dataPoints:{type:Array},maxRadius:{type:Number,attribute:"angle"}}}constructor(){super(),this.firsttime=1,this.degrees=10,this.NR_ELEMENTS=360/this.degrees,this.dataForColering=null,this.dataSizeElements=null,this._handleClick=this._handleClick.bind(this)}createRenderRoot(){return this}render(){return 0===this.firsttime&&this.doUpdate(this.dataPoints),D`
            <div>
           
            </div>
            `}firstUpdated(t){this.firsttime=0;var e=Se("div").append("svg").attr("id","TEST");e.classed("svg-container",!0).attr("viewBox","0 0 220 220").classed("svg-content-responsive",!0);for(var n=Math.min(175,175)/2,r=10..toString(),i=e.append("g").attr("transform","translate(100,100)"),s=[],o=0;o<this.NR_ELEMENTS;o++)s.push(o);var a=function t(){var e,n=0,r=1,i=1,s=[.5],o=[0,1];function a(t){return t<=t?o[wt(s,t,0,i)]:e}function l(){var t=-1;for(s=new Array(i);++t<i;)s[t]=((t+1)*r-(t-i)*n)/(i+1);return a}return a.domain=function(t){return arguments.length?(n=+t[0],r=+t[1],l()):[n,r]},a.range=function(t){return arguments.length?(i=(o=ni.call(t)).length-1,l()):o.slice()},a.invertExtent=function(t){var e=o.indexOf(t);return e<0?[NaN,NaN]:e<1?[n,s[0]]:e>=i?[s[i-1],r]:[s[e-1],s[e]]},a.unknown=function(t){return arguments.length?(e=t,a):a},a.thresholds=function(){return s.slice()},a.copy=function(){return t().domain([n,r]).range(o).unknown(e)},ti.apply(bi(a),arguments)}().range(["#fff5f0","#fff4ef","#fff4ee","#fff3ed","#fff2ec","#fff2eb","#fff1ea","#fff0e9","#fff0e8","#ffefe7","#ffeee6","#ffeee6","#ffede5","#ffece4","#ffece3","#ffebe2","#feeae1","#fee9e0","#fee9de","#fee8dd","#fee7dc","#fee6db","#fee6da","#fee5d9","#fee4d8","#fee3d7","#fee2d6","#fee2d5","#fee1d4","#fee0d2","#fedfd1","#feded0","#feddcf","#fedccd","#fedbcc","#fedacb","#fed9ca","#fed8c8","#fed7c7","#fdd6c6","#fdd5c4","#fdd4c3","#fdd3c1","#fdd2c0","#fdd1bf","#fdd0bd","#fdcfbc","#fdceba","#fdcdb9","#fdccb7","#fdcbb6","#fdc9b4","#fdc8b3","#fdc7b2","#fdc6b0","#fdc5af","#fdc4ad","#fdc2ac","#fdc1aa","#fdc0a8","#fcbfa7","#fcbea5","#fcbca4","#fcbba2","#fcbaa1","#fcb99f","#fcb89e","#fcb69c","#fcb59b","#fcb499","#fcb398","#fcb196","#fcb095","#fcaf94","#fcae92","#fcac91","#fcab8f","#fcaa8e","#fca98c","#fca78b","#fca689","#fca588","#fca486","#fca285","#fca183","#fca082","#fc9e81","#fc9d7f","#fc9c7e","#fc9b7c","#fc997b","#fc987a","#fc9778","#fc9677","#fc9475","#fc9374","#fc9273","#fc9071","#fc8f70","#fc8e6f","#fc8d6d","#fc8b6c","#fc8a6b","#fc8969","#fc8868","#fc8667","#fc8565","#fc8464","#fb8263","#fb8162","#fb8060","#fb7f5f","#fb7d5e","#fb7c5d","#fb7b5b","#fb795a","#fb7859","#fb7758","#fb7657","#fb7455","#fa7354","#fa7253","#fa7052","#fa6f51","#fa6e50","#fa6c4e","#f96b4d","#f96a4c","#f9684b","#f9674a","#f96549","#f86448","#f86347","#f86146","#f86045","#f75e44","#f75d43","#f75c42","#f65a41","#f65940","#f6573f","#f5563e","#f5553d","#f4533c","#f4523b","#f4503a","#f34f39","#f34e38","#f24c37","#f24b37","#f14936","#f14835","#f04734","#ef4533","#ef4433","#ee4332","#ed4131","#ed4030","#ec3f2f","#eb3d2f","#eb3c2e","#ea3b2d","#e93a2d","#e8382c","#e7372b","#e6362b","#e6352a","#e5342a","#e43229","#e33128","#e23028","#e12f27","#e02e27","#df2d26","#de2c26","#dd2b25","#dc2a25","#db2924","#da2824","#d92723","#d72623","#d62522","#d52422","#d42321","#d32221","#d22121","#d12020","#d01f20","#ce1f1f","#cd1e1f","#cc1d1f","#cb1d1e","#ca1c1e","#c91b1e","#c71b1d","#c61a1d","#c5191d","#c4191c","#c3181c","#c2181c","#c0171b","#bf171b","#be161b","#bd161a","#bb151a","#ba151a","#b91419","#b81419","#b61419","#b51319","#b41318","#b21218","#b11218","#b01218","#ae1117","#ad1117","#ac1117","#aa1017","#a91016","#a71016","#a60f16","#a40f16","#a30e15","#a10e15","#a00e15","#9e0d15","#9c0d14","#9b0c14","#990c14","#970c14","#960b13","#940b13","#920a13","#900a13","#8f0a12","#8d0912","#8b0912","#890812","#870811","#860711","#840711","#820711","#800610","#7e0610","#7c0510","#7a0510","#78040f","#76040f","#75030f","#73030f","#71020e","#6f020e","#6d010e","#6b010e","#69000d","#67000d"]);a.domain([Nt(s,function(t){return t}),It(s,function(t){return t})]);var l=Array(this.NR_ELEMENTS).fill(this.degrees),c=Uo().sort(null).value(function(t){return t}),h=Ho().outerRadius(n-10).innerRadius(n-50),d=Ho().outerRadius(n).innerRadius(n);console.log(d);var u=d({startAngle:0,endAngle:2*Math.PI});console.log(u),e.append("path").attr("id","wavy").attr("d",u).style("fill","none").style("stroke","#0AAAAA").style("stroke-opacity",0).attr("transform","translate(100,100)"),e.append("text").append("textPath").attr("xlink:href","#wavy").style("text-anchor","middle").attr("startOffset","12.5%").attr("font-size",r).text("zijligging rechts"),e.append("text").append("textPath").attr("xlink:href","#wavy").style("text-anchor","middle").attr("startOffset","37.5%").attr("font-size",r).text("zijligging links"),e.append("text").append("textPath").attr("xlink:href","#wavy").style("text-anchor","middle").attr("startOffset","37.5%").attr("font-size",r).text("zijligging links"),e.append("text").append("textPath").attr("xlink:href","#wavy").style("text-anchor","right").attr("startOffset","48.5%").attr("font-size",r).text("rug "),e.append("text").append("textPath").attr("xlink:href","#wavy").style("text-anchor","left").attr("startOffset","0%").attr("font-size",r).text("ligging"),e.append("text").append("textPath").attr("xlink:href","#wavy").style("text-anchor","middle").attr("startOffset","75%").attr("font-size",r).text("buik ligging");var p=i.selectAll(".arc").data(c(l)).enter().append("g").attr("class","arc");for(p.append("path").attr("d",h).attr("fill",function(t,e){return a(s[e])}).on("click",this._handleClick),o=0;o<this.NR_ELEMENTS;o++)s[o]=0;this.dataForColering=s,this.width=200,this.height=200,this.arc=p,this.path=h,this.color=a}_handleClick(){this.doUpdate()}doUpdate(t){var e=this.color,n=this.dataForColering,r=t[0]/this.degrees;r=Math.floor(r),n[r]=n[r]+20,e.domain([Nt(n,function(t){return t}),It(n,function(t){return t})]),Se("div").select("svg").selectAll("path").attr("fill",function(t,r){return e(n[r])}),n[r]=n[r]-19}});customElements.define("vaadin-lumo-styles",class extends HTMLElement{static get version(){return"1.5.0"}});
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let Sa,Aa=null,Ta=window.HTMLImports&&window.HTMLImports.whenReady||null;function Pa(t){requestAnimationFrame(function(){Ta?Ta(t):(Aa||(Aa=new Promise(t=>{Sa=t}),"complete"===document.readyState?Sa():document.addEventListener("readystatechange",()=>{"complete"===document.readyState&&Sa()})),Aa.then(function(){t&&t()}))})}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const Ea="__seenByShadyCSS",Ia="__shadyCSSCachedStyle";let Na=null,Ma=null;class Oa{constructor(){this.customStyles=[],this.enqueued=!1,Pa(()=>{window.ShadyCSS.flushCustomStyles&&window.ShadyCSS.flushCustomStyles()})}enqueueDocumentValidation(){!this.enqueued&&Ma&&(this.enqueued=!0,Pa(Ma))}addCustomStyle(t){t[Ea]||(t[Ea]=!0,this.customStyles.push(t),this.enqueueDocumentValidation())}getStyleForCustomStyle(t){if(t[Ia])return t[Ia];let e;return e=t.getStyle?t.getStyle():t}processStyles(){const t=this.customStyles;for(let e=0;e<t.length;e++){const n=t[e];if(n[Ia])continue;const r=this.getStyleForCustomStyle(n);if(r){const t=r.__appliedElement||r;Na&&Na(t),n[Ia]=t}}return t}}Oa.prototype.addCustomStyle=Oa.prototype.addCustomStyle,Oa.prototype.getStyleForCustomStyle=Oa.prototype.getStyleForCustomStyle,Oa.prototype.processStyles=Oa.prototype.processStyles,Object.defineProperties(Oa.prototype,{transformCallback:{get:()=>Na,set(t){Na=t}},validateCallback:{get:()=>Ma,set(t){let e=!1;Ma||(e=!0),Ma=t,e&&this.enqueueDocumentValidation()}}});
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
const Ra=/(?:^|[;\s{]\s*)(--[\w-]*?)\s*:\s*(?:((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};{])+)|\{([^}]*)\}(?:(?=[;\s}])|$))/gi,ka=/(?:^|\W+)@apply\s*\(?([^);\n]*)\)?/gi,za=/@media\s(.*)/;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
function Da(t,e){for(let n in e)null===n?t.style.removeProperty(n):t.style.setProperty(n,e[n])}function La(t,e){const n=window.getComputedStyle(t).getPropertyValue(e);return n?n.trim():""}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
const Fa=!(window.ShadyDOM&&window.ShadyDOM.inUse);let Ha,Ba;function Va(t){Ha=(!t||!t.shimcssproperties)&&(Fa||Boolean(!navigator.userAgent.match(/AppleWebKit\/601|Edge\/15/)&&window.CSS&&CSS.supports&&CSS.supports("box-shadow","0 0 0 var(--foo)")))}window.ShadyCSS&&void 0!==window.ShadyCSS.cssBuild&&(Ba=window.ShadyCSS.cssBuild);const Ua=Boolean(window.ShadyCSS&&window.ShadyCSS.disableRuntime);window.ShadyCSS&&void 0!==window.ShadyCSS.nativeCss?Ha=window.ShadyCSS.nativeCss:window.ShadyCSS?(Va(window.ShadyCSS),window.ShadyCSS=void 0):Va(window.WebComponents&&window.WebComponents.flags);const $a=Ha,ja=new Oa;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/window.ShadyCSS||(window.ShadyCSS={prepareTemplate(t,e,n){},prepareTemplateDom(t,e){},prepareTemplateStyles(t,e,n){},styleSubtree(t,e){ja.processStyles(),Da(t,e)},styleElement(t){ja.processStyles()},styleDocument(t){ja.processStyles(),Da(document.body,t)},getComputedStyleValue:(t,e)=>La(t,e),flushCustomStyles(){},nativeCss:$a,nativeShadow:Fa,cssBuild:Ba,disableRuntime:Ua}),window.ShadyCSS.CustomStyleInterface=ja,
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
window.JSCompiler_renameProperty=function(t,e){return t};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let qa,Ga,Ya=/(url\()([^)]*)(\))/g,Wa=/(^\/[^\/])|(^#)|(^[\w-\d]*:)/;function Xa(t,e){if(t&&Wa.test(t))return t;if("//"===t)return t;if(void 0===qa){qa=!1;try{const t=new URL("b","http://a");t.pathname="c%20d",qa="http://a/c%20d"===t.href}catch(t){}}if(e||(e=document.baseURI||window.location.href),qa)try{return new URL(t,e).href}catch(e){return t}return Ga||((Ga=document.implementation.createHTMLDocument("temp")).base=Ga.createElement("base"),Ga.head.appendChild(Ga.base),Ga.anchor=Ga.createElement("a"),Ga.body.appendChild(Ga.anchor)),Ga.base.href=e,Ga.anchor.href=t,Ga.anchor.href||t}function Ja(t,e){return t.replace(Ya,function(t,n,r,i){return n+"'"+Xa(r.replace(/["']/g,""),e)+"'"+i})}function Ka(t){return t.substring(0,t.lastIndexOf("/")+1)}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const Za=!window.ShadyDOM;Boolean(!window.ShadyCSS||window.ShadyCSS.nativeCss),window.customElements.polyfillWrapFlushCallback;let Qa=Ka(document.baseURI||window.location.href);let tl=window.Polymer&&window.Polymer.sanitizeDOMValue||void 0;let el=!1;let nl=!1;let rl=!1;let il=!1;let sl=!1;let ol=!0;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let al={},ll={};function cl(t,e){al[t]=ll[t.toLowerCase()]=e}function hl(t){return al[t]||ll[t.toLowerCase()]}class dl extends HTMLElement{static get observedAttributes(){return["id"]}static import(t,e){if(t){let n=hl(t);return n&&e?n.querySelector(e):n}return null}attributeChangedCallback(t,e,n,r){e!==n&&this.register()}get assetpath(){if(!this.__assetpath){const t=window.HTMLImports&&HTMLImports.importForElement?HTMLImports.importForElement(this)||document:this.ownerDocument,e=Xa(this.getAttribute("assetpath")||"",t.baseURI);this.__assetpath=Ka(e)}return this.__assetpath}register(t){if(t=t||this.id){if(nl&&void 0!==hl(t))throw cl(t,null),new Error(`strictTemplatePolicy: dom-module ${t} re-registered`);this.id=t,cl(t,this),function(t){t.querySelector("style")&&console.warn("dom-module %s has style outside template",t.id)}(this)}}}dl.prototype.modules=al,customElements.define("dom-module",dl);
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
const ul="link[rel=import][type~=css]",pl="include",fl="shady-unscoped";function _l(t){return dl.import(t)}function ml(t){const e=Ja((t.body?t.body:t).textContent,t.baseURI),n=document.createElement("style");return n.textContent=e,n}function gl(t){const e=t.trim().split(/\s+/),n=[];for(let t=0;t<e.length;t++)n.push(...yl(e[t]));return n}function yl(t){const e=_l(t);if(!e)return console.warn("Could not find style data in module named",t),[];if(void 0===e._styles){const t=[];t.push(...bl(e));const n=e.querySelector("template");n&&t.push(...vl(n,e.assetpath)),e._styles=t}return e._styles}function vl(t,e){if(!t._styles){const n=[],r=t.content.querySelectorAll("style");for(let t=0;t<r.length;t++){let i=r[t],s=i.getAttribute(pl);s&&n.push(...gl(s).filter(function(t,e,n){return n.indexOf(t)===e})),e&&(i.textContent=Ja(i.textContent,e)),n.push(i)}t._styles=n}return t._styles}function bl(t){const e=[],n=t.querySelectorAll(ul);for(let t=0;t<n.length;t++){let r=n[t];if(r.import){const t=r.import,n=r.hasAttribute(fl);if(n&&!t._unscopedStyle){const e=ml(t);e.setAttribute(fl,""),t._unscopedStyle=e}else t._style||(t._style=ml(t));e.push(n?t._unscopedStyle:t._style)}}return e}function wl(t){let e=_l(t);if(e&&void 0===e._cssText){let t=xl(e),n=e.querySelector("template");n&&(t+=function(t,e){let n="";const r=vl(t,e);for(let t=0;t<r.length;t++){let e=r[t];e.parentNode&&e.parentNode.removeChild(e),n+=e.textContent}return n}(n,e.assetpath)),e._cssText=t||null}return e||console.warn("Could not find style data in module named",t),e&&e._cssText||""}function xl(t){let e="",n=bl(t);for(let t=0;t<n.length;t++)e+=n[t].textContent;return e}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const Cl="include",Sl=window.ShadyCSS.CustomStyleInterface;window.customElements.define("custom-style",class extends HTMLElement{constructor(){super(),this._style=null,Sl.addCustomStyle(this)}getStyle(){if(this._style)return this._style;const t=this.querySelector("style");if(!t)return null;this._style=t;const e=t.getAttribute(Cl);return e&&(t.removeAttribute(Cl),t.textContent=function(t){let e=t.trim().split(/\s+/),n="";for(let t=0;t<e.length;t++)n+=wl(e[t]);return n}(e)+t.textContent),this.ownerDocument!==window.document&&window.document.head.appendChild(this),this._style}});const Al=document.createElement("template");Al.innerHTML='<custom-style>\n  <style>\n    html {\n      /* Base (background) */\n      --lumo-base-color: #FFF;\n\n      /* Tint */\n      --lumo-tint-5pct: hsla(0, 0%, 100%, 0.3);\n      --lumo-tint-10pct: hsla(0, 0%, 100%, 0.37);\n      --lumo-tint-20pct: hsla(0, 0%, 100%, 0.44);\n      --lumo-tint-30pct: hsla(0, 0%, 100%, 0.5);\n      --lumo-tint-40pct: hsla(0, 0%, 100%, 0.57);\n      --lumo-tint-50pct: hsla(0, 0%, 100%, 0.64);\n      --lumo-tint-60pct: hsla(0, 0%, 100%, 0.7);\n      --lumo-tint-70pct: hsla(0, 0%, 100%, 0.77);\n      --lumo-tint-80pct: hsla(0, 0%, 100%, 0.84);\n      --lumo-tint-90pct: hsla(0, 0%, 100%, 0.9);\n      --lumo-tint: #FFF;\n\n      /* Shade */\n      --lumo-shade-5pct: hsla(214, 61%, 25%, 0.05);\n      --lumo-shade-10pct: hsla(214, 57%, 24%, 0.1);\n      --lumo-shade-20pct: hsla(214, 53%, 23%, 0.16);\n      --lumo-shade-30pct: hsla(214, 50%, 22%, 0.26);\n      --lumo-shade-40pct: hsla(214, 47%, 21%, 0.38);\n      --lumo-shade-50pct: hsla(214, 45%, 20%, 0.5);\n      --lumo-shade-60pct: hsla(214, 43%, 19%, 0.61);\n      --lumo-shade-70pct: hsla(214, 42%, 18%, 0.72);\n      --lumo-shade-80pct: hsla(214, 41%, 17%, 0.83);\n      --lumo-shade-90pct: hsla(214, 40%, 16%, 0.94);\n      --lumo-shade: hsl(214, 35%, 15%);\n\n      /* Contrast */\n      --lumo-contrast-5pct: var(--lumo-shade-5pct);\n      --lumo-contrast-10pct: var(--lumo-shade-10pct);\n      --lumo-contrast-20pct: var(--lumo-shade-20pct);\n      --lumo-contrast-30pct: var(--lumo-shade-30pct);\n      --lumo-contrast-40pct: var(--lumo-shade-40pct);\n      --lumo-contrast-50pct: var(--lumo-shade-50pct);\n      --lumo-contrast-60pct: var(--lumo-shade-60pct);\n      --lumo-contrast-70pct: var(--lumo-shade-70pct);\n      --lumo-contrast-80pct: var(--lumo-shade-80pct);\n      --lumo-contrast-90pct: var(--lumo-shade-90pct);\n      --lumo-contrast: var(--lumo-shade);\n\n      /* Text */\n      --lumo-header-text-color: var(--lumo-contrast);\n      --lumo-body-text-color: var(--lumo-contrast-90pct);\n      --lumo-secondary-text-color: var(--lumo-contrast-70pct);\n      --lumo-tertiary-text-color: var(--lumo-contrast-50pct);\n      --lumo-disabled-text-color: var(--lumo-contrast-30pct);\n\n      /* Primary */\n      --lumo-primary-color: hsl(214, 90%, 52%);\n      --lumo-primary-color-50pct: hsla(214, 90%, 52%, 0.5);\n      --lumo-primary-color-10pct: hsla(214, 90%, 52%, 0.1);\n      --lumo-primary-text-color: var(--lumo-primary-color);\n      --lumo-primary-contrast-color: #FFF;\n\n      /* Error */\n      --lumo-error-color: hsl(3, 100%, 61%);\n      --lumo-error-color-50pct: hsla(3, 100%, 60%, 0.5);\n      --lumo-error-color-10pct: hsla(3, 100%, 60%, 0.1);\n      --lumo-error-text-color: hsl(3, 92%, 53%);\n      --lumo-error-contrast-color: #FFF;\n\n      /* Success */\n      --lumo-success-color: hsl(145, 80%, 42%); /* hsl(144,82%,37%); */\n      --lumo-success-color-50pct: hsla(145, 76%, 44%, 0.55);\n      --lumo-success-color-10pct: hsla(145, 76%, 44%, 0.12);\n      --lumo-success-text-color: hsl(145, 100%, 32%);\n      --lumo-success-contrast-color: #FFF;\n    }\n  </style>\n</custom-style><dom-module id="lumo-color">\n  <template>\n    <style>\n      [theme~="dark"] {\n        /* Base (background) */\n        --lumo-base-color: hsl(214, 35%, 21%);\n\n        /* Tint */\n        --lumo-tint-5pct: hsla(214, 65%, 85%, 0.06);\n        --lumo-tint-10pct: hsla(214, 60%, 80%, 0.14);\n        --lumo-tint-20pct: hsla(214, 64%, 82%, 0.23);\n        --lumo-tint-30pct: hsla(214, 69%, 84%, 0.32);\n        --lumo-tint-40pct: hsla(214, 73%, 86%, 0.41);\n        --lumo-tint-50pct: hsla(214, 78%, 88%, 0.5);\n        --lumo-tint-60pct: hsla(214, 82%, 90%, 0.6);\n        --lumo-tint-70pct: hsla(214, 87%, 92%, 0.7);\n        --lumo-tint-80pct: hsla(214, 91%, 94%, 0.8);\n        --lumo-tint-90pct: hsla(214, 96%, 96%, 0.9);\n        --lumo-tint: hsl(214, 100%, 98%);\n\n        /* Shade */\n        --lumo-shade-5pct: hsla(214, 0%, 0%, 0.07);\n        --lumo-shade-10pct: hsla(214, 4%, 2%, 0.15);\n        --lumo-shade-20pct: hsla(214, 8%, 4%, 0.23);\n        --lumo-shade-30pct: hsla(214, 12%, 6%, 0.32);\n        --lumo-shade-40pct: hsla(214, 16%, 8%, 0.41);\n        --lumo-shade-50pct: hsla(214, 20%, 10%, 0.5);\n        --lumo-shade-60pct: hsla(214, 24%, 12%, 0.6);\n        --lumo-shade-70pct: hsla(214, 28%, 13%, 0.7);\n        --lumo-shade-80pct: hsla(214, 32%, 13%, 0.8);\n        --lumo-shade-90pct: hsla(214, 33%, 13%, 0.9);\n        --lumo-shade: hsl(214, 33%, 13%);\n\n        /* Contrast */\n        --lumo-contrast-5pct: var(--lumo-tint-5pct);\n        --lumo-contrast-10pct: var(--lumo-tint-10pct);\n        --lumo-contrast-20pct: var(--lumo-tint-20pct);\n        --lumo-contrast-30pct: var(--lumo-tint-30pct);\n        --lumo-contrast-40pct: var(--lumo-tint-40pct);\n        --lumo-contrast-50pct: var(--lumo-tint-50pct);\n        --lumo-contrast-60pct: var(--lumo-tint-60pct);\n        --lumo-contrast-70pct: var(--lumo-tint-70pct);\n        --lumo-contrast-80pct: var(--lumo-tint-80pct);\n        --lumo-contrast-90pct: var(--lumo-tint-90pct);\n        --lumo-contrast: var(--lumo-tint);\n\n        /* Text */\n        --lumo-header-text-color: var(--lumo-contrast);\n        --lumo-body-text-color: var(--lumo-contrast-90pct);\n        --lumo-secondary-text-color: var(--lumo-contrast-70pct);\n        --lumo-tertiary-text-color: var(--lumo-contrast-50pct);\n        --lumo-disabled-text-color: var(--lumo-contrast-30pct);\n\n        /* Primary */\n        --lumo-primary-color: hsl(214, 86%, 55%);\n        --lumo-primary-color-50pct: hsla(214, 86%, 55%, 0.5);\n        --lumo-primary-color-10pct: hsla(214, 90%, 63%, 0.1);\n        --lumo-primary-text-color: hsl(214, 100%, 70%);\n        --lumo-primary-contrast-color: #FFF;\n\n        /* Error */\n        --lumo-error-color: hsl(3, 90%, 63%);\n        --lumo-error-color-50pct: hsla(3, 90%, 63%, 0.5);\n        --lumo-error-color-10pct: hsla(3, 90%, 63%, 0.1);\n        --lumo-error-text-color: hsl(3, 100%, 67%);\n\n        /* Success */\n        --lumo-success-color: hsl(145, 65%, 42%);\n        --lumo-success-color-50pct: hsla(145, 65%, 42%, 0.5);\n        --lumo-success-color-10pct: hsla(145, 65%, 42%, 0.1);\n        --lumo-success-text-color: hsl(145, 85%, 47%);\n      }\n\n      html {\n        color: var(--lumo-body-text-color);\n        background-color: var(--lumo-base-color);\n      }\n\n      [theme~="dark"] {\n        color: var(--lumo-body-text-color);\n        background-color: var(--lumo-base-color);\n      }\n\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6 {\n        color: var(--lumo-header-text-color);\n      }\n\n      a {\n        color: var(--lumo-primary-text-color);\n      }\n\n      blockquote {\n        color: var(--lumo-secondary-text-color);\n      }\n\n      code,\n      pre {\n        background-color: var(--lumo-contrast-10pct);\n        border-radius: var(--lumo-border-radius-m);\n      }\n    </style>\n  </template>\n</dom-module><dom-module id="lumo-color-legacy">\n  <template>\n    <style include="lumo-color">\n      :host {\n        color: var(--lumo-body-text-color) !important;\n        background-color: var(--lumo-base-color) !important;\n      }\n    </style>\n  </template>\n</dom-module>',document.head.appendChild(Al.content);const Tl=document.createElement("template");Tl.innerHTML="<custom-style>\n  <style>\n    html {\n      --lumo-size-xs: 1.625rem;\n      --lumo-size-s: 1.875rem;\n      --lumo-size-m: 2.25rem;\n      --lumo-size-l: 2.75rem;\n      --lumo-size-xl: 3.5rem;\n\n      /* Icons */\n      --lumo-icon-size-s: 1.25em;\n      --lumo-icon-size-m: 1.5em;\n      --lumo-icon-size-l: 2.25em;\n      /* For backwards compatibility */\n      --lumo-icon-size: var(--lumo-icon-size-m);\n    }\n  </style>\n</custom-style>",document.head.appendChild(Tl.content);const Pl=document.createElement("template");Pl.innerHTML="<custom-style>\n  <style>\n    html {\n      /* Square */\n      --lumo-space-xs: 0.25rem;\n      --lumo-space-s: 0.5rem;\n      --lumo-space-m: 1rem;\n      --lumo-space-l: 1.5rem;\n      --lumo-space-xl: 2.5rem;\n\n      /* Wide */\n      --lumo-space-wide-xs: calc(var(--lumo-space-xs) / 2) var(--lumo-space-xs);\n      --lumo-space-wide-s: calc(var(--lumo-space-s) / 2) var(--lumo-space-s);\n      --lumo-space-wide-m: calc(var(--lumo-space-m) / 2) var(--lumo-space-m);\n      --lumo-space-wide-l: calc(var(--lumo-space-l) / 2) var(--lumo-space-l);\n      --lumo-space-wide-xl: calc(var(--lumo-space-xl) / 2) var(--lumo-space-xl);\n\n      /* Tall */\n      --lumo-space-tall-xs: var(--lumo-space-xs) calc(var(--lumo-space-xs) / 2);\n      --lumo-space-tall-s: var(--lumo-space-s) calc(var(--lumo-space-s) / 2);\n      --lumo-space-tall-m: var(--lumo-space-m) calc(var(--lumo-space-m) / 2);\n      --lumo-space-tall-l: var(--lumo-space-l) calc(var(--lumo-space-l) / 2);\n      --lumo-space-tall-xl: var(--lumo-space-xl) calc(var(--lumo-space-xl) / 2);\n    }\n  </style>\n</custom-style>",document.head.appendChild(Pl.content);const El=document.createElement("template");El.innerHTML="<custom-style>\n  <style>\n    html {\n      /* Border radius */\n      --lumo-border-radius-s: 0.25em; /* Checkbox, badge, date-picker year indicator, etc */\n      --lumo-border-radius-m: var(--lumo-border-radius, 0.25em); /* Button, text field, menu overlay, etc */\n      --lumo-border-radius-l: 0.5em; /* Dialog, notification, etc */\n      --lumo-border-radius: 0.25em; /* Deprecated */\n\n      /* Shadow */\n      --lumo-box-shadow-xs: 0 1px 4px -1px var(--lumo-shade-50pct);\n      --lumo-box-shadow-s: 0 2px 4px -1px var(--lumo-shade-20pct), 0 3px 12px -1px var(--lumo-shade-30pct);\n      --lumo-box-shadow-m: 0 2px 6px -1px var(--lumo-shade-20pct), 0 8px 24px -4px var(--lumo-shade-40pct);\n      --lumo-box-shadow-l: 0 3px 18px -2px var(--lumo-shade-20pct), 0 12px 48px -6px var(--lumo-shade-40pct);\n      --lumo-box-shadow-xl: 0 4px 24px -3px var(--lumo-shade-20pct), 0 18px 64px -8px var(--lumo-shade-40pct);\n\n      /* Clickable element cursor */\n      --lumo-clickable-cursor: default;\n    }\n  </style>\n</custom-style>",document.head.appendChild(El.content);
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
class Il{constructor(t){this.value=t.toString()}toString(){return this.value}}function Nl(t){if(t instanceof Il)return t.value;throw new Error(`non-literal value passed to Polymer's htmlLiteral function: ${t}`)}const Ml=function(t,...e){const n=document.createElement("template");return n.innerHTML=e.reduce((e,n,r)=>e+function(t){if(t instanceof HTMLTemplateElement)return t.innerHTML;if(t instanceof Il)return Nl(t);throw new Error(`non-template value passed to Polymer's html function: ${t}`)}(n)+t[r+1],t[0]),n},Ol=Ml`<dom-module id="lumo-split-layout" theme-for="vaadin-split-layout">
  <template>
    <style>
      [part="splitter"] {
        min-width: var(--lumo-space-s);
        min-height: var(--lumo-space-s);
        background-color: var(--lumo-contrast-5pct);
        transition: 0.1s background-color;
      }

      [part="handle"] {
        display: flex;
        align-items: center;
        justify-content: center;
        width: var(--lumo-size-m);
        height: var(--lumo-size-m);
      }

      [part="handle"]::after {
        content: "";
        display: block;
        width: 4px;
        height: 100%;
        max-width: 100%;
        max-height: 100%;
        border-radius: var(--lumo-border-radius);
        background-color: var(--lumo-contrast-30pct);
        transition: 0.1s opacity, 0.1s background-color;
      }

      :host([orientation="vertical"]) [part="handle"]::after {
        width: 100%;
        height: 4px;
      }

      /* Hover style */

      [part="splitter"]:hover [part="handle"]::after {
        background-color: var(--lumo-contrast-40pct);
      }

      /* Disable hover for touch devices */
      @media (pointer: coarse) {
        [part="splitter"]:hover [part="handle"]::after {
          background-color: var(--lumo-contrast-30pct);
        }
      }

      /* Active style */

      [part="splitter"]:active [part="handle"]::after {
        background-color: var(--lumo-contrast-50pct);
      }

      /* Small/minimal */

      :host([theme~="small"]) > [part="splitter"] {
        border-left: 1px solid var(--lumo-contrast-10pct);
        border-top: 1px solid var(--lumo-contrast-10pct);
      }

      :host([theme~="small"]) > [part="splitter"],
      :host([theme~="minimal"]) > [part="splitter"] {
        min-width: 0;
        min-height: 0;
        background-color: transparent;
      }

      :host([theme~="small"]) > [part="splitter"]::after,
      :host([theme~="minimal"]) > [part="splitter"]::after {
        content: "";
        position: absolute;
        top: -4px;
        right: -4px;
        bottom: -4px;
        left: -4px;
      }

      :host([theme~="small"]) > [part="splitter"] > [part="handle"]::after,
      :host([theme~="minimal"]) > [part="splitter"] > [part="handle"]::after {
        opacity: 0;
      }

      :host([theme~="small"]) > [part="splitter"]:hover > [part="handle"]::after,
      :host([theme~="small"]) > [part="splitter"]:active > [part="handle"]::after,
      :host([theme~="minimal"]) > [part="splitter"]:hover > [part="handle"]::after,
      :host([theme~="minimal"]) > [part="splitter"]:active > [part="handle"]::after {
        opacity: 1;
      }
    </style>
  </template>
</dom-module>`;document.head.appendChild(Ol.content);
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let Rl=0;function kl(){}kl.prototype.__mixinApplications,kl.prototype.__mixinSet;const zl=function(t){let e=t.__mixinApplications;e||(e=new WeakMap,t.__mixinApplications=e);let n=Rl++;return function(r){let i=r.__mixinSet;if(i&&i[n])return r;let s=e,o=s.get(r);o||(o=t(r),s.set(r,o));let a=Object.create(o.__mixinSet||i||null);return a[n]=!0,o.__mixinSet=a,o}},Dl=window.ShadyDOM&&window.ShadyDOM.noPatch&&window.ShadyDOM.wrap?window.ShadyDOM.wrap:window.ShadyDOM?t=>ShadyDOM.patch(t):t=>t;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
function Ll(t){return t.indexOf(".")>=0}function Fl(t){let e=t.indexOf(".");return-1===e?t:t.slice(0,e)}function Hl(t,e){return 0===t.indexOf(e+".")}function Bl(t,e){return 0===e.indexOf(t+".")}function Vl(t,e,n){return e+n.slice(t.length)}function Ul(t){if(Array.isArray(t)){let e=[];for(let n=0;n<t.length;n++){let r=t[n].toString().split(".");for(let t=0;t<r.length;t++)e.push(r[t])}return e.join(".")}return t}function $l(t){return Array.isArray(t)?Ul(t).split("."):t.toString().split(".")}function jl(t,e,n){let r=t,i=$l(e);for(let t=0;t<i.length;t++){if(!r)return;r=r[i[t]]}return n&&(n.path=i.join(".")),r}function ql(t,e,n){let r=t,i=$l(e),s=i[i.length-1];if(i.length>1){for(let t=0;t<i.length-1;t++){if(!(r=r[i[t]]))return}r[s]=n}else r[e]=n;return i.join(".")}const Gl={},Yl=/-[a-z]/g,Wl=/([A-Z])/g;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/function Xl(t){return Gl[t]||(Gl[t]=t.indexOf("-")<0?t:t.replace(Yl,t=>t[1].toUpperCase()))}function Jl(t){return Gl[t]||(Gl[t]=t.replace(Wl,"-$1").toLowerCase())}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/let Kl=0,Zl=0,Ql=[],tc=0,ec=document.createTextNode("");new window.MutationObserver(function(){const t=Ql.length;for(let e=0;e<t;e++){let t=Ql[e];if(t)try{t()}catch(t){setTimeout(()=>{throw t})}}Ql.splice(0,t),Zl+=t}).observe(ec,{characterData:!0});const nc={after:t=>({run:e=>window.setTimeout(e,t),cancel(t){window.clearTimeout(t)}}),run:(t,e)=>window.setTimeout(t,e),cancel(t){window.clearTimeout(t)}},rc={run:t=>window.requestAnimationFrame(t),cancel(t){window.cancelAnimationFrame(t)}},ic={run:t=>window.requestIdleCallback?window.requestIdleCallback(t):window.setTimeout(t,16),cancel(t){window.cancelIdleCallback?window.cancelIdleCallback(t):window.clearTimeout(t)}},sc={run:t=>(ec.textContent=tc++,Ql.push(t),Kl++),cancel(t){const e=t-Zl;if(e>=0){if(!Ql[e])throw new Error("invalid async handle: "+t);Ql[e]=null}}},oc=sc,ac=zl(t=>{return class extends t{static createProperties(t){const e=this.prototype;for(let n in t)n in e||e._createPropertyAccessor(n)}static attributeNameForProperty(t){return t.toLowerCase()}static typeForProperty(t){}_createPropertyAccessor(t,e){this._addPropertyToAttributeMap(t),this.hasOwnProperty(JSCompiler_renameProperty("__dataHasAccessor",this))||(this.__dataHasAccessor=Object.assign({},this.__dataHasAccessor)),this.__dataHasAccessor[t]||(this.__dataHasAccessor[t]=!0,this._definePropertyAccessor(t,e))}_addPropertyToAttributeMap(t){if(this.hasOwnProperty(JSCompiler_renameProperty("__dataAttributes",this))||(this.__dataAttributes=Object.assign({},this.__dataAttributes)),!this.__dataAttributes[t]){const e=this.constructor.attributeNameForProperty(t);this.__dataAttributes[e]=t}}_definePropertyAccessor(t,e){Object.defineProperty(this,t,{get(){return this._getProperty(t)},set:e?function(){}:function(e){this._setProperty(t,e)}})}constructor(){super(),this.__dataEnabled=!1,this.__dataReady=!1,this.__dataInvalid=!1,this.__data={},this.__dataPending=null,this.__dataOld=null,this.__dataInstanceProps=null,this.__serializing=!1,this._initializeProperties()}ready(){this.__dataReady=!0,this._flushProperties()}_initializeProperties(){for(let t in this.__dataHasAccessor)this.hasOwnProperty(t)&&(this.__dataInstanceProps=this.__dataInstanceProps||{},this.__dataInstanceProps[t]=this[t],delete this[t])}_initializeInstanceProperties(t){Object.assign(this,t)}_setProperty(t,e){this._setPendingProperty(t,e)&&this._invalidateProperties()}_getProperty(t){return this.__data[t]}_setPendingProperty(t,e,n){let r=this.__data[t],i=this._shouldPropertyChange(t,e,r);return i&&(this.__dataPending||(this.__dataPending={},this.__dataOld={}),!this.__dataOld||t in this.__dataOld||(this.__dataOld[t]=r),this.__data[t]=e,this.__dataPending[t]=e),i}_invalidateProperties(){!this.__dataInvalid&&this.__dataReady&&(this.__dataInvalid=!0,oc.run(()=>{this.__dataInvalid&&(this.__dataInvalid=!1,this._flushProperties())}))}_enableProperties(){this.__dataEnabled||(this.__dataEnabled=!0,this.__dataInstanceProps&&(this._initializeInstanceProperties(this.__dataInstanceProps),this.__dataInstanceProps=null),this.ready())}_flushProperties(){const t=this.__data,e=this.__dataPending,n=this.__dataOld;this._shouldPropertiesChange(t,e,n)&&(this.__dataPending=null,this.__dataOld=null,this._propertiesChanged(t,e,n))}_shouldPropertiesChange(t,e,n){return Boolean(e)}_propertiesChanged(t,e,n){}_shouldPropertyChange(t,e,n){return n!==e&&(n==n||e==e)}attributeChangedCallback(t,e,n,r){e!==n&&this._attributeToProperty(t,n),super.attributeChangedCallback&&super.attributeChangedCallback(t,e,n,r)}_attributeToProperty(t,e,n){if(!this.__serializing){const r=this.__dataAttributes,i=r&&r[t]||t;this[i]=this._deserializeValue(e,n||this.constructor.typeForProperty(i))}}_propertyToAttribute(t,e,n){this.__serializing=!0,n=arguments.length<3?this[t]:n,this._valueToNodeAttribute(this,n,e||this.constructor.attributeNameForProperty(t)),this.__serializing=!1}_valueToNodeAttribute(t,e,n){const r=this._serializeValue(e);"class"!==n&&"name"!==n&&"slot"!==n||(t=Dl(t)),void 0===r?t.removeAttribute(n):t.setAttribute(n,r)}_serializeValue(t){switch(typeof t){case"boolean":return t?"":void 0;default:return null!=t?t.toString():void 0}}_deserializeValue(t,e){switch(e){case Boolean:return null!==t;case Number:return Number(t);default:return t}}}}),lc={};let cc=HTMLElement.prototype;for(;cc;){let t=Object.getOwnPropertyNames(cc);for(let e=0;e<t.length;e++)lc[t[e]]=!0;cc=Object.getPrototypeOf(cc)}const hc=zl(t=>{const e=ac(t);return class extends e{static createPropertiesForAttributes(){let t=this.observedAttributes;for(let e=0;e<t.length;e++)this.prototype._createPropertyAccessor(Xl(t[e]))}static attributeNameForProperty(t){return Jl(t)}_initializeProperties(){this.__dataProto&&(this._initializeProtoProperties(this.__dataProto),this.__dataProto=null),super._initializeProperties()}_initializeProtoProperties(t){for(let e in t)this._setProperty(e,t[e])}_ensureAttribute(t,e){const n=this;n.hasAttribute(t)||this._valueToNodeAttribute(n,e,t)}_serializeValue(t){switch(typeof t){case"object":if(t instanceof Date)return t.toString();if(t)try{return JSON.stringify(t)}catch(t){return""}default:return super._serializeValue(t)}}_deserializeValue(t,e){let n;switch(e){case Object:try{n=JSON.parse(t)}catch(e){n=t}break;case Array:try{n=JSON.parse(t)}catch(e){n=null,console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${t}`)}break;case Date:n=isNaN(t)?String(t):Number(t),n=new Date(n);break;default:n=super._deserializeValue(t,e)}return n}_definePropertyAccessor(t,e){!function(t,e){if(!lc[e]){let n=t[e];void 0!==n&&(t.__data?t._setPendingProperty(e,n):(t.__dataProto?t.hasOwnProperty(JSCompiler_renameProperty("__dataProto",t))||(t.__dataProto=Object.create(t.__dataProto)):t.__dataProto={},t.__dataProto[e]=n))}}(this,t),super._definePropertyAccessor(t,e)}_hasAccessor(t){return this.__dataHasAccessor&&this.__dataHasAccessor[t]}_isPropertyPending(t){return Boolean(this.__dataPending&&t in this.__dataPending)}}}),dc={"dom-if":!0,"dom-repeat":!0};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/let uc=!1,pc=!1;function fc(t){(function(){if(!uc){uc=!0;const t=document.createElement("textarea");t.placeholder="a",pc=t.placeholder===t.textContent}return pc})()&&"textarea"===t.localName&&t.placeholder&&t.placeholder===t.textContent&&(t.textContent=null)}function _c(t){let e=t.getAttribute("is");if(e&&dc[e]){let n=t;for(n.removeAttribute("is"),t=n.ownerDocument.createElement(e),n.parentNode.replaceChild(t,n),t.appendChild(n);n.attributes.length;)t.setAttribute(n.attributes[0].name,n.attributes[0].value),n.removeAttribute(n.attributes[0].name)}return t}function mc(t,e){let n=e.parentInfo&&mc(t,e.parentInfo);if(!n)return t;for(let t=n.firstChild,r=0;t;t=t.nextSibling)if(e.parentIndex===r++)return t}function gc(t,e,n,r){r.id&&(e[r.id]=n)}function yc(t,e,n){if(n.events&&n.events.length)for(let r,i=0,s=n.events;i<s.length&&(r=s[i]);i++)t._addMethodEventListenerToNode(e,r.name,r.value,t)}function vc(t,e,n){n.templateInfo&&(e._templateInfo=n.templateInfo)}const bc=zl(t=>{return class extends t{static _parseTemplate(t,e){if(!t._templateInfo){let n=t._templateInfo={};n.nodeInfoList=[],n.stripWhiteSpace=e&&e.stripWhiteSpace||t.hasAttribute("strip-whitespace"),this._parseTemplateContent(t,n,{parent:null})}return t._templateInfo}static _parseTemplateContent(t,e,n){return this._parseTemplateNode(t.content,e,n)}static _parseTemplateNode(t,e,n){let r=!1,i=t;return"template"!=i.localName||i.hasAttribute("preserve-content")?"slot"===i.localName&&(e.hasInsertionPoint=!0):r=this._parseTemplateNestedTemplate(i,e,n)||r,fc(i),i.firstChild&&this._parseTemplateChildNodes(i,e,n),i.hasAttributes&&i.hasAttributes()&&(r=this._parseTemplateNodeAttributes(i,e,n)||r),r}static _parseTemplateChildNodes(t,e,n){if("script"!==t.localName&&"style"!==t.localName)for(let r,i=t.firstChild,s=0;i;i=r){if("template"==i.localName&&(i=_c(i)),r=i.nextSibling,i.nodeType===Node.TEXT_NODE){let n=r;for(;n&&n.nodeType===Node.TEXT_NODE;)i.textContent+=n.textContent,r=n.nextSibling,t.removeChild(n),n=r;if(e.stripWhiteSpace&&!i.textContent.trim()){t.removeChild(i);continue}}let o={parentIndex:s,parentInfo:n};this._parseTemplateNode(i,e,o)&&(o.infoIndex=e.nodeInfoList.push(o)-1),i.parentNode&&s++}}static _parseTemplateNestedTemplate(t,e,n){let r=t,i=this._parseTemplate(r,e);return(i.content=r.content.ownerDocument.createDocumentFragment()).appendChild(r.content),n.templateInfo=i,!0}static _parseTemplateNodeAttributes(t,e,n){let r=!1,i=Array.from(t.attributes);for(let s,o=i.length-1;s=i[o];o--)r=this._parseTemplateNodeAttribute(t,e,n,s.name,s.value)||r;return r}static _parseTemplateNodeAttribute(t,e,n,r,i){return"on-"===r.slice(0,3)?(t.removeAttribute(r),n.events=n.events||[],n.events.push({name:r.slice(3),value:i}),!0):"id"===r&&(n.id=i,!0)}static _contentForTemplate(t){let e=t._templateInfo;return e&&e.content||t.content}_stampTemplate(t){t&&!t.content&&window.HTMLTemplateElement&&HTMLTemplateElement.decorate&&HTMLTemplateElement.decorate(t);let e=this.constructor._parseTemplate(t),n=e.nodeInfoList,r=e.content||t.content,i=document.importNode(r,!0);i.__noInsertionPoint=!e.hasInsertionPoint;let s=i.nodeList=new Array(n.length);i.$={};for(let t,e=0,r=n.length;e<r&&(t=n[e]);e++){let n=s[e]=mc(i,t);gc(0,i.$,n,t),vc(0,n,t),yc(this,n,t)}return i=i}_addMethodEventListenerToNode(t,e,n,r){let i=function(t,e,n){return t=t._methodHost||t,function(e){t[n]?t[n](e,e.detail):console.warn("listener method `"+n+"` not defined")}}(r=r||t,0,n);return this._addEventListenerToNode(t,e,i),i}_addEventListenerToNode(t,e,n){t.addEventListener(e,n)}_removeEventListenerFromNode(t,e,n){t.removeEventListener(e,n)}}});
/**
 * @fileoverview
 * @suppress {checkPrototypalTypes}
 * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt The complete set of authors may be found
 * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may
 * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by
 * Google as part of the polymer project is also subject to an additional IP
 * rights grant found at http://polymer.github.io/PATENTS.txt
 */let wc=0;const xc={COMPUTE:"__computeEffects",REFLECT:"__reflectEffects",NOTIFY:"__notifyEffects",PROPAGATE:"__propagateEffects",OBSERVE:"__observeEffects",READ_ONLY:"__readOnly"},Cc=/[A-Z]/;function Sc(t,e){let n=t[e];if(n){if(!t.hasOwnProperty(e)){n=t[e]=Object.create(t[e]);for(let t in n){let e=n[t],r=n[t]=Array(e.length);for(let t=0;t<e.length;t++)r[t]=e[t]}}}else n=t[e]={};return n}function Ac(t,e,n,r,i,s){if(e){let o=!1,a=wc++;for(let l in n)Tc(t,e,a,l,n,r,i,s)&&(o=!0);return o}return!1}function Tc(t,e,n,r,i,s,o,a){let l=!1,c=e[o?Fl(r):r];if(c)for(let e,h=0,d=c.length;h<d&&(e=c[h]);h++)e.info&&e.info.lastRun===n||o&&!Pc(r,e.trigger)||(e.info&&(e.info.lastRun=n),e.fn(t,r,i,s,e.info,o,a),l=!0);return l}function Pc(t,e){if(e){let n=e.name;return n==t||!(!e.structured||!Hl(n,t))||!(!e.wildcard||!Bl(n,t))}return!0}function Ec(t,e,n,r,i){let s="string"==typeof i.method?t[i.method]:i.method,o=i.property;s?s.call(t,t.__data[o],r[o]):i.dynamicFn||console.warn("observer method `"+i.method+"` not defined")}function Ic(t,e,n){let r=Fl(e);if(r!==e){return Nc(t,Jl(r)+"-changed",n[e],e),!0}return!1}function Nc(t,e,n,r){let i={value:n,queueProperty:!0};r&&(i.path=r),Dl(t).dispatchEvent(new CustomEvent(e,{detail:i}))}function Mc(t,e,n,r,i,s){let o=(s?Fl(e):e)!=e?e:null,a=o?jl(t,o):t.__data[e];o&&void 0===a&&(a=n[e]),Nc(t,i.eventName,a,o)}function Oc(t,e,n,r,i){let s=t.__data[e];tl&&(s=tl(s,i.attrName,"attribute",t)),t._propertyToAttribute(e,i.attrName,s)}function Rc(t,e,n,r,i){let s=Bc(t,e,n,r,i),o=i.methodInfo;t.__dataHasAccessor&&t.__dataHasAccessor[o]?t._setPendingProperty(o,s,!0):t[o]=s}function kc(t,e,n,r,i,s,o){n.bindings=n.bindings||[];let a={kind:r,target:i,parts:s,literal:o,isCompound:1!==s.length};if(n.bindings.push(a),function(t){return Boolean(t.target)&&"attribute"!=t.kind&&"text"!=t.kind&&!t.isCompound&&"{"===t.parts[0].mode}(a)){let{event:t,negate:e}=a.parts[0];a.listenerEvent=t||Jl(i)+"-changed",a.listenerNegate=e}let l=e.nodeInfoList.length;for(let n=0;n<a.parts.length;n++){let r=a.parts[n];r.compoundIndex=n,zc(t,e,a,r,l)}}function zc(t,e,n,r,i){if(!r.literal)if("attribute"===n.kind&&"-"===n.target[0])console.warn("Cannot set attribute "+n.target+' because "-" is not a valid attribute starting character');else{let s=r.dependencies,o={index:i,binding:n,part:r,evaluator:t};for(let n=0;n<s.length;n++){let r=s[n];"string"==typeof r&&((r=qc(r)).wildcard=!0),t._addTemplatePropertyEffect(e,r.rootProperty,{fn:Dc,info:o,trigger:r})}}}function Dc(t,e,n,r,i,s,o){let a=o[i.index],l=i.binding,c=i.part;if(s&&c.source&&e.length>c.source.length&&"property"==l.kind&&!l.isCompound&&a.__isPropertyEffectsClient&&a.__dataHasAccessor&&a.__dataHasAccessor[l.target]){let r=n[e];e=Vl(c.source,l.target,e),a._setPendingPropertyOrPath(e,r,!1,!0)&&t._enqueueClient(a)}else{!function(t,e,n,r,i){i=function(t,e,n,r){if(n.isCompound){let i=t.__dataCompoundStorage[n.target];i[r.compoundIndex]=e,e=i.join("")}return"attribute"!==n.kind&&("textContent"!==n.target&&("value"!==n.target||"input"!==t.localName&&"textarea"!==t.localName)||(e=void 0==e?"":e)),e}(e,i,n,r),tl&&(i=tl(i,n.target,n.kind,e));if("attribute"==n.kind)t._valueToNodeAttribute(e,i,n.target);else{let r=n.target;e.__isPropertyEffectsClient&&e.__dataHasAccessor&&e.__dataHasAccessor[r]?e[xc.READ_ONLY]&&e[xc.READ_ONLY][r]||e._setPendingProperty(r,i)&&t._enqueueClient(e):t._setUnmanagedPropertyToNode(e,r,i)}}(t,a,l,c,i.evaluator._evaluateBinding(t,c,e,n,r,s))}}function Lc(t,e){if(e.isCompound){let n=t.__dataCompoundStorage||(t.__dataCompoundStorage={}),r=e.parts,i=new Array(r.length);for(let t=0;t<r.length;t++)i[t]=r[t].literal;let s=e.target;n[s]=i,e.literal&&"property"==e.kind&&("className"===s&&(t=Dl(t)),t[s]=e.literal)}}function Fc(t,e,n){if(n.listenerEvent){let r=n.parts[0];t.addEventListener(n.listenerEvent,function(t){!function(t,e,n,r,i){let s,o=t.detail,a=o&&o.path;a?(r=Vl(n,r,a),s=o&&o.value):s=t.currentTarget[n],s=i?!s:s,e[xc.READ_ONLY]&&e[xc.READ_ONLY][r]||!e._setPendingPropertyOrPath(r,s,!0,Boolean(a))||o&&o.queueProperty||e._invalidateProperties()}(t,e,n.target,r.source,r.negate)})}}function Hc(t,e,n,r,i,s){s=e.static||s&&("object"!=typeof s||s[e.methodName]);let o={methodName:e.methodName,args:e.args,methodInfo:i,dynamicFn:s};for(let i,s=0;s<e.args.length&&(i=e.args[s]);s++)i.literal||t._addPropertyEffect(i.rootProperty,n,{fn:r,info:o,trigger:i});s&&t._addPropertyEffect(e.methodName,n,{fn:r,info:o})}function Bc(t,e,n,r,i){let s=t._methodHost||t,o=s[i.methodName];if(o){let r=t._marshalArgs(i.args,e,n);return o.apply(s,r)}i.dynamicFn||console.warn("method `"+i.methodName+"` not defined")}const Vc=[],Uc=new RegExp("(\\[\\[|{{)\\s*(?:(!)\\s*)?((?:[a-zA-Z_$][\\w.:$\\-*]*)\\s*(?:\\(\\s*(?:(?:(?:((?:[a-zA-Z_$][\\w.:$\\-*]*)|(?:[-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)|(?:(?:'(?:[^'\\\\]|\\\\.)*')|(?:\"(?:[^\"\\\\]|\\\\.)*\")))\\s*)(?:,\\s*(?:((?:[a-zA-Z_$][\\w.:$\\-*]*)|(?:[-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)|(?:(?:'(?:[^'\\\\]|\\\\.)*')|(?:\"(?:[^\"\\\\]|\\\\.)*\")))\\s*))*)?)\\)\\s*)?)(?:]]|}})","g");function $c(t){let e="";for(let n=0;n<t.length;n++){e+=t[n].literal||""}return e}function jc(t){let e=t.match(/([^\s]+?)\(([\s\S]*)\)/);if(e){let t={methodName:e[1],static:!0,args:Vc};if(e[2].trim()){return function(t,e){return e.args=t.map(function(t){let n=qc(t);return n.literal||(e.static=!1),n},this),e}(e[2].replace(/\\,/g,"&comma;").split(","),t)}return t}return null}function qc(t){let e=t.trim().replace(/&comma;/g,",").replace(/\\(.)/g,"$1"),n={name:e,value:"",literal:!1},r=e[0];switch("-"===r&&(r=e[1]),r>="0"&&r<="9"&&(r="#"),r){case"'":case'"':n.value=e.slice(1,-1),n.literal=!0;break;case"#":n.value=Number(e),n.literal=!0}return n.literal||(n.rootProperty=Fl(e),n.structured=Ll(e),n.structured&&(n.wildcard=".*"==e.slice(-2),n.wildcard&&(n.name=e.slice(0,-2)))),n}function Gc(t,e,n){let r=jl(t,n);return void 0===r&&(r=e[n]),r}function Yc(t,e,n,r){t.notifyPath(n+".splices",{indexSplices:r}),t.notifyPath(n+".length",e.length)}function Wc(t,e,n,r,i,s){Yc(t,e,n,[{index:r,addedCount:i,removed:s,object:e,type:"splice"}])}const Xc=zl(t=>{const e=bc(hc(t));return class extends e{constructor(){super(),this.__isPropertyEffectsClient=!0,this.__dataCounter=0,this.__dataClientsReady,this.__dataPendingClients,this.__dataToNotify,this.__dataLinkedPaths,this.__dataHasPaths,this.__dataCompoundStorage,this.__dataHost,this.__dataTemp,this.__dataClientsInitialized,this.__data,this.__dataPending,this.__dataOld,this.__computeEffects,this.__reflectEffects,this.__notifyEffects,this.__propagateEffects,this.__observeEffects,this.__readOnly,this.__templateInfo}get PROPERTY_EFFECT_TYPES(){return xc}_initializeProperties(){super._initializeProperties(),Jc.registerHost(this),this.__dataClientsReady=!1,this.__dataPendingClients=null,this.__dataToNotify=null,this.__dataLinkedPaths=null,this.__dataHasPaths=!1,this.__dataCompoundStorage=this.__dataCompoundStorage||null,this.__dataHost=this.__dataHost||null,this.__dataTemp={},this.__dataClientsInitialized=!1}_initializeProtoProperties(t){this.__data=Object.create(t),this.__dataPending=Object.create(t),this.__dataOld={}}_initializeInstanceProperties(t){let e=this[xc.READ_ONLY];for(let n in t)e&&e[n]||(this.__dataPending=this.__dataPending||{},this.__dataOld=this.__dataOld||{},this.__data[n]=this.__dataPending[n]=t[n])}_addPropertyEffect(t,e,n){this._createPropertyAccessor(t,e==xc.READ_ONLY);let r=Sc(this,e)[t];r||(r=this[e][t]=[]),r.push(n)}_removePropertyEffect(t,e,n){let r=Sc(this,e)[t],i=r.indexOf(n);i>=0&&r.splice(i,1)}_hasPropertyEffect(t,e){let n=this[e];return Boolean(n&&n[t])}_hasReadOnlyEffect(t){return this._hasPropertyEffect(t,xc.READ_ONLY)}_hasNotifyEffect(t){return this._hasPropertyEffect(t,xc.NOTIFY)}_hasReflectEffect(t){return this._hasPropertyEffect(t,xc.REFLECT)}_hasComputedEffect(t){return this._hasPropertyEffect(t,xc.COMPUTE)}_setPendingPropertyOrPath(t,e,n,r){if(r||Fl(Array.isArray(t)?t[0]:t)!==t){if(!r){let n=jl(this,t);if(!(t=ql(this,t,e))||!super._shouldPropertyChange(t,e,n))return!1}if(this.__dataHasPaths=!0,this._setPendingProperty(t,e,n))return function(t,e,n){let r=t.__dataLinkedPaths;if(r){let i;for(let s in r){let o=r[s];Bl(s,e)?(i=Vl(s,o,e),t._setPendingPropertyOrPath(i,n,!0,!0)):Bl(o,e)&&(i=Vl(o,s,e),t._setPendingPropertyOrPath(i,n,!0,!0))}}}(this,t,e),!0}else{if(this.__dataHasAccessor&&this.__dataHasAccessor[t])return this._setPendingProperty(t,e,n);this[t]=e}return!1}_setUnmanagedPropertyToNode(t,e,n){n===t[e]&&"object"!=typeof n||("className"===e&&(t=Dl(t)),t[e]=n)}_setPendingProperty(t,e,n){let r=this.__dataHasPaths&&Ll(t),i=r?this.__dataTemp:this.__data;return!!this._shouldPropertyChange(t,e,i[t])&&(this.__dataPending||(this.__dataPending={},this.__dataOld={}),t in this.__dataOld||(this.__dataOld[t]=this.__data[t]),r?this.__dataTemp[t]=e:this.__data[t]=e,this.__dataPending[t]=e,(r||this[xc.NOTIFY]&&this[xc.NOTIFY][t])&&(this.__dataToNotify=this.__dataToNotify||{},this.__dataToNotify[t]=n),!0)}_setProperty(t,e){this._setPendingProperty(t,e,!0)&&this._invalidateProperties()}_invalidateProperties(){this.__dataReady&&this._flushProperties()}_enqueueClient(t){this.__dataPendingClients=this.__dataPendingClients||[],t!==this&&this.__dataPendingClients.push(t)}_flushProperties(){this.__dataCounter++,super._flushProperties(),this.__dataCounter--}_flushClients(){this.__dataClientsReady?this.__enableOrFlushClients():(this.__dataClientsReady=!0,this._readyClients(),this.__dataReady=!0)}__enableOrFlushClients(){let t=this.__dataPendingClients;if(t){this.__dataPendingClients=null;for(let e=0;e<t.length;e++){let n=t[e];n.__dataEnabled?n.__dataPending&&n._flushProperties():n._enableProperties()}}}_readyClients(){this.__enableOrFlushClients()}setProperties(t,e){for(let n in t)!e&&this[xc.READ_ONLY]&&this[xc.READ_ONLY][n]||this._setPendingPropertyOrPath(n,t[n],!0);this._invalidateProperties()}ready(){this._flushProperties(),this.__dataClientsReady||this._flushClients(),this.__dataPending&&this._flushProperties()}_propertiesChanged(t,e,n){let r=this.__dataHasPaths;this.__dataHasPaths=!1,function(t,e,n,r){let i=t[xc.COMPUTE];if(i){let s=e;for(;Ac(t,i,s,n,r);)Object.assign(n,t.__dataOld),Object.assign(e,t.__dataPending),s=t.__dataPending,t.__dataPending=null}}(this,e,n,r);let i=this.__dataToNotify;this.__dataToNotify=null,this._propagatePropertyChanges(e,n,r),this._flushClients(),Ac(this,this[xc.REFLECT],e,n,r),Ac(this,this[xc.OBSERVE],e,n,r),i&&function(t,e,n,r,i){let s,o,a=t[xc.NOTIFY],l=wc++;for(let o in e)e[o]&&(a&&Tc(t,a,l,o,n,r,i)?s=!0:i&&Ic(t,o,n)&&(s=!0));s&&(o=t.__dataHost)&&o._invalidateProperties&&o._invalidateProperties()}(this,i,e,n,r),1==this.__dataCounter&&(this.__dataTemp={})}_propagatePropertyChanges(t,e,n){this[xc.PROPAGATE]&&Ac(this,this[xc.PROPAGATE],t,e,n);let r=this.__templateInfo;for(;r;)Ac(this,r.propertyEffects,t,e,n,r.nodeList),r=r.nextTemplateInfo}linkPaths(t,e){t=Ul(t),e=Ul(e),this.__dataLinkedPaths=this.__dataLinkedPaths||{},this.__dataLinkedPaths[t]=e}unlinkPaths(t){t=Ul(t),this.__dataLinkedPaths&&delete this.__dataLinkedPaths[t]}notifySplices(t,e){let n={path:""};Yc(this,jl(this,t,n),n.path,e)}get(t,e){return jl(e||this,t)}set(t,e,n){n?ql(n,t,e):this[xc.READ_ONLY]&&this[xc.READ_ONLY][t]||this._setPendingPropertyOrPath(t,e,!0)&&this._invalidateProperties()}push(t,...e){let n={path:""},r=jl(this,t,n),i=r.length,s=r.push(...e);return e.length&&Wc(this,r,n.path,i,e.length,[]),s}pop(t){let e={path:""},n=jl(this,t,e),r=Boolean(n.length),i=n.pop();return r&&Wc(this,n,e.path,n.length,0,[i]),i}splice(t,e,n,...r){let i,s={path:""},o=jl(this,t,s);return e<0?e=o.length-Math.floor(-e):e&&(e=Math.floor(e)),i=2===arguments.length?o.splice(e):o.splice(e,n,...r),(r.length||i.length)&&Wc(this,o,s.path,e,r.length,i),i}shift(t){let e={path:""},n=jl(this,t,e),r=Boolean(n.length),i=n.shift();return r&&Wc(this,n,e.path,0,0,[i]),i}unshift(t,...e){let n={path:""},r=jl(this,t,n),i=r.unshift(...e);return e.length&&Wc(this,r,n.path,0,e.length,[]),i}notifyPath(t,e){let n;if(1==arguments.length){let r={path:""};e=jl(this,t,r),n=r.path}else n=Array.isArray(t)?Ul(t):t;this._setPendingPropertyOrPath(n,e,!0,!0)&&this._invalidateProperties()}_createReadOnlyProperty(t,e){this._addPropertyEffect(t,xc.READ_ONLY),e&&(this["_set"+function(t){return t[0].toUpperCase()+t.substring(1)}(t)]=function(e){this._setProperty(t,e)})}_createPropertyObserver(t,e,n){let r={property:t,method:e,dynamicFn:Boolean(n)};this._addPropertyEffect(t,xc.OBSERVE,{fn:Ec,info:r,trigger:{name:t}}),n&&this._addPropertyEffect(e,xc.OBSERVE,{fn:Ec,info:r,trigger:{name:e}})}_createMethodObserver(t,e){let n=jc(t);if(!n)throw new Error("Malformed observer expression '"+t+"'");Hc(this,n,xc.OBSERVE,Bc,null,e)}_createNotifyingProperty(t){this._addPropertyEffect(t,xc.NOTIFY,{fn:Mc,info:{eventName:Jl(t)+"-changed",property:t}})}_createReflectedProperty(t){let e=this.constructor.attributeNameForProperty(t);"-"===e[0]?console.warn("Property "+t+" cannot be reflected to attribute "+e+' because "-" is not a valid starting attribute name. Use a lowercase first letter for the property instead.'):this._addPropertyEffect(t,xc.REFLECT,{fn:Oc,info:{attrName:e}})}_createComputedProperty(t,e,n){let r=jc(e);if(!r)throw new Error("Malformed computed expression '"+e+"'");Hc(this,r,xc.COMPUTE,Rc,t,n)}_marshalArgs(t,e,n){const r=this.__data,i=[];for(let s=0,o=t.length;s<o;s++){let{name:o,structured:a,wildcard:l,value:c,literal:h}=t[s];if(!h)if(l){const t=Bl(o,e),i=Gc(r,n,t?e:o);c={path:t?e:o,value:i,base:t?jl(r,o):i}}else c=a?Gc(r,n,o):r[o];i[s]=c}return i}static addPropertyEffect(t,e,n){this.prototype._addPropertyEffect(t,e,n)}static createPropertyObserver(t,e,n){this.prototype._createPropertyObserver(t,e,n)}static createMethodObserver(t,e){this.prototype._createMethodObserver(t,e)}static createNotifyingProperty(t){this.prototype._createNotifyingProperty(t)}static createReadOnlyProperty(t,e){this.prototype._createReadOnlyProperty(t,e)}static createReflectedProperty(t){this.prototype._createReflectedProperty(t)}static createComputedProperty(t,e,n){this.prototype._createComputedProperty(t,e,n)}static bindTemplate(t){return this.prototype._bindTemplate(t)}_bindTemplate(t,e){let n=this.constructor._parseTemplate(t),r=this.__templateInfo==n;if(!r)for(let t in n.propertyEffects)this._createPropertyAccessor(t);if(e&&((n=Object.create(n)).wasPreBound=r,!r&&this.__templateInfo)){let t=this.__templateInfoLast||this.__templateInfo;return this.__templateInfoLast=t.nextTemplateInfo=n,n.previousTemplateInfo=t,n}return this.__templateInfo=n}static _addTemplatePropertyEffect(t,e,n){(t.hostProps=t.hostProps||{})[e]=!0;let r=t.propertyEffects=t.propertyEffects||{};(r[e]=r[e]||[]).push(n)}_stampTemplate(t){Jc.beginHosting(this);let e=super._stampTemplate(t);Jc.endHosting(this);let n=this._bindTemplate(t,!0);if(n.nodeList=e.nodeList,!n.wasPreBound){let t=n.childNodes=[];for(let n=e.firstChild;n;n=n.nextSibling)t.push(n)}return e.templateInfo=n,function(t,e){let{nodeList:n,nodeInfoList:r}=e;if(r.length)for(let e=0;e<r.length;e++){let i=r[e],s=n[e],o=i.bindings;if(o)for(let e=0;e<o.length;e++){let n=o[e];Lc(s,n),Fc(s,t,n)}s.__dataHost=t}}(this,n),this.__dataReady&&Ac(this,n.propertyEffects,this.__data,null,!1,n.nodeList),e}_removeBoundDom(t){let e=t.templateInfo;e.previousTemplateInfo&&(e.previousTemplateInfo.nextTemplateInfo=e.nextTemplateInfo),e.nextTemplateInfo&&(e.nextTemplateInfo.previousTemplateInfo=e.previousTemplateInfo),this.__templateInfoLast==e&&(this.__templateInfoLast=e.previousTemplateInfo),e.previousTemplateInfo=e.nextTemplateInfo=null;let n=e.childNodes;for(let t=0;t<n.length;t++){let e=n[t];e.parentNode.removeChild(e)}}static _parseTemplateNode(t,n,r){let i=e._parseTemplateNode.call(this,t,n,r);if(t.nodeType===Node.TEXT_NODE){let e=this._parseBindings(t.textContent,n);e&&(t.textContent=$c(e)||" ",kc(this,n,r,"text","textContent",e),i=!0)}return i}static _parseTemplateNodeAttribute(t,n,r,i,s){let o=this._parseBindings(s,n);if(o){let e=i,s="property";Cc.test(i)?s="attribute":"$"==i[i.length-1]&&(i=i.slice(0,-1),s="attribute");let a=$c(o);return a&&"attribute"==s&&("class"==i&&t.hasAttribute("class")&&(a+=" "+t.getAttribute(i)),t.setAttribute(i,a)),"input"===t.localName&&"value"===e&&t.setAttribute(e,""),t.removeAttribute(e),"property"===s&&(i=Xl(i)),kc(this,n,r,s,i,o,a),!0}return e._parseTemplateNodeAttribute.call(this,t,n,r,i,s)}static _parseTemplateNestedTemplate(t,n,r){let i=e._parseTemplateNestedTemplate.call(this,t,n,r),s=r.templateInfo.hostProps;for(let t in s)kc(this,n,r,"property","_host_"+t,[{mode:"{",source:t,dependencies:[t]}]);return i}static _parseBindings(t,e){let n,r=[],i=0;for(;null!==(n=Uc.exec(t));){n.index>i&&r.push({literal:t.slice(i,n.index)});let s=n[1][0],o=Boolean(n[2]),a=n[3].trim(),l=!1,c="",h=-1;"{"==s&&(h=a.indexOf("::"))>0&&(c=a.substring(h+2),a=a.substring(0,h),l=!0);let d=jc(a),u=[];if(d){let{args:t,methodName:n}=d;for(let e=0;e<t.length;e++){let n=t[e];n.literal||u.push(n)}let r=e.dynamicFns;(r&&r[n]||d.static)&&(u.push(n),d.dynamicFn=!0)}else u.push(a);r.push({source:a,mode:s,negate:o,customEvent:l,signature:d,dependencies:u,event:c}),i=Uc.lastIndex}if(i&&i<t.length){let e=t.substring(i);e&&r.push({literal:e})}return r.length?r:null}static _evaluateBinding(t,e,n,r,i,s){let o;return o=e.signature?Bc(t,n,r,0,e.signature):n!=e.source?jl(t,e.source):s&&Ll(n)?jl(t,n):t.__data[n],e.negate&&(o=!o),o}}});const Jc=new class{constructor(){this.stack=[]}registerHost(t){this.stack.length&&this.stack[this.stack.length-1]._enqueueClient(t)}beginHosting(t){this.stack.push(t)}endHosting(t){let e=this.stack.length;e&&this.stack[e-1]==t&&this.stack.pop()}};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const Kc=[];const Zc=zl(t=>{const e=ac(t);function n(t){const e=Object.getPrototypeOf(t);return e.prototype instanceof i?e:null}function r(t){if(!t.hasOwnProperty(JSCompiler_renameProperty("__ownProperties",t))){let e=null;if(t.hasOwnProperty(JSCompiler_renameProperty("properties",t))){const n=t.properties;n&&(e=
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
function(t){const e={};for(let n in t){const r=t[n];e[n]="function"==typeof r?{type:r}:r}return e}(n))}t.__ownProperties=e}return t.__ownProperties}class i extends e{static get observedAttributes(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__observedAttributes",this))){!function(t){Kc.push(t)}(this.prototype);const t=this._properties;this.__observedAttributes=t?Object.keys(t).map(t=>this.attributeNameForProperty(t)):[]}return this.__observedAttributes}static finalize(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__finalized",this))){const t=n(this);t&&t.finalize(),this.__finalized=!0,this._finalizeClass()}}static _finalizeClass(){const t=r(this);t&&this.createProperties(t)}static get _properties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__properties",this))){const t=n(this);this.__properties=Object.assign({},t&&t._properties,r(this))}return this.__properties}static typeForProperty(t){const e=this._properties[t];return e&&e.type}_initializeProperties(){0,this.constructor.finalize(),super._initializeProperties()}connectedCallback(){super.connectedCallback&&super.connectedCallback(),this._enableProperties()}disconnectedCallback(){super.disconnectedCallback&&super.disconnectedCallback()}}return i}),Qc="3.3.1",th=window.ShadyCSS&&window.ShadyCSS.cssBuild,eh=zl(t=>{const e=Zc(Xc(t));function n(t,e,n,r){n.computed&&(n.readOnly=!0),n.computed&&(t._hasReadOnlyEffect(e)?console.warn(`Cannot redefine computed property '${e}'.`):t._createComputedProperty(e,n.computed,r)),n.readOnly&&!t._hasReadOnlyEffect(e)?t._createReadOnlyProperty(e,!n.computed):!1===n.readOnly&&t._hasReadOnlyEffect(e)&&console.warn(`Cannot make readOnly property '${e}' non-readOnly.`),n.reflectToAttribute&&!t._hasReflectEffect(e)?t._createReflectedProperty(e):!1===n.reflectToAttribute&&t._hasReflectEffect(e)&&console.warn(`Cannot make reflected property '${e}' non-reflected.`),n.notify&&!t._hasNotifyEffect(e)?t._createNotifyingProperty(e):!1===n.notify&&t._hasNotifyEffect(e)&&console.warn(`Cannot make notify property '${e}' non-notify.`),n.observer&&t._createPropertyObserver(e,n.observer,r[n.observer]),t._addPropertyToAttributeMap(e)}function r(t,e,n,r){if(!th){const i=e.content.querySelectorAll("style"),s=vl(e),o=function(t){let e=_l(t);return e?bl(e):[]}(n),a=e.content.firstElementChild;for(let n=0;n<o.length;n++){let i=o[n];i.textContent=t._processStyleText(i.textContent,r),e.content.insertBefore(i,a)}let l=0;for(let e=0;e<s.length;e++){let n=s[e],o=i[l];o!==n?(n=n.cloneNode(!0),o.parentNode.insertBefore(n,o)):l++,n.textContent=t._processStyleText(n.textContent,r)}}window.ShadyCSS&&window.ShadyCSS.prepareTemplate(e,n)}return class extends e{static get polymerElementVersion(){return Qc}static _finalizeClass(){e._finalizeClass.call(this);const t=function(t){return t.hasOwnProperty(JSCompiler_renameProperty("__ownObservers",t))||(t.__ownObservers=t.hasOwnProperty(JSCompiler_renameProperty("observers",t))?t.observers:null),t.__ownObservers}(this);t&&this.createObservers(t,this._properties),this._prepareTemplate()}static _prepareTemplate(){let t=this.template;t&&("string"==typeof t?(console.error("template getter must return HTMLTemplateElement"),t=null):il||(t=t.cloneNode(!0))),this.prototype._template=t}static createProperties(t){for(let e in t)n(this.prototype,e,t[e],t)}static createObservers(t,e){const n=this.prototype;for(let r=0;r<t.length;r++)n._createMethodObserver(t[r],e)}static get template(){return this.hasOwnProperty(JSCompiler_renameProperty("_template",this))||(this._template=this.prototype.hasOwnProperty(JSCompiler_renameProperty("_template",this.prototype))?this.prototype._template:function(t){let e=null;if(t&&(!nl||rl)&&(e=dl.import(t,"template"),nl&&!e))throw new Error(`strictTemplatePolicy: expecting dom-module or null template for ${t}`);return e}(this.is)||Object.getPrototypeOf(this.prototype).constructor.template),this._template}static set template(t){this._template=t}static get importPath(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_importPath",this))){const t=this.importMeta;if(t)this._importPath=Ka(t.url);else{const t=dl.import(this.is);this._importPath=t&&t.assetpath||Object.getPrototypeOf(this.prototype).constructor.importPath}}return this._importPath}constructor(){super(),this._template,this._importPath,this.rootPath,this.importPath,this.root,this.$}_initializeProperties(){this.constructor.finalize(),this.constructor._finalizeTemplate(this.localName),super._initializeProperties(),this.rootPath=Qa,this.importPath=this.constructor.importPath;let t=function(t){if(!t.hasOwnProperty(JSCompiler_renameProperty("__propertyDefaults",t))){t.__propertyDefaults=null;let e=t._properties;for(let n in e){let r=e[n];"value"in r&&(t.__propertyDefaults=t.__propertyDefaults||{},t.__propertyDefaults[n]=r)}}return t.__propertyDefaults}(this.constructor);if(t)for(let e in t){let n=t[e];if(!this.hasOwnProperty(e)){let t="function"==typeof n.value?n.value.call(this):n.value;this._hasAccessor(e)?this._setPendingProperty(e,t,!0):this[e]=t}}}static _processStyleText(t,e){return Ja(t,e)}static _finalizeTemplate(t){const e=this.prototype._template;if(e&&!e.__polymerFinalized){e.__polymerFinalized=!0;const n=this.importPath;r(this,e,t,n?Xa(n):""),this.prototype._bindTemplate(e)}}connectedCallback(){window.ShadyCSS&&this._template&&window.ShadyCSS.styleElement(this),super.connectedCallback()}ready(){this._template&&(this.root=this._stampTemplate(this._template),this.$=this.root.$),super.ready()}_readyClients(){this._template&&(this.root=this._attachDom(this.root)),super._readyClients()}_attachDom(t){const e=Dl(this);if(e.attachShadow)return t?(e.shadowRoot||(e.attachShadow({mode:"open",shadyUpgradeFragment:t}),e.shadowRoot.appendChild(t)),sl&&window.ShadyDOM&&window.ShadyDOM.flushInitial(e.shadowRoot),e.shadowRoot):null;throw new Error("ShadowDOM not available. PolymerElement can create dom as children instead of in ShadowDOM by setting `this.root = this;` before `ready`.")}updateStyles(t){window.ShadyCSS&&window.ShadyCSS.styleSubtree(this,t)}resolveUrl(t,e){return!e&&this.importPath&&(e=Xa(this.importPath)),Xa(t,e)}static _parseTemplateContent(t,n,r){return n.dynamicFns=n.dynamicFns||this._properties,e._parseTemplateContent.call(this,t,n,r)}static _addTemplatePropertyEffect(t,n,r){return!il||n in this._properties||console.warn(`Property '${n}' used in template but not declared in 'properties'; `+"attribute will not be observed."),e._addTemplatePropertyEffect.call(this,t,n,r)}}}),nh=eh(HTMLElement);
/**
 * @fileoverview
 * @suppress {checkPrototypalTypes}
 * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt The complete set of authors may be found
 * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may
 * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by
 * Google as part of the polymer project is also subject to an additional IP
 * rights grant found at http://polymer.github.io/PATENTS.txt
 */
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
class rh{constructor(){this._asyncModule=null,this._callback=null,this._timer=null}setConfig(t,e){this._asyncModule=t,this._callback=e,this._timer=this._asyncModule.run(()=>{this._timer=null,ih.delete(this),this._callback()})}cancel(){this.isActive()&&(this._cancelAsync(),ih.delete(this))}_cancelAsync(){this.isActive()&&(this._asyncModule.cancel(this._timer),this._timer=null)}flush(){this.isActive()&&(this.cancel(),this._callback())}isActive(){return null!=this._timer}static debounce(t,e,n){return t instanceof rh?t._cancelAsync():t=new rh,t.setConfig(e,n),t}}let ih=new Set;const sh=function(t){ih.add(t)},oh=function(){const t=Boolean(ih.size);return ih.forEach(t=>{try{t.flush()}catch(t){setTimeout(()=>{throw t})}}),t};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let ah="string"==typeof document.head.style.touchAction,lh="__polymerGestures",ch="__polymerGesturesHandled",hh="__polymerGesturesTouchAction",dh=25,uh=5,ph=2500,fh=["mousedown","mousemove","mouseup","click"],_h=[0,1,4,2],mh=function(){try{return 1===new MouseEvent("test",{buttons:1}).buttons}catch(t){return!1}}();function gh(t){return fh.indexOf(t)>-1}let yh=!1;function vh(t){if(!gh(t)&&"touchend"!==t)return ah&&yh&&el?{passive:!0}:void 0}!function(){try{let t=Object.defineProperty({},"passive",{get(){yh=!0}});window.addEventListener("test",null,t),window.removeEventListener("test",null,t)}catch(t){}}();let bh=navigator.userAgent.match(/iP(?:[oa]d|hone)|Android/);const wh=[],xh={button:!0,input:!0,keygen:!0,meter:!0,output:!0,textarea:!0,progress:!0,select:!0},Ch={button:!0,command:!0,fieldset:!0,input:!0,keygen:!0,optgroup:!0,option:!0,select:!0,textarea:!0};function Sh(t){return xh[t.localName]||!1}function Ah(t){let e=Array.prototype.slice.call(t.labels||[]);if(!e.length){e=[];let n=t.getRootNode();if(t.id){let r=n.querySelectorAll(`label[for = ${t.id}]`);for(let t=0;t<r.length;t++)e.push(r[t])}}return e}let Th=function(t){let e=t.sourceCapabilities;if((!e||e.firesTouchEvents)&&(t[ch]={skip:!0},"click"===t.type)){let e=!1,n=Oh(t);for(let t=0;t<n.length;t++){if(n[t].nodeType===Node.ELEMENT_NODE)if("label"===n[t].localName)wh.push(n[t]);else if(Sh(n[t])){let r=Ah(n[t]);for(let t=0;t<r.length;t++)e=e||wh.indexOf(r[t])>-1}if(n[t]===Ih.mouse.target)return}if(e)return;t.preventDefault(),t.stopPropagation()}};function Ph(t){let e=bh?["click"]:fh;for(let n,r=0;r<e.length;r++)n=e[r],t?(wh.length=0,document.addEventListener(n,Th,!0)):document.removeEventListener(n,Th,!0)}function Eh(t){let e=t.type;if(!gh(e))return!1;if("mousemove"===e){let e=void 0===t.buttons?1:t.buttons;return t instanceof window.MouseEvent&&!mh&&(e=_h[t.which]||0),Boolean(1&e)}return 0===(void 0===t.button?0:t.button)}let Ih={mouse:{target:null,mouseIgnoreJob:null},touch:{x:0,y:0,id:-1,scrollDecided:!1}};function Nh(t,e,n){t.movefn=e,t.upfn=n,document.addEventListener("mousemove",e),document.addEventListener("mouseup",n)}function Mh(t){document.removeEventListener("mousemove",t.movefn),document.removeEventListener("mouseup",t.upfn),t.movefn=null,t.upfn=null}ol&&document.addEventListener("touchend",function(t){if(!ol)return;Ih.mouse.mouseIgnoreJob||Ph(!0),Ih.mouse.target=Oh(t)[0],Ih.mouse.mouseIgnoreJob=rh.debounce(Ih.mouse.mouseIgnoreJob,nc.after(ph),function(){Ph(),Ih.mouse.target=null,Ih.mouse.mouseIgnoreJob=null})},!!yh&&{passive:!0});const Oh=window.ShadyDOM&&window.ShadyDOM.noPatch?window.ShadyDOM.composedPath:t=>t.composedPath&&t.composedPath()||[],Rh={},kh=[];function zh(t){const e=Oh(t);return e.length>0?e[0]:t.target}function Dh(t){let e,n=t.type,r=t.currentTarget[lh];if(!r)return;let i=r[n];if(i){if(!t[ch]&&(t[ch]={},"touch"===n.slice(0,5))){let e=(t=t).changedTouches[0];if("touchstart"===n&&1===t.touches.length&&(Ih.touch.id=e.identifier),Ih.touch.id!==e.identifier)return;ah||"touchstart"!==n&&"touchmove"!==n||function(t){let e=t.changedTouches[0],n=t.type;if("touchstart"===n)Ih.touch.x=e.clientX,Ih.touch.y=e.clientY,Ih.touch.scrollDecided=!1;else if("touchmove"===n){if(Ih.touch.scrollDecided)return;Ih.touch.scrollDecided=!0;let n=function(t){let e="auto",n=Oh(t);for(let t,r=0;r<n.length;r++)if((t=n[r])[hh]){e=t[hh];break}return e}(t),r=!1,i=Math.abs(Ih.touch.x-e.clientX),s=Math.abs(Ih.touch.y-e.clientY);t.cancelable&&("none"===n?r=!0:"pan-x"===n?r=s>i:"pan-y"===n&&(r=i>s)),r?t.preventDefault():Uh("track")}}(t)}if(!(e=t[ch]).skip){for(let n,r=0;r<kh.length;r++)i[(n=kh[r]).name]&&!e[n.name]&&n.flow&&n.flow.start.indexOf(t.type)>-1&&n.reset&&n.reset();for(let r,s=0;s<kh.length;s++)i[(r=kh[s]).name]&&!e[r.name]&&(e[r.name]=!0,r[n](t))}}}function Lh(t,e,n){return!!Rh[e]&&(function(t,e,n){let r=Rh[e],i=r.deps,s=r.name,o=t[lh];o||(t[lh]=o={});for(let e,n,r=0;r<i.length;r++)e=i[r],bh&&gh(e)&&"click"!==e||((n=o[e])||(o[e]=n={_count:0}),0===n._count&&t.addEventListener(e,Dh,vh(e)),n[s]=(n[s]||0)+1,n._count=(n._count||0)+1);t.addEventListener(e,n),r.touchAction&&Bh(t,r.touchAction)}(t,e,n),!0)}function Fh(t,e,n){return!!Rh[e]&&(function(t,e,n){let r=Rh[e],i=r.deps,s=r.name,o=t[lh];if(o)for(let e,n,r=0;r<i.length;r++)e=i[r],(n=o[e])&&n[s]&&(n[s]=(n[s]||1)-1,n._count=(n._count||1)-1,0===n._count&&t.removeEventListener(e,Dh,vh(e)));t.removeEventListener(e,n)}(t,e,n),!0)}function Hh(t){kh.push(t);for(let e=0;e<t.emits.length;e++)Rh[t.emits[e]]=t}function Bh(t,e){ah&&t instanceof HTMLElement&&sc.run(()=>{t.style.touchAction=e}),t[hh]=e}function Vh(t,e,n){let r=new Event(e,{bubbles:!0,cancelable:!0,composed:!0});if(r.detail=n,Dl(t).dispatchEvent(r),r.defaultPrevented){let t=n.preventer||n.sourceEvent;t&&t.preventDefault&&t.preventDefault()}}function Uh(t){let e=function(t){for(let e,n=0;n<kh.length;n++){e=kh[n];for(let n,r=0;r<e.emits.length;r++)if((n=e.emits[r])===t)return e}return null}(t);e.info&&(e.info.prevent=!0)}function $h(t,e,n,r){e&&Vh(e,t,{x:n.clientX,y:n.clientY,sourceEvent:n,preventer:r,prevent:function(t){return Uh(t)}})}function jh(t,e,n){if(t.prevent)return!1;if(t.started)return!0;let r=Math.abs(t.x-e),i=Math.abs(t.y-n);return r>=uh||i>=uh}function qh(t,e,n){if(!e)return;let r,i=t.moves[t.moves.length-2],s=t.moves[t.moves.length-1],o=s.x-t.x,a=s.y-t.y,l=0;i&&(r=s.x-i.x,l=s.y-i.y),Vh(e,"track",{state:t.state,x:n.clientX,y:n.clientY,dx:o,dy:a,ddx:r,ddy:l,sourceEvent:n,hover:function(){return function(t,e){let n=document.elementFromPoint(t,e),r=n;for(;r&&r.shadowRoot&&!window.ShadyDOM&&r!==(r=r.shadowRoot.elementFromPoint(t,e));)r&&(n=r);return n}(n.clientX,n.clientY)}})}function Gh(t,e,n){let r=Math.abs(e.clientX-t.x),i=Math.abs(e.clientY-t.y),s=zh(n||e);!s||Ch[s.localName]&&s.hasAttribute("disabled")||(isNaN(r)||isNaN(i)||r<=dh&&i<=dh||function(t){if("click"===t.type){if(0===t.detail)return!0;let e=zh(t);if(!e.nodeType||e.nodeType!==Node.ELEMENT_NODE)return!0;let n=e.getBoundingClientRect(),r=t.pageX,i=t.pageY;return!(r>=n.left&&r<=n.right&&i>=n.top&&i<=n.bottom)}return!1}(e))&&(t.prevent||Vh(s,"tap",{x:e.clientX,y:e.clientY,sourceEvent:e,preventer:n}))}Hh({name:"downup",deps:["mousedown","touchstart","touchend"],flow:{start:["mousedown","touchstart"],end:["mouseup","touchend"]},emits:["down","up"],info:{movefn:null,upfn:null},reset:function(){Mh(this.info)},mousedown:function(t){if(!Eh(t))return;let e=zh(t),n=this;Nh(this.info,function(t){Eh(t)||($h("up",e,t),Mh(n.info))},function(t){Eh(t)&&$h("up",e,t),Mh(n.info)}),$h("down",e,t)},touchstart:function(t){$h("down",zh(t),t.changedTouches[0],t)},touchend:function(t){$h("up",zh(t),t.changedTouches[0],t)}}),Hh({name:"track",touchAction:"none",deps:["mousedown","touchstart","touchmove","touchend"],flow:{start:["mousedown","touchstart"],end:["mouseup","touchend"]},emits:["track"],info:{x:0,y:0,state:"start",started:!1,moves:[],addMove:function(t){this.moves.length>2&&this.moves.shift(),this.moves.push(t)},movefn:null,upfn:null,prevent:!1},reset:function(){this.info.state="start",this.info.started=!1,this.info.moves=[],this.info.x=0,this.info.y=0,this.info.prevent=!1,Mh(this.info)},mousedown:function(t){if(!Eh(t))return;let e=zh(t),n=this,r=function(t){let r=t.clientX,i=t.clientY;jh(n.info,r,i)&&(n.info.state=n.info.started?"mouseup"===t.type?"end":"track":"start","start"===n.info.state&&Uh("tap"),n.info.addMove({x:r,y:i}),Eh(t)||(n.info.state="end",Mh(n.info)),e&&qh(n.info,e,t),n.info.started=!0)};Nh(this.info,r,function(t){n.info.started&&r(t),Mh(n.info)}),this.info.x=t.clientX,this.info.y=t.clientY},touchstart:function(t){let e=t.changedTouches[0];this.info.x=e.clientX,this.info.y=e.clientY},touchmove:function(t){let e=zh(t),n=t.changedTouches[0],r=n.clientX,i=n.clientY;jh(this.info,r,i)&&("start"===this.info.state&&Uh("tap"),this.info.addMove({x:r,y:i}),qh(this.info,e,n),this.info.state="track",this.info.started=!0)},touchend:function(t){let e=zh(t),n=t.changedTouches[0];this.info.started&&(this.info.state="end",this.info.addMove({x:n.clientX,y:n.clientY}),qh(this.info,e,n))}}),Hh({name:"tap",deps:["mousedown","click","touchstart","touchend"],flow:{start:["mousedown","touchstart"],end:["click","touchend"]},emits:["tap"],info:{x:NaN,y:NaN,prevent:!1},reset:function(){this.info.x=NaN,this.info.y=NaN,this.info.prevent=!1},mousedown:function(t){Eh(t)&&(this.info.x=t.clientX,this.info.y=t.clientY)},click:function(t){Eh(t)&&Gh(this.info,t)},touchstart:function(t){const e=t.changedTouches[0];this.info.x=e.clientX,this.info.y=e.clientY},touchend:function(t){Gh(this.info,t.changedTouches[0],t)}});const Yh=zl(t=>{return class extends t{_addEventListenerToNode(t,e,n){Lh(t,e,n)||super._addEventListenerToNode(t,e,n)}_removeEventListenerFromNode(t,e,n){Fh(t,e,n)||super._removeEventListenerFromNode(t,e,n)}}});
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
function Wh(t,e,n){return{index:t,removed:e,addedCount:n}}const Xh=0,Jh=1,Kh=2,Zh=3;function Qh(t,e,n,r,i,s){let o,a=0,l=0,c=Math.min(n-e,s-i);if(0==e&&0==i&&(a=function(t,e,n){for(let r=0;r<n;r++)if(!ed(t[r],e[r]))return r;return n}(t,r,c)),n==t.length&&s==r.length&&(l=function(t,e,n){let r=t.length,i=e.length,s=0;for(;s<n&&ed(t[--r],e[--i]);)s++;return s}(t,r,c-a)),i+=a,s-=l,(n-=l)-(e+=a)==0&&s-i==0)return[];if(e==n){for(o=Wh(e,[],0);i<s;)o.removed.push(r[i++]);return[o]}if(i==s)return[Wh(e,[],n-e)];let h=function(t){let e=t.length-1,n=t[0].length-1,r=t[e][n],i=[];for(;e>0||n>0;){if(0==e){i.push(Kh),n--;continue}if(0==n){i.push(Zh),e--;continue}let s,o=t[e-1][n-1],a=t[e-1][n],l=t[e][n-1];(s=a<l?a<o?a:o:l<o?l:o)==o?(o==r?i.push(Xh):(i.push(Jh),r=o),e--,n--):s==a?(i.push(Zh),e--,r=a):(i.push(Kh),n--,r=l)}return i.reverse(),i}(function(t,e,n,r,i,s){let o=s-i+1,a=n-e+1,l=new Array(o);for(let t=0;t<o;t++)l[t]=new Array(a),l[t][0]=t;for(let t=0;t<a;t++)l[0][t]=t;for(let n=1;n<o;n++)for(let s=1;s<a;s++)if(ed(t[e+s-1],r[i+n-1]))l[n][s]=l[n-1][s-1];else{let t=l[n-1][s]+1,e=l[n][s-1]+1;l[n][s]=t<e?t:e}return l}(t,e,n,r,i,s));o=void 0;let d=[],u=e,p=i;for(let t=0;t<h.length;t++)switch(h[t]){case Xh:o&&(d.push(o),o=void 0),u++,p++;break;case Jh:o||(o=Wh(u,[],0)),o.addedCount++,u++,o.removed.push(r[p]),p++;break;case Kh:o||(o=Wh(u,[],0)),o.addedCount++,u++;break;case Zh:o||(o=Wh(u,[],0)),o.removed.push(r[p]),p++}return o&&d.push(o),d}function td(t,e){return Qh(t,0,t.length,e,0,e.length)}function ed(t,e){return t===e}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/function nd(t){return"slot"===t.localName}let rd=class{static getFlattenedNodes(t){const e=Dl(t);return nd(t)?(t=t,e.assignedNodes({flatten:!0})):Array.from(e.childNodes).map(t=>nd(t)?Dl(t=t).assignedNodes({flatten:!0}):[t]).reduce((t,e)=>t.concat(e),[])}constructor(t,e){this._shadyChildrenObserver=null,this._nativeChildrenObserver=null,this._connected=!1,this._target=t,this.callback=e,this._effectiveNodes=[],this._observer=null,this._scheduled=!1,this._boundSchedule=(()=>{this._schedule()}),this.connect(),this._schedule()}connect(){nd(this._target)?this._listenSlots([this._target]):Dl(this._target).children&&(this._listenSlots(Dl(this._target).children),window.ShadyDOM?this._shadyChildrenObserver=window.ShadyDOM.observeChildren(this._target,t=>{this._processMutations(t)}):(this._nativeChildrenObserver=new MutationObserver(t=>{this._processMutations(t)}),this._nativeChildrenObserver.observe(this._target,{childList:!0}))),this._connected=!0}disconnect(){nd(this._target)?this._unlistenSlots([this._target]):Dl(this._target).children&&(this._unlistenSlots(Dl(this._target).children),window.ShadyDOM&&this._shadyChildrenObserver?(window.ShadyDOM.unobserveChildren(this._shadyChildrenObserver),this._shadyChildrenObserver=null):this._nativeChildrenObserver&&(this._nativeChildrenObserver.disconnect(),this._nativeChildrenObserver=null)),this._connected=!1}_schedule(){this._scheduled||(this._scheduled=!0,sc.run(()=>this.flush()))}_processMutations(t){this._processSlotMutations(t),this.flush()}_processSlotMutations(t){if(t)for(let e=0;e<t.length;e++){let n=t[e];n.addedNodes&&this._listenSlots(n.addedNodes),n.removedNodes&&this._unlistenSlots(n.removedNodes)}}flush(){if(!this._connected)return!1;window.ShadyDOM&&ShadyDOM.flush(),this._nativeChildrenObserver?this._processSlotMutations(this._nativeChildrenObserver.takeRecords()):this._shadyChildrenObserver&&this._processSlotMutations(this._shadyChildrenObserver.takeRecords()),this._scheduled=!1;let t={target:this._target,addedNodes:[],removedNodes:[]},e=this.constructor.getFlattenedNodes(this._target),n=td(e,this._effectiveNodes);for(let e,r=0;r<n.length&&(e=n[r]);r++)for(let n,r=0;r<e.removed.length&&(n=e.removed[r]);r++)t.removedNodes.push(n);for(let r,i=0;i<n.length&&(r=n[i]);i++)for(let n=r.index;n<r.index+r.addedCount;n++)t.addedNodes.push(e[n]);this._effectiveNodes=e;let r=!1;return(t.addedNodes.length||t.removedNodes.length)&&(r=!0,this.callback.call(this._target,t)),r}_listenSlots(t){for(let e=0;e<t.length;e++){let n=t[e];nd(n)&&n.addEventListener("slotchange",this._boundSchedule)}}_unlistenSlots(t){for(let e=0;e<t.length;e++){let n=t[e];nd(n)&&n.removeEventListener("slotchange",this._boundSchedule)}}};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/class id{constructor(){this.start=0,this.end=0,this.previous=null,this.parent=null,this.rules=null,this.parsedCssText="",this.cssText="",this.atRule=!1,this.type=0,this.keyframesName="",this.selector="",this.parsedSelector=""}}function sd(t){return function t(e,n){let r=n.substring(e.start,e.end-1);e.parsedCssText=e.cssText=r.trim();if(e.parent){let t=e.previous?e.previous.end:e.parent.start;r=(r=(r=function(t){return t.replace(/\\([0-9a-f]{1,6})\s/gi,function(){let t=arguments[1],e=6-t.length;for(;e--;)t="0"+t;return"\\"+t})}(r=n.substring(t,e.start-1))).replace(hd.multipleSpaces," ")).substring(r.lastIndexOf(";")+1);let i=e.parsedSelector=e.selector=r.trim();e.atRule=0===i.indexOf(pd),e.atRule?0===i.indexOf(ud)?e.type=ad.MEDIA_RULE:i.match(hd.keyframesRule)&&(e.type=ad.KEYFRAMES_RULE,e.keyframesName=e.selector.split(hd.multipleSpaces).pop()):0===i.indexOf(dd)?e.type=ad.MIXIN_RULE:e.type=ad.STYLE_RULE}let i=e.rules;if(i)for(let e,r=0,s=i.length;r<s&&(e=i[r]);r++)t(e,n);return e}(function(t){let e=new id;e.start=0,e.end=t.length;let n=e;for(let r=0,i=t.length;r<i;r++)if(t[r]===ld){n.rules||(n.rules=[]);let t=n,e=t.rules[t.rules.length-1]||null;(n=new id).start=r+1,n.parent=t,n.previous=e,t.rules.push(n)}else t[r]===cd&&(n.end=r+1,n=n.parent||e);return e}(t=function(t){return t.replace(hd.comments,"").replace(hd.port,"")}(t)),t)}function od(t,e,n=""){let r="";if(t.cssText||t.rules){let n=t.rules;if(n&&!function(t){let e=t[0];return Boolean(e)&&Boolean(e.selector)&&0===e.selector.indexOf(dd)}(n))for(let t,i=0,s=n.length;i<s&&(t=n[i]);i++)r=od(t,e,r);else(r=(r=e?t.cssText:function(t){return function(t){return t.replace(hd.mixinApply,"").replace(hd.varApply,"")}(t=function(t){return t.replace(hd.customProp,"").replace(hd.mixinProp,"")}(t))}(t.cssText)).trim())&&(r="  "+r+"\n")}return r&&(t.selector&&(n+=t.selector+" "+ld+"\n"),n+=r,t.selector&&(n+=cd+"\n\n")),n}const ad={STYLE_RULE:1,KEYFRAMES_RULE:7,MEDIA_RULE:4,MIXIN_RULE:1e3},ld="{",cd="}",hd={comments:/\/\*[^*]*\*+([^/*][^*]*\*+)*\//gim,port:/@import[^;]*;/gim,customProp:/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\n]|$)/gim,mixinProp:/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\n]|$)?/gim,mixinApply:/@apply\s*\(?[^);]*\)?\s*(?:[;\n]|$)?/gim,varApply:/[^;:]*?:[^;]*?var\([^;]*\)(?:[;\n]|$)?/gim,keyframesRule:/^@[^\s]*keyframes/,multipleSpaces:/\s+/g},dd="--",ud="@media",pd="@",fd=new Set,_d="shady-unscoped";function md(t){const e=t.textContent;if(!fd.has(e)){fd.add(e);const n=t.cloneNode(!0);document.head.appendChild(n)}}function gd(t){return t.hasAttribute(_d)}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/function yd(t,e){return t?("string"==typeof t&&(t=sd(t)),e&&bd(t,e),od(t,$a)):""}function vd(t){return!t.__cssRules&&t.textContent&&(t.__cssRules=sd(t.textContent)),t.__cssRules||null}function bd(t,e,n,r){if(!t)return;let i=!1,s=t.type;if(r&&s===ad.MEDIA_RULE){let e=t.selector.match(za);e&&(window.matchMedia(e[1]).matches||(i=!0))}s===ad.STYLE_RULE?e(t):n&&s===ad.KEYFRAMES_RULE?n(t):s===ad.MIXIN_RULE&&(i=!0);let o=t.rules;if(o&&!i)for(let t,i=0,s=o.length;i<s&&(t=o[i]);i++)bd(t,e,n,r)}function wd(t,e){let n=0;for(let r=e,i=t.length;r<i;r++)if("("===t[r])n++;else if(")"===t[r]&&0==--n)return r;return-1}window.ShadyDOM&&window.ShadyDOM.wrap;const xd="css-build";function Cd(t){if(void 0!==Ba)return Ba;if(void 0===t.__cssBuild){const e=t.getAttribute(xd);if(e)t.__cssBuild=e;else{const e=function(t){const e="template"===t.localName?t.content.firstChild:t.firstChild;if(e instanceof Comment){const t=e.textContent.trim().split(":");if(t[0]===xd)return t[1]}return""}(t);""!==e&&function(t){const e="template"===t.localName?t.content.firstChild:t.firstChild;e.parentNode.removeChild(e)}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/(t),t.__cssBuild=e}}return t.__cssBuild||""}function Sd(t){return""!==Cd(t)}const Ad=/;\s*/m,Td=/^\s*(initial)|(inherit)\s*$/,Pd=/\s*!important/,Ed="_-_";class Id{constructor(){this._map={}}set(t,e){t=t.trim(),this._map[t]={properties:e,dependants:{}}}get(t){return t=t.trim(),this._map[t]||null}}let Nd=null;class Md{constructor(){this._currentElement=null,this._measureElement=null,this._map=new Id}detectMixin(t){return function(t){const e=ka.test(t)||Ra.test(t);return ka.lastIndex=0,Ra.lastIndex=0,e}(t)}gatherStyles(t){const e=function(t){const e=[],n=t.querySelectorAll("style");for(let t=0;t<n.length;t++){const r=n[t];gd(r)?Fa||(md(r),r.parentNode.removeChild(r)):(e.push(r.textContent),r.parentNode.removeChild(r))}return e.join("").trim()}(t.content);if(e){const n=document.createElement("style");return n.textContent=e,t.content.insertBefore(n,t.content.firstChild),n}return null}transformTemplate(t,e){void 0===t._gatheredStyle&&(t._gatheredStyle=this.gatherStyles(t));const n=t._gatheredStyle;return n?this.transformStyle(n,e):null}transformStyle(t,e=""){let n=vd(t);return this.transformRules(n,e),t.textContent=yd(n),n}transformCustomStyle(t){let e=vd(t);return bd(e,t=>{":root"===t.selector&&(t.selector="html"),this.transformRule(t)}),t.textContent=yd(e),e}transformRules(t,e){this._currentElement=e,bd(t,t=>{this.transformRule(t)}),this._currentElement=null}transformRule(t){t.cssText=this.transformCssText(t.parsedCssText,t),":root"===t.selector&&(t.selector=":host > *")}transformCssText(t,e){return t=t.replace(Ra,(t,n,r,i)=>this._produceCssProperties(t,n,r,i,e)),this._consumeCssProperties(t,e)}_getInitialValueForProperty(t){return this._measureElement||(this._measureElement=document.createElement("meta"),this._measureElement.setAttribute("apply-shim-measure",""),this._measureElement.style.all="initial",document.head.appendChild(this._measureElement)),window.getComputedStyle(this._measureElement).getPropertyValue(t)}_fallbacksFromPreviousRules(t){let e=t;for(;e.parent;)e=e.parent;const n={};let r=!1;return bd(e,e=>{(r=r||e===t)||e.selector===t.selector&&Object.assign(n,this._cssTextToMap(e.parsedCssText))}),n}_consumeCssProperties(t,e){let n=null;for(;n=ka.exec(t);){let r=n[0],i=n[1],s=n.index,o=s+r.indexOf("@apply"),a=s+r.length,l=t.slice(0,o),c=t.slice(a),h=e?this._fallbacksFromPreviousRules(e):{};Object.assign(h,this._cssTextToMap(l));let d=this._atApplyToCssProperties(i,h);t=`${l}${d}${c}`,ka.lastIndex=s+d.length}return t}_atApplyToCssProperties(t,e){t=t.replace(Ad,"");let n=[],r=this._map.get(t);if(r||(this._map.set(t,{}),r=this._map.get(t)),r){let i,s,o;this._currentElement&&(r.dependants[this._currentElement]=!0);const a=r.properties;for(i in a)o=e&&e[i],s=[i,": var(",t,Ed,i],o&&s.push(",",o.replace(Pd,"")),s.push(")"),Pd.test(a[i])&&s.push(" !important"),n.push(s.join(""))}return n.join("; ")}_replaceInitialOrInherit(t,e){let n=Td.exec(e);return n&&(e=n[1]?this._getInitialValueForProperty(t):"apply-shim-inherit"),e}_cssTextToMap(t,e=!1){let n,r,i=t.split(";"),s={};for(let t,o,a=0;a<i.length;a++)(t=i[a])&&(o=t.split(":")).length>1&&(n=o[0].trim(),r=o.slice(1).join(":"),e&&(r=this._replaceInitialOrInherit(n,r)),s[n]=r);return s}_invalidateMixinEntry(t){if(Nd)for(let e in t.dependants)e!==this._currentElement&&Nd(e)}_produceCssProperties(t,e,n,r,i){if(n&&function t(e,n){let r=e.indexOf("var(");if(-1===r)return n(e,"","","");let i=wd(e,r+3),s=e.substring(r+4,i),o=e.substring(0,r),a=t(e.substring(i+1),n),l=s.indexOf(",");return-1===l?n(o,s.trim(),"",a):n(o,s.substring(0,l).trim(),s.substring(l+1).trim(),a)}(n,(t,e)=>{e&&this._map.get(e)&&(r=`@apply ${e};`)}),!r)return t;let s=this._consumeCssProperties(""+r,i),o=t.slice(0,t.indexOf("--")),a=this._cssTextToMap(s,!0),l=a,c=this._map.get(e),h=c&&c.properties;h?l=Object.assign(Object.create(h),a):this._map.set(e,l);let d,u,p=[],f=!1;for(d in l)void 0===(u=a[d])&&(u="initial"),!h||d in h||(f=!0),p.push(`${e}${Ed}${d}: ${u}`);return f&&this._invalidateMixinEntry(c),c&&(c.properties=l),n&&(o=`${t};${o}`),`${o}${p.join("; ")};`}}Md.prototype.detectMixin=Md.prototype.detectMixin,Md.prototype.transformStyle=Md.prototype.transformStyle,Md.prototype.transformCustomStyle=Md.prototype.transformCustomStyle,Md.prototype.transformRules=Md.prototype.transformRules,Md.prototype.transformRule=Md.prototype.transformRule,Md.prototype.transformTemplate=Md.prototype.transformTemplate,Md.prototype._separator=Ed,Object.defineProperty(Md.prototype,"invalidCallback",{get:()=>Nd,set(t){Nd=t}});var Od=Md;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/var Rd={};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const kd="_applyShimCurrentVersion",zd="_applyShimNextVersion",Dd="_applyShimValidatingVersion",Ld=Promise.resolve();function Fd(t){let e=Rd[t];e&&function(t){t[kd]=t[kd]||0,t[Dd]=t[Dd]||0,t[zd]=(t[zd]||0)+1}(e)}function Hd(t){return t[kd]===t[zd]}function Bd(t){return!Hd(t)&&t[Dd]===t[zd]}function Vd(t){t[Dd]=t[zd],t._validating||(t._validating=!0,Ld.then(function(){t[kd]=t[zd],t._validating=!1}))}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
const Ud=new Od;if(!window.ShadyCSS||!window.ShadyCSS.ScopingShim){const t=new class{constructor(){this.customStyleInterface=null,Ud.invalidCallback=Fd}ensure(){this.customStyleInterface||window.ShadyCSS.CustomStyleInterface&&(this.customStyleInterface=window.ShadyCSS.CustomStyleInterface,this.customStyleInterface.transformCallback=(t=>{Ud.transformCustomStyle(t)}),this.customStyleInterface.validateCallback=(()=>{requestAnimationFrame(()=>{this.customStyleInterface.enqueued&&this.flushCustomStyles()})}))}prepareTemplate(t,e){if(this.ensure(),Sd(t))return;Rd[e]=t;let n=Ud.transformTemplate(t,e);t._styleAst=n}flushCustomStyles(){if(this.ensure(),!this.customStyleInterface)return;let t=this.customStyleInterface.processStyles();if(this.customStyleInterface.enqueued){for(let e=0;e<t.length;e++){let n=t[e],r=this.customStyleInterface.getStyleForCustomStyle(n);r&&Ud.transformCustomStyle(r)}this.customStyleInterface.enqueued=!1}}styleSubtree(t,e){if(this.ensure(),e&&Da(t,e),t.shadowRoot){this.styleElement(t);let e=t.shadowRoot.children||t.shadowRoot.childNodes;for(let t=0;t<e.length;t++)this.styleSubtree(e[t])}else{let e=t.children||t.childNodes;for(let t=0;t<e.length;t++)this.styleSubtree(e[t])}}styleElement(t){this.ensure();let{is:e}=function(t){let e=t.localName,n="",r="";return e?e.indexOf("-")>-1?n=e:(r=e,n=t.getAttribute&&t.getAttribute("is")||""):(n=t.is,r=t.extends),{is:n,typeExtension:r}}(t),n=Rd[e];if((!n||!Sd(n))&&n&&!Hd(n)){Bd(n)||(this.prepareTemplate(n,e),Vd(n));let r=t.shadowRoot;if(r){let t=r.querySelector("style");t&&(t.__cssRules=n._styleAst,t.textContent=yd(n._styleAst))}}}styleDocument(t){this.ensure(),this.styleSubtree(document.body,t)}};let e=window.ShadyCSS&&window.ShadyCSS.CustomStyleInterface;window.ShadyCSS={prepareTemplate(e,n,r){t.flushCustomStyles(),t.prepareTemplate(e,n)},prepareTemplateStyles(t,e,n){window.ShadyCSS.prepareTemplate(t,e,n)},prepareTemplateDom(t,e){},styleSubtree(e,n){t.flushCustomStyles(),t.styleSubtree(e,n)},styleElement(e){t.flushCustomStyles(),t.styleElement(e)},styleDocument(e){t.flushCustomStyles(),t.styleDocument(e)},getComputedStyleValue:(t,e)=>La(t,e),flushCustomStyles(){t.flushCustomStyles()},nativeCss:$a,nativeShadow:Fa,cssBuild:Ba,disableRuntime:Ua},e&&(window.ShadyCSS.CustomStyleInterface=e)}window.ShadyCSS.ApplyShim=Ud;
/**
 * @fileoverview
 * @suppress {checkPrototypalTypes}
 * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt The complete set of authors may be found
 * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may
 * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by
 * Google as part of the polymer project is also subject to an additional IP
 * rights grant found at http://polymer.github.io/PATENTS.txt
 */
const $d=/:host\(:dir\((ltr|rtl)\)\)/g,jd=':host([dir="$1"])',qd=/([\s\w-#\.\[\]\*]*):dir\((ltr|rtl)\)/g,Gd=':host([dir="$2"]) $1',Yd=/:dir\((?:ltr|rtl)\)/,Wd=Boolean(window.ShadyDOM&&window.ShadyDOM.inUse),Xd=[];let Jd=null,Kd="";function Zd(){Kd=document.documentElement.getAttribute("dir")}function Qd(t){if(!t.__autoDirOptOut){t.setAttribute("dir",Kd)}}function tu(){Zd(),Kd=document.documentElement.getAttribute("dir");for(let t=0;t<Xd.length;t++)Qd(Xd[t])}const eu=zl(t=>{Wd||Jd||(Zd(),(Jd=new MutationObserver(tu)).observe(document.documentElement,{attributes:!0,attributeFilter:["dir"]}));const e=hc(t);class n extends e{static _processStyleText(t,n){return t=e._processStyleText.call(this,t,n),!Wd&&Yd.test(t)&&(t=this._replaceDirInCssText(t),this.__activateDir=!0),t}static _replaceDirInCssText(t){let e=t;return e=(e=e.replace($d,jd)).replace(qd,Gd)}constructor(){super(),this.__autoDirOptOut=!1}ready(){super.ready(),this.__autoDirOptOut=this.hasAttribute("dir")}connectedCallback(){e.prototype.connectedCallback&&super.connectedCallback(),this.constructor.__activateDir&&(Jd&&Jd.takeRecords().length&&tu(),Xd.push(this),Qd(this))}disconnectedCallback(){if(e.prototype.disconnectedCallback&&super.disconnectedCallback(),this.constructor.__activateDir){const t=Xd.indexOf(this);t>-1&&Xd.splice(t,1)}}}return n.__activateDir=!1,n});
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/let nu=!1,ru=[],iu=[];function su(){nu=!0,requestAnimationFrame(function(){nu=!1,ou(ru),setTimeout(function(){!function(t){for(let e=0,n=t.length;e<n;e++)au(t.shift())}(iu)})})}function ou(t){for(;t.length;)au(t.shift())}function au(t){const e=t[0],n=t[1],r=t[2];try{n.apply(e,r)}catch(t){setTimeout(()=>{throw t})}}function lu(t,e,n){nu||su(),iu.push([t,e,n])}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/function cu(){document.body.removeAttribute("unresolved")}"interactive"===document.readyState||"complete"===document.readyState?cu():window.addEventListener("DOMContentLoaded",cu);
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const hu=function(){let t,e;do{t=window.ShadyDOM&&ShadyDOM.flush(),window.ShadyCSS&&window.ShadyCSS.ScopingShim&&window.ShadyCSS.ScopingShim.flush(),e=oh()}while(t||e)},du=Element.prototype,uu=du.matches||du.matchesSelector||du.mozMatchesSelector||du.msMatchesSelector||du.oMatchesSelector||du.webkitMatchesSelector,pu=function(t,e){return uu.call(t,e)};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/class fu{constructor(t){window.ShadyDOM&&window.ShadyDOM.inUse&&window.ShadyDOM.patch(t),this.node=t}observeNodes(t){return new rd(this.node,t)}unobserveNodes(t){t.disconnect()}notifyObserver(){}deepContains(t){if(Dl(this.node).contains(t))return!0;let e=t,n=t.ownerDocument;for(;e&&e!==n&&e!==this.node;)e=Dl(e).parentNode||Dl(e).host;return e===this.node}getOwnerRoot(){return Dl(this.node).getRootNode()}getDistributedNodes(){return"slot"===this.node.localName?Dl(this.node).assignedNodes({flatten:!0}):[]}getDestinationInsertionPoints(){let t=[],e=Dl(this.node).assignedSlot;for(;e;)t.push(e),e=Dl(e).assignedSlot;return t}importNode(t,e){let n=this.node instanceof Document?this.node:this.node.ownerDocument;return Dl(n).importNode(t,e)}getEffectiveChildNodes(){return rd.getFlattenedNodes(this.node)}queryDistributedElements(t){let e=this.getEffectiveChildNodes(),n=[];for(let r,i=0,s=e.length;i<s&&(r=e[i]);i++)r.nodeType===Node.ELEMENT_NODE&&pu(r,t)&&n.push(r);return n}get activeElement(){let t=this.node;return void 0!==t._activeElement?t._activeElement:t.activeElement}}function _u(t,e){for(let n=0;n<e.length;n++){let r=e[n];Object.defineProperty(t,r,{get:function(){return this.node[r]},configurable:!0})}}class mu{constructor(t){this.event=t}get rootTarget(){return this.path[0]}get localTarget(){return this.event.target}get path(){return this.event.composedPath()}}fu.prototype.cloneNode,fu.prototype.appendChild,fu.prototype.insertBefore,fu.prototype.removeChild,fu.prototype.replaceChild,fu.prototype.setAttribute,fu.prototype.removeAttribute,fu.prototype.querySelector,fu.prototype.querySelectorAll,fu.prototype.parentNode,fu.prototype.firstChild,fu.prototype.lastChild,fu.prototype.nextSibling,fu.prototype.previousSibling,fu.prototype.firstElementChild,fu.prototype.lastElementChild,fu.prototype.nextElementSibling,fu.prototype.previousElementSibling,fu.prototype.childNodes,fu.prototype.children,fu.prototype.classList,fu.prototype.textContent,fu.prototype.innerHTML;let gu=fu;if(window.ShadyDOM&&window.ShadyDOM.inUse&&window.ShadyDOM.noPatch&&window.ShadyDOM.Wrapper){class t extends window.ShadyDOM.Wrapper{}Object.getOwnPropertyNames(fu.prototype).forEach(e=>{"activeElement"!=e&&(t.prototype[e]=fu.prototype[e])}),_u(t.prototype,["classList"]),gu=t,Object.defineProperties(mu.prototype,{localTarget:{get(){const t=this.event.currentTarget,e=t&&yu(t).getOwnerRoot(),n=this.path;for(let t=0;t<n.length;t++){const r=n[t];if(yu(r).getOwnerRoot()===e)return r}},configurable:!0},path:{get(){return window.ShadyDOM.composedPath(this.event)},configurable:!0}})}else!function(t,e){for(let n=0;n<e.length;n++){let r=e[n];t[r]=function(){return this.node[r].apply(this.node,arguments)}}}(fu.prototype,["cloneNode","appendChild","insertBefore","removeChild","replaceChild","setAttribute","removeAttribute","querySelector","querySelectorAll"]),_u(fu.prototype,["parentNode","firstChild","lastChild","nextSibling","previousSibling","firstElementChild","lastElementChild","nextElementSibling","previousElementSibling","childNodes","children","classList"]),function(t,e){for(let n=0;n<e.length;n++){let r=e[n];Object.defineProperty(t,r,{get:function(){return this.node[r]},set:function(t){this.node[r]=t},configurable:!0})}}(fu.prototype,["textContent","innerHTML","className"]);const yu=function(t){if((t=t||document)instanceof gu)return t;if(t instanceof mu)return t;let e=t.__domApi;return e||(e=t instanceof Event?new mu(t):new gu(t),t.__domApi=e),e},vu=window.ShadyDOM,bu=window.ShadyCSS;function wu(t,e){return Dl(t).getRootNode()===e}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let xu=window.ShadyCSS;const Cu=zl(t=>{const e=eu(Yh(eh(t))),n={x:"pan-x",y:"pan-y",none:"none",all:"auto"};class r extends e{constructor(){super(),this.isAttached,this.__boundListeners,this._debouncers}static get importMeta(){return this.prototype.importMeta}created(){}connectedCallback(){super.connectedCallback(),this.isAttached=!0,this.attached()}attached(){}disconnectedCallback(){super.disconnectedCallback(),this.isAttached=!1,this.detached()}detached(){}attributeChangedCallback(t,e,n,r){e!==n&&(super.attributeChangedCallback(t,e,n,r),this.attributeChanged(t,e,n))}attributeChanged(t,e,n){}_initializeProperties(){let t=Object.getPrototypeOf(this);t.hasOwnProperty(JSCompiler_renameProperty("__hasRegisterFinished",t))||(this._registered(),t.__hasRegisterFinished=!0),super._initializeProperties(),this.root=this,this.created(),this._applyListeners()}_registered(){}ready(){this._ensureAttributes(),super.ready()}_ensureAttributes(){}_applyListeners(){}serialize(t){return this._serializeValue(t)}deserialize(t,e){return this._deserializeValue(t,e)}reflectPropertyToAttribute(t,e,n){this._propertyToAttribute(t,e,n)}serializeValueToAttribute(t,e,n){this._valueToNodeAttribute(n||this,t,e)}extend(t,e){if(!t||!e)return t||e;let n=Object.getOwnPropertyNames(e);for(let r,i=0;i<n.length&&(r=n[i]);i++){let n=Object.getOwnPropertyDescriptor(e,r);n&&Object.defineProperty(t,r,n)}return t}mixin(t,e){for(let n in e)t[n]=e[n];return t}chainObject(t,e){return t&&e&&t!==e&&(t.__proto__=e),t}instanceTemplate(t){let e=this.constructor._contentForTemplate(t);return document.importNode(e,!0)}fire(t,e,n){n=n||{},e=null===e||void 0===e?{}:e;let r=new Event(t,{bubbles:void 0===n.bubbles||n.bubbles,cancelable:Boolean(n.cancelable),composed:void 0===n.composed||n.composed});r.detail=e;let i=n.node||this;return Dl(i).dispatchEvent(r),r}listen(t,e,n){t=t||this;let r=this.__boundListeners||(this.__boundListeners=new WeakMap),i=r.get(t);i||(i={},r.set(t,i));let s=e+n;i[s]||(i[s]=this._addMethodEventListenerToNode(t,e,n,this))}unlisten(t,e,n){t=t||this;let r=this.__boundListeners&&this.__boundListeners.get(t),i=e+n,s=r&&r[i];s&&(this._removeEventListenerFromNode(t,e,s),r[i]=null)}setScrollDirection(t,e){Bh(e||this,n[t]||"auto")}$$(t){return this.root.querySelector(t)}get domHost(){let t=Dl(this).getRootNode();return t instanceof DocumentFragment?t.host:t}distributeContent(){const t=yu(this);window.ShadyDOM&&t.shadowRoot&&ShadyDOM.flush()}getEffectiveChildNodes(){return yu(this).getEffectiveChildNodes()}queryDistributedElements(t){return yu(this).queryDistributedElements(t)}getEffectiveChildren(){return this.getEffectiveChildNodes().filter(function(t){return t.nodeType===Node.ELEMENT_NODE})}getEffectiveTextContent(){let t=this.getEffectiveChildNodes(),e=[];for(let n,r=0;n=t[r];r++)n.nodeType!==Node.COMMENT_NODE&&e.push(n.textContent);return e.join("")}queryEffectiveChildren(t){let e=this.queryDistributedElements(t);return e&&e[0]}queryAllEffectiveChildren(t){return this.queryDistributedElements(t)}getContentChildNodes(t){let e=this.root.querySelector(t||"slot");return e?yu(e).getDistributedNodes():[]}getContentChildren(t){return this.getContentChildNodes(t).filter(function(t){return t.nodeType===Node.ELEMENT_NODE})}isLightDescendant(t){return this!==t&&Dl(this).contains(t)&&Dl(this).getRootNode()===Dl(t).getRootNode()}isLocalDescendant(t){return this.root===Dl(t).getRootNode()}scopeSubtree(t,e=!1){return function(t,e=!1){if(!vu||!bu)return null;if(!vu.handlesDynamicScoping)return null;const n=bu.ScopingShim;if(!n)return null;const r=n.scopeForNode(t),i=Dl(t).getRootNode(),s=t=>{if(!wu(t,i))return;const e=Array.from(vu.nativeMethods.querySelectorAll.call(t,"*"));e.push(t);for(let t=0;t<e.length;t++){const s=e[t];if(!wu(s,i))continue;const o=n.currentScopeForNode(s);o!==r&&(""!==o&&n.unscopeNode(s,o),n.scopeNode(s,r))}};if(s(t),e){const e=new MutationObserver(t=>{for(let e=0;e<t.length;e++){const n=t[e];for(let t=0;t<n.addedNodes.length;t++){const e=n.addedNodes[t];e.nodeType===Node.ELEMENT_NODE&&s(e)}}});return e.observe(t,{childList:!0,subtree:!0}),e}return null}(t,e)}getComputedStyleValue(t){return xu.getComputedStyleValue(this,t)}debounce(t,e,n){return this._debouncers=this._debouncers||{},this._debouncers[t]=rh.debounce(this._debouncers[t],n>0?nc.after(n):sc,e.bind(this))}isDebouncerActive(t){this._debouncers=this._debouncers||{};let e=this._debouncers[t];return!(!e||!e.isActive())}flushDebouncer(t){this._debouncers=this._debouncers||{};let e=this._debouncers[t];e&&e.flush()}cancelDebouncer(t){this._debouncers=this._debouncers||{};let e=this._debouncers[t];e&&e.cancel()}async(t,e){return e>0?nc.run(t.bind(this),e):~sc.run(t.bind(this))}cancelAsync(t){t<0?sc.cancel(~t):nc.cancel(t)}create(t,e){let n=document.createElement(t);if(e)if(n.setProperties)n.setProperties(e);else for(let t in e)n[t]=e[t];return n}elementMatches(t,e){return pu(e||this,t)}toggleAttribute(t,e){let n=this;return 3===arguments.length&&(n=arguments[2]),1==arguments.length&&(e=!n.hasAttribute(t)),e?(Dl(n).setAttribute(t,""),!0):(Dl(n).removeAttribute(t),!1)}toggleClass(t,e,n){n=n||this,1==arguments.length&&(e=!n.classList.contains(t)),e?n.classList.add(t):n.classList.remove(t)}transform(t,e){(e=e||this).style.webkitTransform=t,e.style.transform=t}translate3d(t,e,n,r){r=r||this,this.transform("translate3d("+t+","+e+","+n+")",r)}arrayDelete(t,e){let n;if(Array.isArray(t)){if((n=t.indexOf(e))>=0)return t.splice(n,1)}else{if((n=jl(this,t).indexOf(e))>=0)return this.splice(t,n,1)}return null}_logger(t,e){switch(Array.isArray(e)&&1===e.length&&Array.isArray(e[0])&&(e=e[0]),t){case"log":case"warn":case"error":console[t](...e)}}_log(...t){this._logger("log",t)}_warn(...t){this._logger("warn",t)}_error(...t){this._logger("error",t)}_logf(t,...e){return["[%s::%s]",this.is,t,...e]}}return r.prototype.is="",r}),Su={attached:!0,detached:!0,ready:!0,created:!0,beforeRegister:!0,registered:!0,attributeChanged:!0,listeners:!0,hostAttributes:!0},Au={attached:!0,detached:!0,ready:!0,created:!0,beforeRegister:!0,registered:!0,attributeChanged:!0,behaviors:!0,_noAccessors:!0},Tu=Object.assign({listeners:!0,hostAttributes:!0,properties:!0,observers:!0},Au);
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/function Pu(t,e,n,r){!function(t,e,n){const r=t._noAccessors,i=Object.getOwnPropertyNames(t);for(let s=0;s<i.length;s++){let o=i[s];if(!(o in n))if(r)e[o]=t[o];else{let n=Object.getOwnPropertyDescriptor(t,o);n&&(n.configurable=!0,Object.defineProperty(e,o,n))}}}(e,t,r);for(let t in Su)e[t]&&(n[t]=n[t]||[],n[t].push(e[t]))}function Eu(t,e){for(const n in e){const r=t[n],i=e[n];t[n]=!("value"in i)&&r&&"value"in r?Object.assign({value:r.value},i):i}}function Iu(t,e,n){let r;const i={};class s extends e{static _finalizeClass(){if(this.hasOwnProperty(JSCompiler_renameProperty("generatedFrom",this))){if(r)for(let t,e=0;e<r.length;e++)(t=r[e]).properties&&this.createProperties(t.properties),t.observers&&this.createObservers(t.observers,t.properties);t.properties&&this.createProperties(t.properties),t.observers&&this.createObservers(t.observers,t.properties),this._prepareTemplate()}else e._finalizeClass.call(this)}static get properties(){const e={};if(r)for(let t=0;t<r.length;t++)Eu(e,r[t].properties);return Eu(e,t.properties),e}static get observers(){let e=[];if(r)for(let t,n=0;n<r.length;n++)(t=r[n]).observers&&(e=e.concat(t.observers));return t.observers&&(e=e.concat(t.observers)),e}created(){super.created();const t=i.created;if(t)for(let e=0;e<t.length;e++)t[e].call(this)}_registered(){const t=s.prototype;if(!t.hasOwnProperty(JSCompiler_renameProperty("__hasRegisterFinished",t))){t.__hasRegisterFinished=!0,super._registered(),il&&o(t);const e=Object.getPrototypeOf(this);let n=i.beforeRegister;if(n)for(let t=0;t<n.length;t++)n[t].call(e);if(n=i.registered)for(let t=0;t<n.length;t++)n[t].call(e)}}_applyListeners(){super._applyListeners();const t=i.listeners;if(t)for(let e=0;e<t.length;e++){const n=t[e];if(n)for(let t in n)this._addMethodEventListenerToNode(this,t,n[t])}}_ensureAttributes(){const t=i.hostAttributes;if(t)for(let e=t.length-1;e>=0;e--){const n=t[e];for(let t in n)this._ensureAttribute(t,n[t])}super._ensureAttributes()}ready(){super.ready();let t=i.ready;if(t)for(let e=0;e<t.length;e++)t[e].call(this)}attached(){super.attached();let t=i.attached;if(t)for(let e=0;e<t.length;e++)t[e].call(this)}detached(){super.detached();let t=i.detached;if(t)for(let e=0;e<t.length;e++)t[e].call(this)}attributeChanged(t,e,n){super.attributeChanged();let r=i.attributeChanged;if(r)for(let i=0;i<r.length;i++)r[i].call(this,t,e,n)}}if(n){Array.isArray(n)||(n=[n]);let t=e.prototype.behaviors;r=function t(e,n,r){n=n||[];for(let i=e.length-1;i>=0;i--){let s=e[i];s?Array.isArray(s)?t(s,n):n.indexOf(s)<0&&(!r||r.indexOf(s)<0)&&n.unshift(s):console.warn("behavior is null, check for missing or 404 import")}return n}(n,null,t),s.prototype.behaviors=t?t.concat(n):r}const o=e=>{r&&function(t,e,n){for(let r=0;r<e.length;r++)Pu(t,e[r],n,Tu)}(e,r,i),Pu(e,t,i,Au)};return il||o(s.prototype),s.generatedFrom=t,s}const Nu=function(t,e){t||console.warn("Polymer.Class requires `info` argument");let n=e?e(Cu(HTMLElement)):Cu(HTMLElement);return(n=Iu(t,n,t.behaviors)).is=n.prototype.is=t.is,n},Mu=function(t){let e;return e="function"==typeof t?t:Mu.Class(t),customElements.define(e.is,e),e};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
function Ou(t,e,n,r,i){let s;i&&(s="object"==typeof n&&null!==n)&&(r=t.__dataTemp[e]);let o=r!==n&&(r==r||n==n);return s&&o&&(t.__dataTemp[e]=n),o}Mu.Class=Nu;const Ru=zl(t=>{return class extends t{_shouldPropertyChange(t,e,n){return Ou(this,t,e,n,!0)}}}),ku=zl(t=>{return class extends t{static get properties(){return{mutableData:Boolean}}_shouldPropertyChange(t,e,n){return Ou(this,t,e,n,this.mutableData)}}});Ru._mutablePropertyChange=Ou;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let zu=null;function Du(){return zu}Du.prototype=Object.create(HTMLTemplateElement.prototype,{constructor:{value:Du,writable:!0}});const Lu=Xc(Du),Fu=Ru(Lu);const Hu=Xc(class{});class Bu extends Hu{constructor(t){super(),this._configureProperties(t),this.root=this._stampTemplate(this.__dataHost);let e=[];this.children=e;for(let t=this.root.firstChild;t;t=t.nextSibling)e.push(t),t.__templatizeInstance=this;this.__templatizeOwner&&this.__templatizeOwner.__hideTemplateChildren__&&this._showHideChildren(!0);let n=this.__templatizeOptions;(t&&n.instanceProps||!n.instanceProps)&&this._enableProperties()}_configureProperties(t){if(this.__templatizeOptions.forwardHostProp)for(let t in this.__hostProps)this._setPendingProperty(t,this.__dataHost["_host_"+t]);for(let e in t)this._setPendingProperty(e,t[e])}forwardHostProp(t,e){this._setPendingPropertyOrPath(t,e,!1,!0)&&this.__dataHost._enqueueClient(this)}_addEventListenerToNode(t,e,n){if(this._methodHost&&this.__templatizeOptions.parentModel)this._methodHost._addEventListenerToNode(t,e,t=>{t.model=this,n(t)});else{let r=this.__dataHost.__dataHost;r&&r._addEventListenerToNode(t,e,n)}}_showHideChildren(t){let e=this.children;for(let n=0;n<e.length;n++){let r=e[n];if(Boolean(t)!=Boolean(r.__hideTemplateChildren__))if(r.nodeType===Node.TEXT_NODE)t?(r.__polymerTextContent__=r.textContent,r.textContent=""):r.textContent=r.__polymerTextContent__;else if("slot"===r.localName)if(t)r.__polymerReplaced__=document.createComment("hidden-slot"),Dl(Dl(r).parentNode).replaceChild(r.__polymerReplaced__,r);else{const t=r.__polymerReplaced__;t&&Dl(Dl(t).parentNode).replaceChild(r,t)}else r.style&&(t?(r.__polymerDisplay__=r.style.display,r.style.display="none"):r.style.display=r.__polymerDisplay__);r.__hideTemplateChildren__=t,r._showHideChildren&&r._showHideChildren(t)}}_setUnmanagedPropertyToNode(t,e,n){t.__hideTemplateChildren__&&t.nodeType==Node.TEXT_NODE&&"textContent"==e?t.__polymerTextContent__=n:super._setUnmanagedPropertyToNode(t,e,n)}get parentModel(){let t=this.__parentModel;if(!t){let e;t=this;do{t=t.__dataHost.__dataHost}while((e=t.__templatizeOptions)&&!e.parentModel);this.__parentModel=t}return t}dispatchEvent(t){return!0}}Bu.prototype.__dataHost,Bu.prototype.__templatizeOptions,Bu.prototype._methodHost,Bu.prototype.__templatizeOwner,Bu.prototype.__hostProps;const Vu=Ru(Bu);function Uu(t){let e=t.__dataHost;return e&&e._methodHost||e}function $u(t,e,n){let r=n.mutableData?Vu:Bu;Yu.mixin&&(r=Yu.mixin(r));let i=class extends r{};return i.prototype.__templatizeOptions=n,i.prototype._bindTemplate(t),function(t,e,n,r){let i=n.hostProps||{};for(let e in r.instanceProps){delete i[e];let n=r.notifyInstanceProp;n&&t.prototype._addPropertyEffect(e,t.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,{fn:Gu(e,n)})}if(r.forwardHostProp&&e.__dataHost)for(let e in i)n.hasHostProps||(n.hasHostProps=!0),t.prototype._addPropertyEffect(e,t.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,{fn:function(t,e,n){t.__dataHost._setPendingPropertyOrPath("_host_"+e,n[e],!0,!0)}})}(i,t,e,n),i}function ju(t,e,n){let r=n.forwardHostProp;if(r&&e.hasHostProps){let i=e.templatizeTemplateClass;if(!i){let t=n.mutableData?Fu:Lu;i=e.templatizeTemplateClass=class extends t{};let s=e.hostProps;for(let t in s)i.prototype._addPropertyEffect("_host_"+t,i.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE,{fn:qu(t,r)}),i.prototype._createNotifyingProperty("_host_"+t)}!function(t,e){zu=t,Object.setPrototypeOf(t,e.prototype),new e,zu=null}(t,i),t.__dataProto&&Object.assign(t.__data,t.__dataProto),t.__dataTemp={},t.__dataPending=null,t.__dataOld=null,t._enableProperties()}}function qu(t,e){return function(t,n,r){e.call(t.__templatizeOwner,n.substring("_host_".length),r[n])}}function Gu(t,e){return function(t,n,r){e.call(t.__templatizeOwner,t,n,r[n])}}function Yu(t,e,n){if(nl&&!Uu(t))throw new Error("strictTemplatePolicy: template owner not trusted");if(n=n||{},t.__templatizeOwner)throw new Error("A <template> can only be templatized once");t.__templatizeOwner=e;let r=(e?e.constructor:Bu)._parseTemplate(t),i=r.templatizeInstanceClass;i||(i=$u(t,r,n),r.templatizeInstanceClass=i),ju(t,r,n);let s=class extends i{};return s.prototype._methodHost=Uu(t),s.prototype.__dataHost=t,s.prototype.__templatizeOwner=e,s.prototype.__hostProps=r.hostProps,s=s}function Wu(t,e){let n;for(;e;)if(n=e.__templatizeInstance){if(n.__dataHost==t)return n;e=n.__dataHost}else e=Dl(e).parentNode;return null}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let Xu=!1;function Ju(){if(il&&!Za){if(!Xu){Xu=!0;const t=document.createElement("style");t.textContent="dom-bind,dom-if,dom-repeat{display:none;}",document.head.appendChild(t)}return!0}return!1}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const Ku=Yh(ku(Xc(HTMLElement)));customElements.define("dom-bind",class extends Ku{static get observedAttributes(){return["mutable-data"]}constructor(){if(super(),nl)throw new Error("strictTemplatePolicy: dom-bind not allowed");this.root=null,this.$=null,this.__children=null}attributeChangedCallback(t,e,n,r){this.mutableData=!0}connectedCallback(){Ju()||(this.style.display="none"),this.render()}disconnectedCallback(){this.__removeChildren()}__insertChildren(){Dl(Dl(this).parentNode).insertBefore(this.root,this)}__removeChildren(){if(this.__children)for(let t=0;t<this.__children.length;t++)this.root.appendChild(this.__children[t])}render(){let t;if(!this.__children){if(!(t=t||this.querySelector("template"))){let e=new MutationObserver(()=>{if(!(t=this.querySelector("template")))throw new Error("dom-bind requires a <template> child");e.disconnect(),this.render()});return void e.observe(this,{childList:!0})}this.root=this._stampTemplate(t),this.$=this.root.$,this.__children=[];for(let t=this.root.firstChild;t;t=t.nextSibling)this.__children[this.__children.length]=t;this._enableProperties()}this.__insertChildren(),this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0}))}});
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
const Zu=ku(nh);class Qu extends Zu{static get is(){return"dom-repeat"}static get template(){return null}static get properties(){return{items:{type:Array},as:{type:String,value:"item"},indexAs:{type:String,value:"index"},itemsIndexAs:{type:String,value:"itemsIndex"},sort:{type:Function,observer:"__sortChanged"},filter:{type:Function,observer:"__filterChanged"},observe:{type:String,observer:"__observeChanged"},delay:Number,renderedItemCount:{type:Number,notify:!0,readOnly:!0},initialCount:{type:Number,observer:"__initializeChunking"},targetFramerate:{type:Number,value:20},_targetFrameTime:{type:Number,computed:"__computeFrameTime(targetFramerate)"}}}static get observers(){return["__itemsChanged(items.*)"]}constructor(){super(),this.__instances=[],this.__limit=1/0,this.__pool=[],this.__renderDebouncer=null,this.__itemsIdxToInstIdx={},this.__chunkCount=null,this.__lastChunkTime=null,this.__sortFn=null,this.__filterFn=null,this.__observePaths=null,this.__ctor=null,this.__isDetached=!0,this.template=null}disconnectedCallback(){super.disconnectedCallback(),this.__isDetached=!0;for(let t=0;t<this.__instances.length;t++)this.__detachInstance(t)}connectedCallback(){if(super.connectedCallback(),Ju()||(this.style.display="none"),this.__isDetached){this.__isDetached=!1;let t=Dl(Dl(this).parentNode);for(let e=0;e<this.__instances.length;e++)this.__attachInstance(e,t)}}__ensureTemplatized(){if(!this.__ctor){let t=this.template=this.querySelector("template");if(!t){let t=new MutationObserver(()=>{if(!this.querySelector("template"))throw new Error("dom-repeat requires a <template> child");t.disconnect(),this.__render()});return t.observe(this,{childList:!0}),!1}let e={};e[this.as]=!0,e[this.indexAs]=!0,e[this.itemsIndexAs]=!0,this.__ctor=Yu(t,this,{mutableData:this.mutableData,parentModel:!0,instanceProps:e,forwardHostProp:function(t,e){let n=this.__instances;for(let r,i=0;i<n.length&&(r=n[i]);i++)r.forwardHostProp(t,e)},notifyInstanceProp:function(t,e,n){if(function(t,e){return t===e||Hl(t,e)||Bl(t,e)}(this.as,e)){let r=t[this.itemsIndexAs];e==this.as&&(this.items[r]=n);let i=Vl(this.as,`${JSCompiler_renameProperty("items",this)}.${r}`,e);this.notifyPath(i,n)}}})}return!0}__getMethodHost(){return this.__dataHost._methodHost||this.__dataHost}__functionFromPropertyValue(t){if("string"==typeof t){let e=t,n=this.__getMethodHost();return function(){return n[e].apply(n,arguments)}}return t}__sortChanged(t){this.__sortFn=this.__functionFromPropertyValue(t),this.items&&this.__debounceRender(this.__render)}__filterChanged(t){this.__filterFn=this.__functionFromPropertyValue(t),this.items&&this.__debounceRender(this.__render)}__computeFrameTime(t){return Math.ceil(1e3/t)}__initializeChunking(){this.initialCount&&(this.__limit=this.initialCount,this.__chunkCount=this.initialCount,this.__lastChunkTime=performance.now())}__tryRenderChunk(){this.items&&this.__limit<this.items.length&&this.__debounceRender(this.__requestRenderChunk)}__requestRenderChunk(){requestAnimationFrame(()=>this.__renderChunk())}__renderChunk(){let t=performance.now(),e=this._targetFrameTime/(t-this.__lastChunkTime);this.__chunkCount=Math.round(this.__chunkCount*e)||1,this.__limit+=this.__chunkCount,this.__lastChunkTime=t,this.__debounceRender(this.__render)}__observeChanged(){this.__observePaths=this.observe&&this.observe.replace(".*",".").split(" ")}__itemsChanged(t){this.items&&!Array.isArray(this.items)&&console.warn("dom-repeat expected array for `items`, found",this.items),this.__handleItemPath(t.path,t.value)||(this.__initializeChunking(),this.__debounceRender(this.__render))}__handleObservedPaths(t){if(this.__sortFn||this.__filterFn)if(t){if(this.__observePaths){let e=this.__observePaths;for(let n=0;n<e.length;n++)0===t.indexOf(e[n])&&this.__debounceRender(this.__render,this.delay)}}else this.__debounceRender(this.__render,this.delay)}__debounceRender(t,e=0){this.__renderDebouncer=rh.debounce(this.__renderDebouncer,e>0?nc.after(e):sc,t.bind(this)),sh(this.__renderDebouncer)}render(){this.__debounceRender(this.__render),hu()}__render(){this.__ensureTemplatized()&&(this.__applyFullRefresh(),this.__pool.length=0,this._setRenderedItemCount(this.__instances.length),this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0})),this.__tryRenderChunk())}__applyFullRefresh(){let t=this.items||[],e=new Array(t.length);for(let n=0;n<t.length;n++)e[n]=n;this.__filterFn&&(e=e.filter((e,n,r)=>this.__filterFn(t[e],n,r))),this.__sortFn&&e.sort((e,n)=>this.__sortFn(t[e],t[n]));const n=this.__itemsIdxToInstIdx={};let r=0;const i=Math.min(e.length,this.__limit);for(;r<i;r++){let i=this.__instances[r],s=e[r],o=t[s];n[s]=r,i?(i._setPendingProperty(this.as,o),i._setPendingProperty(this.indexAs,r),i._setPendingProperty(this.itemsIndexAs,s),i._flushProperties()):this.__insertInstance(o,r,s)}for(let t=this.__instances.length-1;t>=r;t--)this.__detachAndRemoveInstance(t)}__detachInstance(t){let e=this.__instances[t];const n=Dl(e.root);for(let t=0;t<e.children.length;t++){let r=e.children[t];n.appendChild(r)}return e}__attachInstance(t,e){let n=this.__instances[t];e.insertBefore(n.root,this)}__detachAndRemoveInstance(t){let e=this.__detachInstance(t);e&&this.__pool.push(e),this.__instances.splice(t,1)}__stampInstance(t,e,n){let r={};return r[this.as]=t,r[this.indexAs]=e,r[this.itemsIndexAs]=n,new this.__ctor(r)}__insertInstance(t,e,n){let r=this.__pool.pop();r?(r._setPendingProperty(this.as,t),r._setPendingProperty(this.indexAs,e),r._setPendingProperty(this.itemsIndexAs,n),r._flushProperties()):r=this.__stampInstance(t,e,n);let i=this.__instances[e+1],s=i?i.children[0]:this;return Dl(Dl(this).parentNode).insertBefore(r.root,s),this.__instances[e]=r,r}_showHideChildren(t){for(let e=0;e<this.__instances.length;e++)this.__instances[e]._showHideChildren(t)}__handleItemPath(t,e){let n=t.slice(6),r=n.indexOf("."),i=r<0?n:n.substring(0,r);if(i==parseInt(i,10)){let t=r<0?"":n.substring(r+1);this.__handleObservedPaths(t);let s=this.__itemsIdxToInstIdx[i],o=this.__instances[s];if(o){let n=this.as+(t?"."+t:"");o._setPendingPropertyOrPath(n,e,!1,!0),o._flushProperties()}return!0}}itemForElement(t){let e=this.modelForElement(t);return e&&e[this.as]}indexForElement(t){let e=this.modelForElement(t);return e&&e[this.indexAs]}modelForElement(t){return Wu(this.template,t)}}customElements.define(Qu.is,Qu);
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
class tp extends nh{static get is(){return"dom-if"}static get template(){return null}static get properties(){return{if:{type:Boolean,observer:"__debounceRender"},restamp:{type:Boolean,observer:"__debounceRender"}}}constructor(){super(),this.__renderDebouncer=null,this.__invalidProps=null,this.__instance=null,this._lastIf=!1,this.__ctor=null,this.__hideTemplateChildren__=!1}__debounceRender(){this.__renderDebouncer=rh.debounce(this.__renderDebouncer,sc,()=>this.__render()),sh(this.__renderDebouncer)}disconnectedCallback(){super.disconnectedCallback();const t=Dl(this).parentNode;t&&(t.nodeType!=Node.DOCUMENT_FRAGMENT_NODE||Dl(t).host)||this.__teardownInstance()}connectedCallback(){super.connectedCallback(),Ju()||(this.style.display="none"),this.if&&this.__debounceRender()}render(){hu()}__render(){if(this.if){if(!this.__ensureInstance())return;this._showHideChildren()}else this.restamp&&this.__teardownInstance();!this.restamp&&this.__instance&&this._showHideChildren(),this.if!=this._lastIf&&(this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0})),this._lastIf=this.if)}__ensureInstance(){let t=Dl(this).parentNode;if(t){if(!this.__ctor){let t=Dl(this).querySelector("template");if(!t){let t=new MutationObserver(()=>{if(!Dl(this).querySelector("template"))throw new Error("dom-if requires a <template> child");t.disconnect(),this.__render()});return t.observe(this,{childList:!0}),!1}this.__ctor=Yu(t,this,{mutableData:!0,forwardHostProp:function(t,e){this.__instance&&(this.if?this.__instance.forwardHostProp(t,e):(this.__invalidProps=this.__invalidProps||Object.create(null),this.__invalidProps[Fl(t)]=!0))}})}if(this.__instance){this.__syncHostProperties();let e=this.__instance.children;if(e&&e.length){if(Dl(this).previousSibling!==e[e.length-1])for(let n,r=0;r<e.length&&(n=e[r]);r++)Dl(t).insertBefore(n,this)}}else this.__instance=new this.__ctor,Dl(t).insertBefore(this.__instance.root,this)}return!0}__syncHostProperties(){let t=this.__invalidProps;if(t){for(let e in t)this.__instance._setPendingProperty(e,this.__dataHost[e]);this.__invalidProps=null,this.__instance._flushProperties()}}__teardownInstance(){if(this.__instance){let t=this.__instance.children;if(t&&t.length){let e=Dl(t[0]).parentNode;if(e){e=Dl(e);for(let n,r=0;r<t.length&&(n=t[r]);r++)e.removeChild(n)}}this.__instance=null,this.__invalidProps=null}}_showHideChildren(){let t=this.__hideTemplateChildren__||!this.if;this.__instance&&this.__instance._showHideChildren(t)}}customElements.define(tp.is,tp);
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let ep,np=zl(t=>{let e=eh(t);return class extends e{static get properties(){return{items:{type:Array},multi:{type:Boolean,value:!1},selected:{type:Object,notify:!0},selectedItem:{type:Object,notify:!0},toggle:{type:Boolean,value:!1}}}static get observers(){return["__updateSelection(multi, items.*)"]}constructor(){super(),this.__lastItems=null,this.__lastMulti=null,this.__selectedMap=null}__updateSelection(t,e){let n=e.path;if(n==JSCompiler_renameProperty("items",this)){let n=e.base||[],r=this.__lastItems;if(t!==this.__lastMulti&&this.clearSelection(),r){let t=td(n,r);this.__applySplices(t)}this.__lastItems=n,this.__lastMulti=t}else if(e.path==`${JSCompiler_renameProperty("items",this)}.splices`)this.__applySplices(e.value.indexSplices);else{let t=n.slice(`${JSCompiler_renameProperty("items",this)}.`.length),e=parseInt(t,10);t.indexOf(".")<0&&t==e&&this.__deselectChangedIdx(e)}}__applySplices(t){let e=this.__selectedMap;for(let n=0;n<t.length;n++){let r=t[n];e.forEach((t,n)=>{t<r.index||(t>=r.index+r.removed.length?e.set(n,t+r.addedCount-r.removed.length):e.set(n,-1))});for(let t=0;t<r.addedCount;t++){let n=r.index+t;e.has(this.items[n])&&e.set(this.items[n],n)}}this.__updateLinks();let n=0;e.forEach((t,r)=>{t<0?(this.multi?this.splice(JSCompiler_renameProperty("selected",this),n,1):this.selected=this.selectedItem=null,e.delete(r)):n++})}__updateLinks(){if(this.__dataLinkedPaths={},this.multi){let t=0;this.__selectedMap.forEach(e=>{e>=0&&this.linkPaths(`${JSCompiler_renameProperty("items",this)}.${e}`,`${JSCompiler_renameProperty("selected",this)}.${t++}`)})}else this.__selectedMap.forEach(t=>{this.linkPaths(JSCompiler_renameProperty("selected",this),`${JSCompiler_renameProperty("items",this)}.${t}`),this.linkPaths(JSCompiler_renameProperty("selectedItem",this),`${JSCompiler_renameProperty("items",this)}.${t}`)})}clearSelection(){this.__dataLinkedPaths={},this.__selectedMap=new Map,this.selected=this.multi?[]:null,this.selectedItem=null}isSelected(t){return this.__selectedMap.has(t)}isIndexSelected(t){return this.isSelected(this.items[t])}__deselectChangedIdx(t){let e=this.__selectedIndexForItemIndex(t);if(e>=0){let t=0;this.__selectedMap.forEach((n,r)=>{e==t++&&this.deselect(r)})}}__selectedIndexForItemIndex(t){let e=this.__dataLinkedPaths[`${JSCompiler_renameProperty("items",this)}.${t}`];if(e)return parseInt(e.slice(`${JSCompiler_renameProperty("selected",this)}.`.length),10)}deselect(t){let e=this.__selectedMap.get(t);if(e>=0){let n;this.__selectedMap.delete(t),this.multi&&(n=this.__selectedIndexForItemIndex(e)),this.__updateLinks(),this.multi?this.splice(JSCompiler_renameProperty("selected",this),n,1):this.selected=this.selectedItem=null}}deselectIndex(t){this.deselect(this.items[t])}select(t){this.selectIndex(this.items.indexOf(t))}selectIndex(t){let e=this.items[t];this.isSelected(e)?this.toggle&&this.deselectIndex(t):(this.multi||this.__selectedMap.clear(),this.__selectedMap.set(e,t),this.__updateLinks(),this.multi?this.push(JSCompiler_renameProperty("selected",this),e):this.selected=this.selectedItem=e)}}})(nh);class rp extends np{static get is(){return"array-selector"}static get template(){return null}}customElements.define(rp.is,rp),ep=Ru._mutablePropertyChange;Boolean;const ip=Cu(HTMLElement).prototype;
/**
@license
Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/
var sp=new Set;const op={properties:{_parentResizable:{type:Object,observer:"_parentResizableChanged"},_notifyingDescendant:{type:Boolean,value:!1}},listeners:{"iron-request-resize-notifications":"_onIronRequestResizeNotifications"},created:function(){this._interestedResizables=[],this._boundNotifyResize=this.notifyResize.bind(this),this._boundOnDescendantIronResize=this._onDescendantIronResize.bind(this)},attached:function(){this._requestResizeNotifications()},detached:function(){this._parentResizable?this._parentResizable.stopResizeNotificationsFor(this):(sp.delete(this),window.removeEventListener("resize",this._boundNotifyResize)),this._parentResizable=null},notifyResize:function(){this.isAttached&&(this._interestedResizables.forEach(function(t){this.resizerShouldNotify(t)&&this._notifyDescendant(t)},this),this._fireResize())},assignParentResizable:function(t){this._parentResizable&&this._parentResizable.stopResizeNotificationsFor(this),this._parentResizable=t,t&&-1===t._interestedResizables.indexOf(this)&&(t._interestedResizables.push(this),t._subscribeIronResize(this))},stopResizeNotificationsFor:function(t){var e=this._interestedResizables.indexOf(t);e>-1&&(this._interestedResizables.splice(e,1),this._unsubscribeIronResize(t))},_subscribeIronResize:function(t){t.addEventListener("iron-resize",this._boundOnDescendantIronResize)},_unsubscribeIronResize:function(t){t.removeEventListener("iron-resize",this._boundOnDescendantIronResize)},resizerShouldNotify:function(t){return!0},_onDescendantIronResize:function(t){this._notifyingDescendant?t.stopPropagation():Za||this._fireResize()},_fireResize:function(){this.fire("iron-resize",null,{node:this,bubbles:!1})},_onIronRequestResizeNotifications:function(t){var e=yu(t).rootTarget;e!==this&&(e.assignParentResizable(this),this._notifyDescendant(e),t.stopPropagation())},_parentResizableChanged:function(t){t&&window.removeEventListener("resize",this._boundNotifyResize)},_notifyDescendant:function(t){this.isAttached&&(this._notifyingDescendant=!0,t.notifyResize(),this._notifyingDescendant=!1)},_requestResizeNotifications:function(){if(this.isAttached)if("loading"===document.readyState){var t=this._requestResizeNotifications.bind(this);document.addEventListener("readystatechange",function e(){document.removeEventListener("readystatechange",e),t()})}else this._findParent(),this._parentResizable?this._parentResizable._interestedResizables.forEach(function(t){t!==this&&t._findParent()},this):(sp.forEach(function(t){t!==this&&t._findParent()},this),window.addEventListener("resize",this._boundNotifyResize),this.notifyResize())},_findParent:function(){this.assignParentResizable(null),this.fire("iron-request-resize-notifications",null,{node:this,bubbles:!0,cancelable:!0}),this._parentResizable?sp.delete(this):sp.add(this)}},ap=t=>(class extends t{static get properties(){return{theme:{type:String,readOnly:!0}}}attributeChangedCallback(t,e,n){super.attributeChangedCallback(t,e,n),"theme"===t&&this._setTheme(n)}}),lp=t=>(class extends(ap(t)){static finalize(){super.finalize();const t=this.prototype._template,e=this.template&&this.template.parentElement&&this.template.parentElement.id===this.is,n=Object.getPrototypeOf(this.prototype)._template;n&&!e&&Array.from(n.content.querySelectorAll("style[include]")).forEach(e=>{this._includeStyle(e.getAttribute("include"),t)}),this._includeMatchingThemes(t)}static _includeMatchingThemes(t){const e=dl.prototype.modules;let n=!1;const r=this.is+"-default-theme";Object.keys(e).sort((t,e)=>{const n=0===t.indexOf("vaadin-"),r=0===e.indexOf("vaadin-"),i=["lumo-","material-"],s=i.filter(e=>0===t.indexOf(e)).length>0,o=i.filter(t=>0===e.indexOf(t)).length>0;return n!==r?n?-1:1:s!==o?s?-1:1:0}).forEach(i=>{if(i!==r){const r=e[i].getAttribute("theme-for");r&&r.split(" ").forEach(e=>{new RegExp("^"+e.split("*").join(".*")+"$").test(this.is)&&(n=!0,this._includeStyle(i,t))})}}),!n&&e[r]&&this._includeStyle(r,t)}static _includeStyle(t,e){if(e&&!e.content.querySelector(`style[include="${t}"]`)){const n=document.createElement("style");n.setAttribute("include",t),e.content.appendChild(n)}}}),cp=/\/\*\*\s+vaadin-dev-mode:start([\s\S]*)vaadin-dev-mode:end\s+\*\*\//i,hp=window.Vaadin&&window.Vaadin.Flow&&window.Vaadin.Flow.clients;function dp(t,e){if("function"!=typeof t)return;const n=cp.exec(t.toString());if(n)try{t=new Function(n[1])}catch(t){console.log("vaadin-development-mode-detector: uncommentAndRun() failed",t)}return t(e)}window.Vaadin=window.Vaadin||{};const up=function(t,e){if(window.Vaadin.developmentMode)return dp(t,e)};function pp(){}void 0===window.Vaadin.developmentMode&&(window.Vaadin.developmentMode=function(){try{return!!localStorage.getItem("vaadin.developmentmode.force")||["localhost","127.0.0.1"].indexOf(window.location.hostname)>=0&&(hp?!function(){if(hp){const t=Object.keys(hp).map(t=>hp[t]).filter(t=>t.productionMode);if(t.length>0)return!0}return!1}():!dp(function(){return!0}))}catch(t){return!1}}());const fp=function(){return up(pp)};let _p;window.Vaadin||(window.Vaadin={}),window.Vaadin.registrations=window.Vaadin.registrations||[],window.Vaadin.developmentModeCallback=window.Vaadin.developmentModeCallback||{},window.Vaadin.developmentModeCallback["vaadin-usage-statistics"]=function(){fp&&fp()};const mp=new Set,gp=t=>(class extends t{static finalize(){super.finalize();const{is:t}=this;t&&!mp.has(t)&&(window.Vaadin.registrations.push(this),mp.add(t),window.Vaadin.developmentModeCallback&&(_p=rh.debounce(_p,ic,()=>{window.Vaadin.developmentModeCallback["vaadin-usage-statistics"]()}),sh(_p)))}constructor(){super(),null===document.doctype&&console.warn('Vaadin components require the "standards mode" declaration. Please add <!DOCTYPE html> to the HTML document.')}});
/**
@license
Copyright (c) 2016 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/
class yp extends(gp(lp(Yh(function(t,e){return Iu({},Cu(e),t)}([op],nh))))){static get template(){return Ml`
    <style>
      :host {
        display: flex;
        overflow: hidden !important;
        transform: translateZ(0);
      }

      :host([hidden]) {
        display: none !important;
      }

      :host([orientation="vertical"]) {
        flex-direction: column;
      }

      :host ::slotted(*) {
        flex: 1 1 auto;
        overflow: auto;
        -webkit-overflow-scrolling: touch;
      }

      [part="splitter"] {
        flex: none;
        position: relative;
        z-index: 1;
        overflow: visible;
        min-width: 8px;
        min-height: 8px;
      }

      :host(:not([orientation="vertical"])) > [part="splitter"] {
        cursor: ew-resize;
      }

      :host([orientation="vertical"]) > [part="splitter"] {
        cursor: ns-resize;
      }

      [part="handle"] {
        width: 40px;
        height: 40px;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate3d(-50%, -50%, 0);
      }
    </style>
    <slot id="primary" name="primary"></slot>
    <div part="splitter" id="splitter" on-track="_onHandleTrack" on-down="_setPointerEventsNone" on-up="_restorePointerEvents">
      <div part="handle"></div>
    </div>
    <slot id="secondary" name="secondary"></slot>

    <div hidden="">
      <!-- Workaround to fix a Shady style scoping issue caused by dynamic slot naming of the child elements (primary/secondary) -->
      <slot></slot>
    </div>
`}static get is(){return"vaadin-split-layout"}static get version(){return"4.1.1"}static get properties(){return{orientation:{type:String,reflectToAttribute:!0,value:"horizontal"},_previousPrimaryPointerEvents:String,_previousSecondaryPointerEvents:String}}ready(){super.ready(),new rd(this,this._processChildren)}_processChildren(){this.getEffectiveChildren().forEach((t,e)=>{0===e?(this._primaryChild=t,t.setAttribute("slot","primary")):1==e?(this._secondaryChild=t,t.setAttribute("slot","secondary")):t.removeAttribute("slot")})}_setFlexBasis(t,e,n){0===(e=Math.max(0,Math.min(e,n)))&&(e=1e-6),t.style.flex="1 1 "+e+"px"}_setPointerEventsNone(t){this._primaryChild&&this._secondaryChild&&(this._previousPrimaryPointerEvents=this._primaryChild.style.pointerEvents,this._previousSecondaryPointerEvents=this._secondaryChild.style.pointerEvents,this._primaryChild.style.pointerEvents="none",this._secondaryChild.style.pointerEvents="none",t.preventDefault())}_restorePointerEvents(){this._primaryChild&&this._secondaryChild&&(this._primaryChild.style.pointerEvents=this._previousPrimaryPointerEvents,this._secondaryChild.style.pointerEvents=this._previousSecondaryPointerEvents)}_onHandleTrack(t){if(this._primaryChild&&this._secondaryChild){var e="vertical"===this.orientation?"height":"width";if("start"!==t.detail.state){var n="vertical"===this.orientation?t.detail.dy:t.detail.dx;this._setFlexBasis(this._primaryChild,this._startSize.primary+n,this._startSize.container),this._setFlexBasis(this._secondaryChild,this._startSize.secondary-n,this._startSize.container),this.notifyResize(),"end"===t.detail.state&&(this.dispatchEvent(new CustomEvent("splitter-dragend")),delete this._startSize)}else this._startSize={container:this.getBoundingClientRect()[e]-this.$.splitter.getBoundingClientRect()[e],primary:this._primaryChild.getBoundingClientRect()[e],secondary:this._secondaryChild.getBoundingClientRect()[e]}}}}customElements.define(yp.is,yp);const vp=document.createElement("template");vp.innerHTML='<custom-style>\n  <style>\n    @font-face {\n      font-family: \'lumo-icons\';\n      src: url(data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAABEgAAsAAAAAIiwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAADsAAABUIIslek9TLzIAAAFEAAAAQwAAAFZAIUuKY21hcAAAAYgAAAD4AAADrsCU8d5nbHlmAAACgAAAC2MAABd4h9To2WhlYWQAAA3kAAAAMQAAADYSnCkuaGhlYQAADhgAAAAdAAAAJAbpA35obXR4AAAOOAAAABAAAACspBAAAGxvY2EAAA5IAAAAWAAAAFh55IAsbWF4cAAADqAAAAAfAAAAIAFKAXBuYW1lAAAOwAAAATEAAAIuUUJZCHBvc3QAAA/0AAABKwAAAelm8SzVeJxjYGRgYOBiMGCwY2BycfMJYeDLSSzJY5BiYGGAAJA8MpsxJzM9kYEDxgPKsYBpDiBmg4gCACY7BUgAeJxjYGS+yDiBgZWBgamKaQ8DA0MPhGZ8wGDIyAQUZWBlZsAKAtJcUxgcXjG+0mIO+p/FEMUcxDANKMwIkgMABn8MLQB4nO3SWW6DMABF0UtwCEnIPM/zhLK8LqhfXRybSP14XUYtHV9hGYQwQBNIo3cUIPkhQeM7rib1ekqnXg981XuC1qvy84lzojleh3puxL0hPjGjRU473teloEefAUNGjJkwZcacBUtWrNmwZceeA0dOnLlw5cadB09elPGhGf+j0NTI/65KfXerT6JhqKnpRKtgOpuqaTrtKjPUlqHmhto21I7pL6i6hlqY3q7qGWrfUAeGOjTUkaGODXViqFNDnRnq3FAXhro01JWhrg11Y6hbQ90Z6t5QD4Z6NNSToZ4N9WKoV0O9GerdUB+G+jTUl6GWRvkL24BkEXictVh9bFvVFb/nxvbz+7Rf/N6zHcd2bCfP+Wgc1Z9N0jpNnEL6kbRVS6HA2hQYGh9TGR1CbCqa2rXrWOkQE/sHNJgmtZvoVNZqE1B1DNHxzTQxCehUTYiJTQyENui0qSLezr3PduyQfgmRWOfde8+9551z7rnn/O4jLoJ/bRP0UaKQMLFJjpBAvphLZC3Dk0ok7WBzR2/upJs7Ryw/nfFbln/uuN/apCvwrKLrSvUqRufbm5pn0fs0w4gYxnGVP6qHnO4bWiDQGQgwtS6lm3lB3QoX1M2vwEmuzirF39y+Es2+DJ8d1pkyqBIqoze3D1+Zz4DrFoazxI8dWwMrDlZ2DMqQAR9AROsJU+2cmlTPazTco52F1xTa2a2+K8vvq92dVHmtLoPeQX/AZPRYGthDYOeZjBjKoFsVGulR3lWU95WeCK44qHU7MhWUGUKZDT3oKUcG2GWuh+EDDfUYA/jhAhl0TOsJNYSEu7mQmi3UzfXwZKA4BsVsHLXQYGgRW95uEtpJ1Vfn9XiLriRBlFEqxsDjA09yCNUoQxxwd7KWSTt2y3GTKiflqHRSoWZc3m11Wa/fJdFgXD4sSYfleJBKd8GMz7J8dZn/cGRCcKGDnA2Ge3fKzcvlnTDNthGWLXzX/WaXtUAmRgeLlHSr30r0G9UTXMb0AtmwzOoy73fkSlHZkduw/TYuU9cAD4YutPoxTTsA3797wVr4Z/1NC5zARHr4vtxJjxIfiZMhMkbWk+14BnJZKwqGZwDfswLyxWDSg11rFLJF7Nopxjd1h1/QOT+oezgfu3Yq+Hk+duf5x+40o1GTkaIgikK/IEnC6aYxCUBaZJSN4XTYFjU/YMNIKqJwhDGOCCI8FDXnXmXjtGhGJyShqjAOnBOkW2JG9S7GgYeMWAU5JzhnWmBOaOM+CKEPoqSfFDC2Unq+DLlUgUVUFFLZGJg6jtlojsdsa8kPObPuJdi5dnBdBsLJMGTWDa4t2JvtwuPo9s+Y86suv/W33QG1rAaOAUV+vx4K6f2D04PVKlC7WLSrZzAi45ZV6lIC7WoXqmRyvUqoVwrzUoVsIjeTXWQv+RH5GTlBXiB/In8ln0IbBCAFOajAJrgZYyOHWqOfUe/aHjI12R6OQo1jCgt215l+4f6XPb+0MNou0V+43n2F77tSfRb24d7zitgnKmvYHs69zugaPvBwv6ioXkb2LdL65Atw51uLkXlu1bhMMRcXSPcYoqKIRlh34lQP8/5JbuUFye4vxD6/6MxFF11C0uVLr9Ulgw44tS3pMViNLUExbycFgLIct+QDMibRimx1ydUz8FXZiuOIDBOMVX2nUZc+huNE5XUJ81uiJoiabwqaVF0uacKbau/pl4R2VW0XXlJra6boVrYG646TF5NYzwy4vjENVrDlcNpZPl8DH6XX8XWCx0mvWVZY6KFLrvsY66/zPict5FnxaNUR/juvZCM3TvD60E2W1tZizbXTPDuabcm0nbbzpWKpmA1ayBQ8giedLUM+A0kNjBjQjmuYz7YrgIXYvmF63ZLBwSXrpn9Tb9wwdd/U1H0PMQK3XcO8ul3WT7PyPPdpy0TemKxNRcJNauiXJnnUDpUppQWs4SnUIy0EESGYqJYQLGHxzaGWwVIaS6Y7mQFM8ZjYDQ3axjf61SWjU33JwOZA1pwaG1L9mzf71aHRdX1JHw6Fp0aXhNwbqyeGNg4NbdzGCBxoz4ZXjy4Nu69Zr6sDY6vMrLU5nA1P8JkbdWXJ6ERfMryvNh1JfQ9+T4dIhGvK9w3dxjBBzatsQ/MlOHVIDnYpDz6odAXlQ01t2Pa5Iafd8MMpxAeDKP0C6CjgVLT5osB6icUx01lWjXxzT/GyRF2welEM5Z/7jG3VjQ1SrNn5IbyzOG5dobB3/QHxyZvsXcoz8IoEwS7plCg+zxHQk424q9BfEpkESJbFHQusDBSWFkuBkoPO0kLKwRVYjxGXlHTcTDQMJ/H6TX9afkO7mnraTO1feTnZAXLu4cp7HAXMmNG1yeFk9TgS/NHhZR/4QoBTr/ZB+6hCgyl15Nq1UbN6nE1/ZnP1U2cizCBpvs8cJQZJ4LkYx5N/yZPAUZNQQ0V4f3BQllWrK3YRzl30dOT6RVn2upNur6woSa8CqpdT/aKnBM4o3jNur9d9xqtUT6veBEt9Ca9at+ERzEEhUkR8sa5mQ4aVvJoVeEA8zI4ei5mULXFGyU7z/6TAeYLVcpzSWZY8PYYF5yrTV60sT0+XV141vX++Wf16V2bFeGVPZXxFpkvyeKTWLlzfW0mnKxsY6Y3294/0998SCfX1blm5pbcvFGlq/r07MRAMhYIDiW5JFKWW3vdrEpCsZSJG+om7Zu/PSScZJhNkLbmW5Wsr12pWqW5zKtlwRS4bFOxUw17mCzy6lskCDl1WYOGWDYrADrMA7BDDweWWNd5koiJnR1dz+ytLP2q0SqPB1lnK2ccB7RYe4FSoPks3iB3t4txTSHctb2sy1ivk0pvHuCNm6w1f6wxv3+OCgN78LqdQnUVh7R0oTAp0zOf2rbW770Vu5C2dIyGdTnHo8zSji7dppj0USoVCz+lhRMTh53Teq9VbGfbjuSbAooSdXayY4PYHg374C6f7gl1B/DXuJ4/QXxOBdJFJspFsI3egpoWUUCjlTIFnNYNl+ZyZKmBeYKGHkD1QyDlhaKbKwKcIJqJ4TLJ2OmdY/JWXae4DdGBw8HZ7eXcgFF2zr2SoalDry5iKqoa0Puhe3hPQ2s3elTYM+MI+n3rK0KgL7/La3GeMLt6m7u912vGnvtORiIa0qBmhqVi+XW9XNBmqb8eVgKzIHfGI5bNoG7X0UCzeISmqIcO/nY8FH7U8avX9fx/ST+hx0sezPw9Qy8Mum3GWf2N4Uy/yIYGVBXbJHWIZp7dfTcptdMTr9Qmq7DaiK/ukqCL4kt4RUfS5XPnMtmT22/mQFqF7emSqtrlu8SVElxDRJrZODkpuwe0VfTfjdEp1f7A7v+fozNBXUJ/6WTuK2TtFlpFVZAZ3LcFvUi1Z2p2YT+EMAkGJVStOzLTAPg4IqWIAlzRSjOBkl2zxj3TKycpzT/MnvX3uaSMWM+gU0rkXjohhefVRMaps3/kLMSKv23lT23uxQrkQjyOJleMDsdhAnD6ZGElWZ5MjCXzCE/hkWX+WF4knzGhVOyK2eQZekV3eyo0zL8kuYWCnDCvjjhAkcTPOBDXVdoav3HVcFnQjLvtV9S2p0zA6JegPwMQxt+yFb3ll9zGlq/5dRKb3cEyQYoaNYpharJ7xCB7AWxsLY3jjZXY0XsZj0Wjwc9I6PP/dKABnCZaqHpaZEACxk4ZeLZSKNgZABl+lYQX1sJQOSX3n6r410evcoud5JeAGUXVP9H1tZOKejTq4Ono0z0erro1FrnOpohva1d/hTdtVsQdKN5W9RlT3NjD0nznyKNTgKAMfWNWcyodV0IGLPIHOF0o4JyqufaK4z6WIIzuGh3d8c8cwQg8ER+OVxyrjdm8vNuhts4LoOihGxIMuUdgzwiYN7xhh1+oZnJNuTG7gQZvu4XWZ9GAZZjGEubwePqYhtKDTH+9VQkl17/iGybsnJ+8+sKtyPrcll9ty65Zsdst/9iqpEKh7M5VdBxh3csOdNc6tW3I1uyM1PzOXegSOrLFsFNI2O27M+TF2ApnN9MUv5ud6LjxIvEQnHRzxIu4IsA9MLFkJn2tcZoZ7ON7dXe7ujrc8HrusPKamlqXwd77lQUuLpilau4PUMapueBb7irU4RoUXEYXuVuIGlRGmOp+2lNkaRPVziOqmlaZvaqG4dFgSj0jxEJWrv12IUWntmw+rfQarRE0Aph4ocI6nlUlGqs+u3/+T/ethW62PpHp2eHbZstnh/wOO95yDAHicY2BkYGAAYi2NOJ94fpuvDNzML4AiDNc/fzqEoP+/Zp7KdAvI5WBgAokCAGkcDfgAAAB4nGNgZGBgDvqfBSRfMAAB81QGRgZUoA0AVvYDbwAAAHicY2BgYGB+MTQwAM8EJo8AAAAAAE4AmgDoAQoBLAFOAXABmgHEAe4CGgKcAugEmgS8BNYE8gUOBSoFegXQBf4GRAZmBrYHGAeQCBgIUghqCP4JRgm+CdoKBAo8CoIKuArwC1ALlgu8eJxjYGRgYNBmTGEQZQABJiDmAkIGhv9gPgMAGJQBvAB4nG2RPU7DMBiG3/QP0UoIBGJh8QILavozdmRo9w7d09RpUzlx5LgVvQMn4BAcgoEzcAgOwVvzSZVQbcnf48fvFysJgGt8IcJxROiG9TgauODuj5ukG+EW+UG4jR4ehTv0Q+EunjER7uEWmk+IWpc0d3gVbuAKb8JN+nfhFvlDuI17fAp36L+Fu1jgR7iHp+jF7Arbz1Nb1nO93pnEncSJFtrVuS3VKB6e5EyX2iVer9TyoOr9eux9pjJnCzW1pdfGWFU5u9WpjzfeV5PBIBMfp7aAwQ4FLPrIkbKWqDHn+67pDRK4s4lzbsEux5qHvcIIMb/nueSMyTKkE3jWFdNLHLjW2PPmMa1Hxn3GjGW/wjT0HtOG09JU4WxLk9LH2ISuiv9twJn9y8fh9uIXI+BknAAAAHicbY7ZboMwEEW5CVBCSLrv+76kfJRjTwHFsdGAG+Xvy5JUfehIHp0rnxmNN/D6ir3/a4YBhvARIMQOIowQY4wEE0yxiz3s4wCHOMIxTnCKM5zjApe4wjVucIs73OMBj3jCM17wije84wMzfHqJ0EVmUkmmJo77oOmrHvfIRZbXsTCZplTZldlgb3TYGVHProwFs11t1A57tcON2rErR3PBqcwF1/6ctI6k0GSU4JHMSS6WghdJQ99sTbfuN7QLJ9vQ37dNrgyktnIxlDYLJNuqitpRbYWKFNuyDT6pog6oOYKHtKakeakqKjHXpPwlGRcsC+OqxLIiJpXqoqqDMreG2l5bv9Ri3TRX+c23DZna9WFFgmXuO6Ps1Jm/w6ErW8N3FbHn/QC444j0AA==) format(\'woff\');\n      font-weight: normal;\n      font-style: normal;\n    }\n\n    html {\n      --lumo-icons-align-center: "\\ea01";\n      --lumo-icons-align-left: "\\ea02";\n      --lumo-icons-align-right: "\\ea03";\n      --lumo-icons-angle-down: "\\ea04";\n      --lumo-icons-angle-left: "\\ea05";\n      --lumo-icons-angle-right: "\\ea06";\n      --lumo-icons-angle-up: "\\ea07";\n      --lumo-icons-arrow-down: "\\ea08";\n      --lumo-icons-arrow-left: "\\ea09";\n      --lumo-icons-arrow-right: "\\ea0a";\n      --lumo-icons-arrow-up: "\\ea0b";\n      --lumo-icons-bar-chart: "\\ea0c";\n      --lumo-icons-bell: "\\ea0d";\n      --lumo-icons-calendar: "\\ea0e";\n      --lumo-icons-checkmark: "\\ea0f";\n      --lumo-icons-chevron-down: "\\ea10";\n      --lumo-icons-chevron-left: "\\ea11";\n      --lumo-icons-chevron-right: "\\ea12";\n      --lumo-icons-chevron-up: "\\ea13";\n      --lumo-icons-clock: "\\ea14";\n      --lumo-icons-cog: "\\ea15";\n      --lumo-icons-cross: "\\ea16";\n      --lumo-icons-download: "\\ea17";\n      --lumo-icons-dropdown: "\\ea18";\n      --lumo-icons-edit: "\\ea19";\n      --lumo-icons-error: "\\ea1a";\n      --lumo-icons-eye: "\\ea1b";\n      --lumo-icons-eye-disabled: "\\ea1c";\n      --lumo-icons-menu: "\\ea1d";\n      --lumo-icons-minus: "\\ea1e";\n      --lumo-icons-ordered-list: "\\ea1f";\n      --lumo-icons-phone: "\\ea20";\n      --lumo-icons-photo: "\\ea21";\n      --lumo-icons-play: "\\ea22";\n      --lumo-icons-plus: "\\ea23";\n      --lumo-icons-redo: "\\ea24";\n      --lumo-icons-reload: "\\ea25";\n      --lumo-icons-search: "\\ea26";\n      --lumo-icons-undo: "\\ea27";\n      --lumo-icons-unordered-list: "\\ea28";\n      --lumo-icons-upload: "\\ea29";\n      --lumo-icons-user: "\\ea2a";\n    }\n  </style>\n</custom-style>',document.head.appendChild(vp.content);const bp=document.createElement("template");bp.innerHTML='<custom-style>\n  <style>\n    html {\n      /* Font families */\n      --lumo-font-family: -apple-system, BlinkMacSystemFont, "Roboto", "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n\n      /* Font sizes */\n      --lumo-font-size-xxs: .75rem;\n      --lumo-font-size-xs: .8125rem;\n      --lumo-font-size-s: .875rem;\n      --lumo-font-size-m: 1rem;\n      --lumo-font-size-l: 1.125rem;\n      --lumo-font-size-xl: 1.375rem;\n      --lumo-font-size-xxl: 1.75rem;\n      --lumo-font-size-xxxl: 2.5rem;\n\n      /* Line heights */\n      --lumo-line-height-xs: 1.25;\n      --lumo-line-height-s: 1.375;\n      --lumo-line-height-m: 1.625;\n    }\n\n  </style>\n</custom-style><dom-module id="lumo-typography">\n  <template>\n    <style>\n      html {\n        font-family: var(--lumo-font-family);\n        font-size: var(--lumo-font-size, var(--lumo-font-size-m));\n        line-height: var(--lumo-line-height-m);\n        -webkit-text-size-adjust: 100%;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n      }\n\n      /* Can’t combine with the above selector because that doesn’t work in browsers without native shadow dom */\n      :host {\n        font-family: var(--lumo-font-family);\n        font-size: var(--lumo-font-size, var(--lumo-font-size-m));\n        line-height: var(--lumo-line-height-m);\n        -webkit-text-size-adjust: 100%;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n      }\n\n      small,\n      [theme~="font-size-s"] {\n        font-size: var(--lumo-font-size-s);\n        line-height: var(--lumo-line-height-s);\n      }\n\n      [theme~="font-size-xs"] {\n        font-size: var(--lumo-font-size-xs);\n        line-height: var(--lumo-line-height-xs);\n      }\n\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6 {\n        font-weight: 600;\n        line-height: var(--lumo-line-height-xs);\n        margin-top: 1.25em;\n      }\n\n      h1 {\n        font-size: var(--lumo-font-size-xxxl);\n        margin-bottom: 0.75em;\n      }\n\n      h2 {\n        font-size: var(--lumo-font-size-xxl);\n        margin-bottom: 0.5em;\n      }\n\n      h3 {\n        font-size: var(--lumo-font-size-xl);\n        margin-bottom: 0.5em;\n      }\n\n      h4 {\n        font-size: var(--lumo-font-size-l);\n        margin-bottom: 0.5em;\n      }\n\n      h5 {\n        font-size: var(--lumo-font-size-m);\n        margin-bottom: 0.25em;\n      }\n\n      h6 {\n        font-size: var(--lumo-font-size-xs);\n        margin-bottom: 0;\n        text-transform: uppercase;\n        letter-spacing: 0.03em;\n      }\n\n      p,\n      blockquote {\n        margin-top: 0.5em;\n        margin-bottom: 0.75em;\n      }\n\n      a {\n        text-decoration: none;\n      }\n\n      a:hover {\n        text-decoration: underline;\n      }\n\n      hr {\n        display: block;\n        align-self: stretch;\n        height: 1px;\n        border: 0;\n        padding: 0;\n        margin: var(--lumo-space-s) calc(var(--lumo-border-radius-m) / 2);\n        background-color: var(--lumo-contrast-10pct);\n      }\n\n      blockquote {\n        border-left: 2px solid var(--lumo-contrast-30pct);\n      }\n\n      b,\n      strong {\n        font-weight: 600;\n      }\n    </style>\n  </template>\n</dom-module>',document.head.appendChild(bp.content);const wp=Ml`<dom-module id="lumo-checkbox" theme-for="vaadin-checkbox">
  <template>
    <style include="lumo-checkbox-style lumo-checkbox-effects">
      /* IE11 only */
      ::-ms-backdrop,
      [part="checkbox"] {
        line-height: 1;
      }
    </style>
  </template>
</dom-module><dom-module id="lumo-checkbox-style">
  <template>
    <style>
      :host {
        -webkit-tap-highlight-color: transparent;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        cursor: default;
        outline: none;
      }

      [part="label"]:not([empty]) {
        margin: 0.1875em 0.875em 0.1875em 0.375em;
      }

      [part="checkbox"] {
        width: calc(1em + 2px);
        height: calc(1em + 2px);
        margin: 0.1875em;
        position: relative;
        border-radius: var(--lumo-border-radius);
        background-color: var(--lumo-contrast-20pct);
        transition: transform 0.2s cubic-bezier(.12, .32, .54, 2), background-color 0.15s;
        pointer-events: none;
        line-height: 1.2;
      }

      :host([indeterminate]) [part="checkbox"],
      :host([checked]) [part="checkbox"] {
        background-color: var(--lumo-primary-color);
      }

      /* Needed to align the checkbox nicely on the baseline */
      [part="checkbox"]::before {
        content: "\\2003";
      }

      /* Checkmark */
      [part="checkbox"]::after {
        content: "";
        display: inline-block;
        width: 0;
        height: 0;
        border: 0 solid var(--lumo-primary-contrast-color);
        border-width: 0.1875em 0 0 0.1875em;
        box-sizing: border-box;
        transform-origin: 0 0;
        position: absolute;
        top: 0.8125em;
        left: 0.5em;
        transform: scale(0.55) rotate(-135deg);
        opacity: 0;
      }

      :host([checked]) [part="checkbox"]::after {
        opacity: 1;
        width: 0.625em;
        height: 1.0625em;
      }

      /* Indeterminate checkmark */

      :host([indeterminate]) [part="checkbox"]::after {
        transform: none;
        opacity: 1;
        top: 45%;
        height: 10%;
        left: 22%;
        right: 22%;
        width: auto;
        border: 0;
        background-color: var(--lumo-primary-contrast-color);
        transition: opacity 0.25s;
      }

      /* Focus ring */

      :host([focus-ring]) [part="checkbox"] {
        box-shadow: 0 0 0 3px var(--lumo-primary-color-50pct);
      }

      /* Disabled */

      :host([disabled]) {
        pointer-events: none;
        color: var(--lumo-disabled-text-color);
      }

      :host([disabled]) [part="label"] ::slotted(*) {
        color: inherit;
      }

      :host([disabled]) [part="checkbox"] {
        background-color: var(--lumo-contrast-10pct);
      }

      :host([disabled]) [part="checkbox"]::after {
        border-color: var(--lumo-contrast-30pct);
      }

      :host([indeterminate][disabled]) [part="checkbox"]::after {
        background-color: var(--lumo-contrast-30pct);
      }
    </style>
  </template>
</dom-module><dom-module id="lumo-checkbox-effects">
  <template>
    <style>
      /* Transition the checkmark if activated with the mouse (disabled for grid select-all this way) */
      :host(:hover) [part="checkbox"]::after {
        transition: width 0.1s, height 0.25s;
      }

      /* Used for activation "halo" */
      [part="checkbox"]::before {
        color: transparent;
        display: inline-block;
        width: 100%;
        height: 100%;
        border-radius: inherit;
        background-color: inherit;
        transform: scale(1.4);
        opacity: 0;
        transition: transform 0.1s, opacity 0.8s;
      }

      /* Hover */

      :host(:not([checked]):not([indeterminate]):not([disabled]):hover) [part="checkbox"] {
        background-color: var(--lumo-contrast-30pct);
      }

      /* Disable hover for touch devices */
      @media (pointer: coarse) {
        :host(:not([checked]):not([indeterminate]):not([disabled]):hover) [part="checkbox"] {
          background-color: var(--lumo-contrast-20pct);
        }
      }

      /* Active */

      :host([active]) [part="checkbox"] {
        transform: scale(0.9);
        transition-duration: 0.05s;
      }

      :host([active][checked]) [part="checkbox"] {
        transform: scale(1.1);
      }

      :host([active]:not([checked])) [part="checkbox"]::before {
        transition-duration: 0.01s, 0.01s;
        transform: scale(0);
        opacity: 0.4;
      }
    </style>
  </template>
</dom-module>`;document.head.appendChild(wp.content);
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/
const xp=t=>(class extends((t=>(class extends t{static get properties(){var t={tabindex:{type:Number,value:0,reflectToAttribute:!0,observer:"_tabindexChanged"}};return window.ShadyDOM&&(t.tabIndex=t.tabindex),t}}))(t)){static get properties(){return{autofocus:{type:Boolean},_previousTabIndex:{type:Number},disabled:{type:Boolean,observer:"_disabledChanged",reflectToAttribute:!0},_isShiftTabbing:{type:Boolean}}}ready(){this.addEventListener("focusin",t=>{t.composedPath()[0]===this?this._focus(t):-1===t.composedPath().indexOf(this.focusElement)||this.disabled||this._setFocused(!0)}),this.addEventListener("focusout",t=>this._setFocused(!1)),super.ready();const t=t=>{t.composed||t.target.dispatchEvent(new CustomEvent(t.type,{bubbles:!0,composed:!0,cancelable:!1}))};this.shadowRoot.addEventListener("focusin",t),this.shadowRoot.addEventListener("focusout",t),this.addEventListener("keydown",t=>{if(!t.defaultPrevented&&9===t.keyCode)if(t.shiftKey)this._isShiftTabbing=!0,HTMLElement.prototype.focus.apply(this),this._setFocused(!1),setTimeout(()=>this._isShiftTabbing=!1,0);else{const t=window.navigator.userAgent.match(/Firefox\/(\d\d\.\d)/);if(t&&parseFloat(t[1])>=63&&parseFloat(t[1])<66&&this.parentNode&&this.nextSibling){const t=document.createElement("input");t.style.position="absolute",t.style.opacity=0,t.tabIndex=this.tabIndex,this.parentNode.insertBefore(t,this.nextSibling),t.focus(),t.addEventListener("focusout",()=>this.parentNode.removeChild(t))}}}),!this.autofocus||this.focused||this.disabled||window.requestAnimationFrame(()=>{this._focus(),this._setFocused(!0),this.setAttribute("focus-ring","")}),this._boundKeydownListener=this._bodyKeydownListener.bind(this),this._boundKeyupListener=this._bodyKeyupListener.bind(this)}connectedCallback(){super.connectedCallback(),document.body.addEventListener("keydown",this._boundKeydownListener,!0),document.body.addEventListener("keyup",this._boundKeyupListener,!0)}disconnectedCallback(){super.disconnectedCallback(),document.body.removeEventListener("keydown",this._boundKeydownListener,!0),document.body.removeEventListener("keyup",this._boundKeyupListener,!0),this.hasAttribute("focused")&&this._setFocused(!1)}_setFocused(t){t?this.setAttribute("focused",""):this.removeAttribute("focused"),t&&this._tabPressed?this.setAttribute("focus-ring",""):this.removeAttribute("focus-ring")}_bodyKeydownListener(t){this._tabPressed=9===t.keyCode}_bodyKeyupListener(){this._tabPressed=!1}get focusElement(){return window.console.warn(`Please implement the 'focusElement' property in <${this.localName}>`),this}_focus(t){this._isShiftTabbing||(this.focusElement.focus(),this._setFocused(!0))}focus(){this.focusElement&&!this.disabled&&(this.focusElement.focus(),this._setFocused(!0))}blur(){this.focusElement.blur(),this._setFocused(!1)}_disabledChanged(t){this.focusElement.disabled=t,t?(this.blur(),this._previousTabIndex=this.tabindex,this.tabindex=-1,this.setAttribute("aria-disabled","true")):(void 0!==this._previousTabIndex&&(this.tabindex=this._previousTabIndex),this.removeAttribute("aria-disabled"))}_tabindexChanged(t){void 0!==t&&(this.focusElement.tabIndex=t),this.disabled&&this.tabindex&&(-1!==this.tabindex&&(this._previousTabIndex=this.tabindex),this.tabindex=t=void 0),window.ShadyDOM&&this.setProperties({tabIndex:t,tabindex:t})}click(){this.disabled||super.click()}});
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/
class Cp extends(gp(xp(lp(Yh(nh))))){static get template(){return Ml`
    <style>
      :host {
        display: inline-block;
      }

      :host([hidden]) {
        display: none !important;
      }

      label {
        display: inline-flex;
        align-items: baseline;
        outline: none;
      }

      [part="checkbox"] {
        position: relative;
        display: inline-block;
        flex: none;
      }

      input[type="checkbox"] {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: inherit;
        margin: 0;
      }

      :host([disabled]) {
        -webkit-tap-highlight-color: transparent;
      }
    </style>

    <label>
      <span part="checkbox">
        <input type="checkbox" checked="{{checked::change}}" disabled\$="[[disabled]]" indeterminate="{{indeterminate::change}}" role="presentation" tabindex="-1">
      </span>

      <span part="label">
        <slot></slot>
      </span>
    </label>
`}static get is(){return"vaadin-checkbox"}static get version(){return"2.2.12"}static get properties(){return{checked:{type:Boolean,value:!1,notify:!0,observer:"_checkedChanged",reflectToAttribute:!0},indeterminate:{type:Boolean,notify:!0,observer:"_indeterminateChanged",reflectToAttribute:!0,value:!1},value:{type:String,value:"on"},_nativeCheckbox:{type:Object}}}constructor(){super(),this.name}get name(){return this.checked?this._storedName:""}set name(t){this._storedName=t}ready(){super.ready(),this.setAttribute("role","checkbox"),this._nativeCheckbox=this.shadowRoot.querySelector('input[type="checkbox"]'),this.addEventListener("click",this._handleClick.bind(this)),this._addActiveListeners();const t=this.getAttribute("name");t&&(this.name=t),this.shadowRoot.querySelector('[part~="label"]').querySelector("slot").addEventListener("slotchange",this._updateLabelAttribute.bind(this)),this._updateLabelAttribute()}_updateLabelAttribute(){const t=this.shadowRoot.querySelector('[part~="label"]'),e=t.firstElementChild.assignedNodes();this._isAssignedNodesEmpty(e)?t.setAttribute("empty",""):t.removeAttribute("empty")}_isAssignedNodesEmpty(t){return 0===t.length||1==t.length&&t[0].nodeType==Node.TEXT_NODE&&""===t[0].textContent.trim()}_checkedChanged(t){this.indeterminate?this.setAttribute("aria-checked","mixed"):this.setAttribute("aria-checked",t)}_indeterminateChanged(t){t?this.setAttribute("aria-checked","mixed"):this.setAttribute("aria-checked",this.checked)}_addActiveListeners(){this._addEventListenerToNode(this,"down",t=>{this.__interactionsAllowed(t)&&this.setAttribute("active","")}),this._addEventListenerToNode(this,"up",()=>this.removeAttribute("active")),this.addEventListener("keydown",t=>{this.__interactionsAllowed(t)&&32===t.keyCode&&(t.preventDefault(),this.setAttribute("active",""))}),this.addEventListener("keyup",t=>{this.__interactionsAllowed(t)&&32===t.keyCode&&(t.preventDefault(),this._toggleChecked(),this.removeAttribute("active"),this.indeterminate&&(this.indeterminate=!1))})}get focusElement(){return this.shadowRoot.querySelector("input")}__interactionsAllowed(t){return!this.disabled&&"a"!==t.target.localName}_handleClick(t){this.__interactionsAllowed(t)&&(this.indeterminate?(this.indeterminate=!1,t.preventDefault(),this._toggleChecked()):t.composedPath()[0]!==this._nativeCheckbox&&(t.preventDefault(),this._toggleChecked()))}_toggleChecked(){this.checked=!this.checked,this.dispatchEvent(new CustomEvent("change",{composed:!1,bubbles:!0}))}}customElements.define(Cp.is,Cp);const Sp=Ml`<dom-module id="lumo-grid" theme-for="vaadin-grid">
  <template>
    <style>
      :host {
        font-family: var(--lumo-font-family);
        font-size: var(--lumo-font-size-m);
        line-height: var(--lumo-line-height-s);
        color: var(--lumo-body-text-color);
        background-color: var(--lumo-base-color);
        box-sizing: border-box;
        -webkit-text-size-adjust: 100%;
        -webkit-tap-highlight-color: transparent;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;

        /* For internal use only */
        --_lumo-grid-border-color: var(--lumo-contrast-20pct);
        --_lumo-grid-secondary-border-color: var(--lumo-contrast-10pct);
        --_lumo-grid-border-width: 1px;
        --_lumo-grid-selected-row-color: var(--lumo-primary-color-10pct);
      }

      /* No (outer) border */

      :host(:not([theme~="no-border"])) {
        border: var(--_lumo-grid-border-width) solid var(--_lumo-grid-border-color);
      }

      /* Cell styles */

      [part~="cell"] {
        min-height: var(--lumo-size-m);
        background-color: var(--lumo-base-color);
      }

      [part~="cell"] ::slotted(vaadin-grid-cell-content) {
        cursor: default;
        padding: var(--lumo-space-xs) var(--lumo-space-m);
      }

      /* Apply row borders by default and introduce the "no-row-borders" variant */
      :host(:not([theme~="no-row-borders"])) [part~="cell"]:not([part~="details-cell"]) {
        border-top: var(--_lumo-grid-border-width) solid var(--_lumo-grid-secondary-border-color);
      }

      /* Hide first body row top border */
      :host(:not([theme~="no-row-borders"])) [part="row"][first] [part~="cell"]:not([part~="details-cell"]) {
        border-top: 0;
        min-height: calc(var(--lumo-size-m) - var(--_lumo-grid-border-width));
      }

      /* Focus-ring */

      [part~="cell"]:focus {
        outline: none;
      }

      :host([navigating]) [part~="cell"]:focus::before {
        content: "";
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        pointer-events: none;
        box-shadow: inset 0 0 0 2px var(--lumo-primary-color-50pct);
      }

      /* Drag and Drop styles */
      :host([dragover])::after {
        content: "";
        position: absolute;
        z-index: 100;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        pointer-events: none;
        box-shadow: inset 0 0 0 2px var(--lumo-primary-color-50pct);
      }

      [part~="row"][dragover] {
        z-index: 100 !important;
      }

      [part~="row"][dragover] [part~="cell"] {
        overflow: visible;
      }

      [part~="row"][dragover] [part~="cell"]::after {
        content: "";
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        height: calc(var(--_lumo-grid-border-width) + 2px);
        pointer-events: none;
        background: var(--lumo-primary-color-50pct);
      }

      :host([theme~="no-row-borders"]) [dragover] [part~="cell"]::after {
        height: 2px;
      }

      [part~="row"][dragover="below"] [part~="cell"]::after {
        top: 100%;
        bottom: auto;
        margin-top: -1px;
      }

      [part~="row"][dragover="above"] [part~="cell"]::after {
        top: auto;
        bottom: 100%;
        margin-bottom: -1px;
      }

      [part~="row"][details-opened][dragover="below"] [part~="cell"]:not([part~="details-cell"])::after,
      [part~="row"][details-opened][dragover="above"] [part~="details-cell"]::after {
        display: none;
      }

      [part~="row"][dragover][dragover="on-top"] [part~="cell"]::after {
        height: 100%;
      }

      [part~="row"][dragstart] {
        /* Add bottom-space to the row so the drag number doesn't get clipped. Needed for IE/Edge */
        border-bottom: 100px solid transparent;
        z-index: 100 !important;
        opacity: 0.9;
      }

      [part~="row"][dragstart] [part~="cell"] {
        border: none !important;
        box-shadow: none !important;
      }

      [part~="row"][dragstart] [part~="cell"][last-column] {
        border-radius: 0 var(--lumo-border-radius-s) var(--lumo-border-radius-s) 0;
      }

      [part~="row"][dragstart] [part~="cell"][first-column] {
        border-radius: var(--lumo-border-radius-s) 0 0 var(--lumo-border-radius-s);
      }

      [ios] [part~="row"][dragstart] [part~="cell"] {
        background: var(--lumo-primary-color-50pct);
      }

      #scroller:not([ios]) [part~="row"][dragstart]:not([dragstart=""])::after {
        display: block;
        position: absolute;
        left: var(--_grid-drag-start-x);
        top: var(--_grid-drag-start-y);
        z-index: 100;
        content: attr(dragstart);
        align-items: center;
        justify-content: center;
        box-sizing: border-box;
        padding: calc(var(--lumo-space-xs) * 0.8);
        color: var(--lumo-error-contrast-color);
        background-color: var(--lumo-error-color);
        border-radius: var(--lumo-border-radius-m);
        font-family: var(--lumo-font-family);
        font-size: var(--lumo-font-size-xxs);
        line-height: 1;
        font-weight: 500;
        text-transform: initial;
        letter-spacing: initial;
        min-width: calc(var(--lumo-size-s) * 0.7);
        text-align: center;
      }

      /* Headers and footers */

      [part~="header-cell"] ::slotted(vaadin-grid-cell-content),
      [part~="footer-cell"] ::slotted(vaadin-grid-cell-content),
      [part~="reorder-ghost"] {
        font-size: var(--lumo-font-size-s);
        font-weight: 500;
      }

      [part~="footer-cell"] ::slotted(vaadin-grid-cell-content) {
        font-weight: 400;
      }

      [part="row"]:only-child [part~="header-cell"] {
        min-height: var(--lumo-size-xl);
      }

      /* Header borders */

      /* Hide first header row top border */
      :host(:not([theme~="no-row-borders"])) [part="row"]:first-child [part~="header-cell"] {
        border-top: 0;
      }

      [part="row"]:last-child [part~="header-cell"] {
        border-bottom: var(--_lumo-grid-border-width) solid transparent;
      }

      :host(:not([theme~="no-row-borders"])) [part="row"]:last-child [part~="header-cell"] {
        border-bottom-color: var(--_lumo-grid-secondary-border-color);
      }

      /* Overflow uses a stronger border color */
      :host([overflow~="top"]) [part="row"]:last-child [part~="header-cell"] {
        border-bottom-color: var(--_lumo-grid-border-color);
      }

      /* Footer borders */

      [part="row"]:first-child [part~="footer-cell"] {
        border-top: var(--_lumo-grid-border-width) solid transparent;
      }

      :host(:not([theme~="no-row-borders"])) [part="row"]:first-child [part~="footer-cell"] {
        border-top-color: var(--_lumo-grid-secondary-border-color);
      }

      /* Overflow uses a stronger border color */
      :host([overflow~="bottom"]) [part="row"]:first-child [part~="footer-cell"] {
        border-top-color: var(--_lumo-grid-border-color);
      }

      /* Column reordering */

      :host([reordering]) [part~="cell"] {
        background: linear-gradient(var(--lumo-shade-20pct), var(--lumo-shade-20pct)) var(--lumo-base-color);
      }

      :host([reordering]) [part~="cell"][reorder-status="allowed"] {
        background: var(--lumo-base-color);
      }

      :host([reordering]) [part~="cell"][reorder-status="dragging"] {
        background: linear-gradient(var(--lumo-contrast-5pct), var(--lumo-contrast-5pct)) var(--lumo-base-color);
      }

      [part~="reorder-ghost"] {
        opacity: 0.85;
        box-shadow: var(--lumo-box-shadow-s);
        /* TODO Use the same styles as for the cell element (reorder-ghost copies styles from the cell element) */
        padding: var(--lumo-space-s) var(--lumo-space-m) !important;
      }

      /* Column resizing */

      [part="resize-handle"] {
        width: 3px;
        background-color: var(--lumo-primary-color-50pct);
        opacity: 0;
        transition: opacity 0.2s;
      }

      :host(:not([reordering])) *:not([column-resizing]) [part~="cell"]:hover [part="resize-handle"],
      [part="resize-handle"]:active {
        opacity: 1;
        transition-delay: 0.15s;
      }

      /* Column borders */

      :host([theme~="column-borders"]) [part~="cell"]:not([last-column]):not([part~="details-cell"]) {
        border-right: var(--_lumo-grid-border-width) solid var(--_lumo-grid-secondary-border-color);
      }

      /* Frozen columns */

      [last-frozen] {
        border-right: var(--_lumo-grid-border-width) solid transparent;
        overflow: hidden;
      }

      :host([overflow~="left"]) [part~="cell"][last-frozen]:not([part~="details-cell"]) {
        border-right-color: var(--_lumo-grid-border-color);
      }

      /* Row stripes */

      :host([theme~="row-stripes"]) [part~="row"]:not([odd]) [part~="body-cell"],
      :host([theme~="row-stripes"]) [part~="row"]:not([odd]) [part~="details-cell"] {
        background-image: linear-gradient(var(--lumo-contrast-5pct), var(--lumo-contrast-5pct));
        background-repeat: repeat-x;
      }

      /* Selected row */

      /* Raise the selected rows above unselected rows (so that box-shadow can cover unselected rows) */
      :host(:not([reordering])) [part~="row"][selected] {
        z-index: 1;
      }

      :host(:not([reordering])) [part~="row"][selected] [part~="body-cell"]:not([part~="details-cell"]) {
        background-image: linear-gradient(var(--_lumo-grid-selected-row-color), var(--_lumo-grid-selected-row-color));
        background-repeat: repeat;
      }

      /* Cover the border of an unselected row */
      :host(:not([theme~="no-row-borders"])) [part~="row"][selected] [part~="cell"]:not([part~="details-cell"]) {
        box-shadow: 0 var(--_lumo-grid-border-width) 0 0 var(--_lumo-grid-selected-row-color);
      }

      /* Compact */

      :host([theme~="compact"]) [part="row"]:only-child [part~="header-cell"] {
        min-height: var(--lumo-size-m);
      }

      :host([theme~="compact"]) [part~="cell"] {
        min-height: var(--lumo-size-s);
      }

      :host([theme~="compact"]) [part="row"][first] [part~="cell"]:not([part~="details-cell"]) {
        min-height: calc(var(--lumo-size-s) - var(--_lumo-grid-border-width));
      }

      :host([theme~="compact"]) [part~="cell"] ::slotted(vaadin-grid-cell-content) {
        padding: var(--lumo-space-xs) var(--lumo-space-s);
      }

      /* Wrap cell contents */

      :host([theme~="wrap-cell-content"]) [part~="cell"] ::slotted(vaadin-grid-cell-content) {
        white-space: normal;
      }
    </style>
  </template>
</dom-module><dom-module theme-for="vaadin-checkbox" id="vaadin-grid-select-all-checkbox-lumo">
  <template>
    <style>
      :host(.vaadin-grid-select-all-checkbox) {
        font-size: var(--lumo-font-size-m);
      }
   </style>
  </template>
</dom-module>`;document.head.appendChild(Sp.content);
/**
@license
Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/
const Ap={properties:{scrollTarget:{type:HTMLElement,value:function(){return this._defaultScrollTarget}}},observers:["_scrollTargetChanged(scrollTarget, isAttached)"],_shouldHaveListener:!0,_scrollTargetChanged:function(t,e){if(this._oldScrollTarget&&(this._toggleScrollListener(!1,this._oldScrollTarget),this._oldScrollTarget=null),e)if("document"===t)this.scrollTarget=this._doc;else if("string"==typeof t){var n=this.domHost;this.scrollTarget=n&&n.$?n.$[t]:yu(this.ownerDocument).querySelector("#"+t)}else this._isValidScrollTarget()&&(this._oldScrollTarget=t,this._toggleScrollListener(this._shouldHaveListener,t))},_scrollHandler:function(){},get _defaultScrollTarget(){return this._doc},get _doc(){return this.ownerDocument.documentElement},get _scrollTop(){return this._isValidScrollTarget()?this.scrollTarget===this._doc?window.pageYOffset:this.scrollTarget.scrollTop:0},get _scrollLeft(){return this._isValidScrollTarget()?this.scrollTarget===this._doc?window.pageXOffset:this.scrollTarget.scrollLeft:0},set _scrollTop(t){this.scrollTarget===this._doc?window.scrollTo(window.pageXOffset,t):this._isValidScrollTarget()&&(this.scrollTarget.scrollTop=t)},set _scrollLeft(t){this.scrollTarget===this._doc?window.scrollTo(t,window.pageYOffset):this._isValidScrollTarget()&&(this.scrollTarget.scrollLeft=t)},scroll:function(t,e){var n;"object"==typeof t?(n=t.left,e=t.top):n=t,n=n||0,e=e||0,this.scrollTarget===this._doc?window.scrollTo(n,e):this._isValidScrollTarget()&&(this.scrollTarget.scrollLeft=n,this.scrollTarget.scrollTop=e)},get _scrollTargetWidth(){return this._isValidScrollTarget()?this.scrollTarget===this._doc?window.innerWidth:this.scrollTarget.offsetWidth:0},get _scrollTargetHeight(){return this._isValidScrollTarget()?this.scrollTarget===this._doc?window.innerHeight:this.scrollTarget.offsetHeight:0},_isValidScrollTarget:function(){return this.scrollTarget instanceof HTMLElement},_toggleScrollListener:function(t,e){var n=e===this._doc?window:e;t?this._boundScrollHandler||(this._boundScrollHandler=this._scrollHandler.bind(this),n.addEventListener("scroll",this._boundScrollHandler)):this._boundScrollHandler&&(n.removeEventListener("scroll",this._boundScrollHandler),this._boundScrollHandler=null)},toggleScrollListener:function(t){this._shouldHaveListener=t,this._toggleScrollListener(t,this.scrollTarget)}};
/**
@license
Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/var Tp=navigator.userAgent.match(/iP(?:hone|ad;(?: U;)? CPU) OS (\d+)/),Pp=Tp&&Tp[1]>=8,Ep=rc,Ip=ic,Np=sc;const Mp=Nu({behaviors:[op,Ap],_ratio:.5,_scrollerPaddingTop:0,_scrollPosition:0,_physicalSize:0,_physicalAverage:0,_physicalAverageCount:0,_physicalTop:0,_virtualCount:0,_estScrollHeight:0,_scrollHeight:0,_viewportHeight:0,_viewportWidth:0,_physicalItems:null,_physicalSizes:null,_firstVisibleIndexVal:null,_collection:null,_lastVisibleIndexVal:null,_maxPages:2,_focusedVirtualIndex:-1,_itemsPerRow:1,_rowHeight:0,_templateCost:0,get _physicalBottom(){return this._physicalTop+this._physicalSize},get _scrollBottom(){return this._scrollPosition+this._viewportHeight},get _virtualEnd(){return this._virtualStart+this._physicalCount-1},get _hiddenContentSize(){return(this.grid?this._physicalRows*this._rowHeight:this._physicalSize)-this._viewportHeight},get _maxScrollTop(){return this._estScrollHeight-this._viewportHeight+this._scrollOffset},get _maxVirtualStart(){var t=this._convertIndexToCompleteRow(this._virtualCount);return Math.max(0,t-this._physicalCount)},set _virtualStart(t){t=this._clamp(t,0,this._maxVirtualStart),this.grid&&(t-=t%this._itemsPerRow),this._virtualStartVal=t},get _virtualStart(){return this._virtualStartVal||0},set _physicalStart(t){(t%=this._physicalCount)<0&&(t=this._physicalCount+t),this.grid&&(t-=t%this._itemsPerRow),this._physicalStartVal=t},get _physicalStart(){return this._physicalStartVal||0},get _physicalEnd(){return(this._physicalStart+this._physicalCount-1)%this._physicalCount},set _physicalCount(t){this._physicalCountVal=t},get _physicalCount(){return this._physicalCountVal||0},get _optPhysicalSize(){return 0===this._viewportHeight?1/0:this._viewportHeight*this._maxPages},get _isVisible(){return Boolean(this.offsetWidth||this.offsetHeight)},get firstVisibleIndex(){var t=this._firstVisibleIndexVal;if(null==t){var e=this._physicalTop+this._scrollOffset;t=this._iterateItems(function(t,n){return(e+=this._getPhysicalSizeIncrement(t))>this._scrollPosition?this.grid?n-n%this._itemsPerRow:n:this.grid&&this._virtualCount-1===n?n-n%this._itemsPerRow:void 0})||0,this._firstVisibleIndexVal=t}return t},get lastVisibleIndex(){var t=this._lastVisibleIndexVal;if(null==t){if(this.grid)t=Math.min(this._virtualCount,this.firstVisibleIndex+this._estRowsInView*this._itemsPerRow-1);else{var e=this._physicalTop+this._scrollOffset;this._iterateItems(function(n,r){e<this._scrollBottom&&(t=r),e+=this._getPhysicalSizeIncrement(n)})}this._lastVisibleIndexVal=t}return t},get _scrollOffset(){return this._scrollerPaddingTop},attached:function(){this._debounce("_render",this._render,Ep),this.listen(this,"iron-resize","_resizeHandler")},detached:function(){this.unlisten(this,"iron-resize","_resizeHandler")},updateViewportBoundaries:function(){var t=window.getComputedStyle(this);this._scrollerPaddingTop=this.scrollTarget===this?0:parseInt(t["padding-top"],10),this._isRTL=Boolean("rtl"===t.direction),this._viewportWidth=this.$.items.offsetWidth,this._viewportHeight=this._scrollTargetHeight,this.grid&&this._updateGridMetrics()},_scrollHandler:function(){var t=Math.max(0,Math.min(this._maxScrollTop,this._scrollTop)),e=t-this._scrollPosition,n=e>=0;if(this._scrollPosition=t,this._firstVisibleIndexVal=null,this._lastVisibleIndexVal=null,Math.abs(e)>this._physicalSize&&this._physicalSize>0){e-=this._scrollOffset;var r=Math.round(e/this._physicalAverage)*this._itemsPerRow;this._virtualStart=this._virtualStart+r,this._physicalStart=this._physicalStart+r,this._physicalTop=Math.floor(this._virtualStart/this._itemsPerRow)*this._physicalAverage,this._update()}else if(this._physicalCount>0){var i=this._getReusables(n);n?(this._physicalTop=i.physicalTop,this._virtualStart=this._virtualStart+i.indexes.length,this._physicalStart=this._physicalStart+i.indexes.length):(this._virtualStart=this._virtualStart-i.indexes.length,this._physicalStart=this._physicalStart-i.indexes.length),this._update(i.indexes,n?null:i.indexes),this._debounce("_increasePoolIfNeeded",this._increasePoolIfNeeded.bind(this,0),Np)}},_getReusables:function(t){var e,n,r,i=[],s=this._hiddenContentSize*this._ratio,o=this._virtualStart,a=this._virtualEnd,l=this._physicalCount,c=this._physicalTop+this._scrollOffset,h=this._physicalBottom+this._scrollOffset,d=this._scrollTop,u=this._scrollBottom;for(t?(e=this._physicalStart,n=d-c):(e=this._physicalEnd,n=h-u);n-=r=this._getPhysicalSizeIncrement(e),!(i.length>=l||n<=s);)if(t){if(a+i.length+1>=this._virtualCount)break;if(c+r>=d-this._scrollOffset)break;i.push(e),c+=r,e=(e+1)%l}else{if(o-i.length<=0)break;if(c+this._physicalSize-r<=u)break;i.push(e),c-=r,e=0===e?l-1:e-1}return{indexes:i,physicalTop:c-this._scrollOffset}},_update:function(t,e){if(!(t&&0===t.length||0===this._physicalCount)){if(this._manageFocus(),this._assignModels(t),this._updateMetrics(t),e)for(;e.length;){var n=e.pop();this._physicalTop-=this._getPhysicalSizeIncrement(n)}this._positionItems(),this._updateScrollerSize()}},_isClientFull:function(){return 0!=this._scrollBottom&&this._physicalBottom-1>=this._scrollBottom&&this._physicalTop<=this._scrollPosition},_increasePoolIfNeeded:function(t){var e=this._clamp(this._physicalCount+t,3,this._virtualCount-this._virtualStart),n=(e=this._convertIndexToCompleteRow(e))-this._physicalCount,r=Math.round(.5*this._physicalCount);if(!(n<0)){if(n>0){var i=window.performance.now();[].push.apply(this._physicalItems,this._createPool(n));for(var s=0;s<n;s++)this._physicalSizes.push(0);this._physicalCount=this._physicalCount+n,this._physicalStart>this._physicalEnd&&this._isIndexRendered(this._focusedVirtualIndex)&&this._getPhysicalIndex(this._focusedVirtualIndex)<this._physicalEnd&&(this._physicalStart=this._physicalStart+n),this._update(),this._templateCost=(window.performance.now()-i)/n,r=Math.round(.5*this._physicalCount)}this._virtualEnd>=this._virtualCount-1||0===r||(this._isClientFull()?this._physicalSize<this._optPhysicalSize&&this._debounce("_increasePoolIfNeeded",this._increasePoolIfNeeded.bind(this,this._clamp(Math.round(50/this._templateCost),1,r)),Ip):this._debounce("_increasePoolIfNeeded",this._increasePoolIfNeeded.bind(this,r),Np))}},_render:function(){if(this.isAttached&&this._isVisible)if(0!==this._physicalCount){var t=this._getReusables(!0);this._physicalTop=t.physicalTop,this._virtualStart=this._virtualStart+t.indexes.length,this._physicalStart=this._physicalStart+t.indexes.length,this._update(t.indexes),this._update(),this._increasePoolIfNeeded(0)}else this._virtualCount>0&&(this.updateViewportBoundaries(),this._increasePoolIfNeeded(3))},_itemsChanged:function(t){"items"===t.path&&(this._virtualStart=0,this._physicalTop=0,this._virtualCount=this.items?this.items.length:0,this._collection=(this.items,null),this._physicalIndexForKey={},this._firstVisibleIndexVal=null,this._lastVisibleIndexVal=null,this._physicalCount=this._physicalCount||0,this._physicalItems=this._physicalItems||[],this._physicalSizes=this._physicalSizes||[],this._physicalStart=0,this._scrollTop>this._scrollOffset&&this._resetScrollPosition(0),this._removeFocusedItem(),this._debounce("_render",this._render,Ep))},_iterateItems:function(t,e){var n,r,i,s;if(2===arguments.length&&e){for(s=0;s<e.length;s++)if(n=e[s],r=this._computeVidx(n),null!=(i=t.call(this,n,r)))return i}else{for(n=this._physicalStart,r=this._virtualStart;n<this._physicalCount;n++,r++)if(null!=(i=t.call(this,n,r)))return i;for(n=0;n<this._physicalStart;n++,r++)if(null!=(i=t.call(this,n,r)))return i}},_computeVidx:function(t){return t>=this._physicalStart?this._virtualStart+(t-this._physicalStart):this._virtualStart+(this._physicalCount-this._physicalStart)+t},_updateMetrics:function(t){hu();var e=0,n=0,r=this._physicalAverageCount,i=this._physicalAverage;this._iterateItems(function(t,r){n+=this._physicalSizes[t],this._physicalSizes[t]=this._physicalItems[t].offsetHeight,e+=this._physicalSizes[t],this._physicalAverageCount+=this._physicalSizes[t]?1:0},t),this.grid?(this._updateGridMetrics(),this._physicalSize=Math.ceil(this._physicalCount/this._itemsPerRow)*this._rowHeight):(n=1===this._itemsPerRow?n:Math.ceil(this._physicalCount/this._itemsPerRow)*this._rowHeight,this._physicalSize=this._physicalSize+e-n,this._itemsPerRow=1),this._physicalAverageCount!==r&&(this._physicalAverage=Math.round((i*r+e)/this._physicalAverageCount))},_positionItems:function(){this._adjustScrollPosition();var t=this._physicalTop;this._iterateItems(function(e,n){this.translate3d(0,t+"px",0,this._physicalItems[e]),t+=this._physicalSizes[e]})},_getPhysicalSizeIncrement:function(t){return this.grid?this._computeVidx(t)%this._itemsPerRow!=this._itemsPerRow-1?0:this._rowHeight:this._physicalSizes[t]},_adjustScrollPosition:function(){var t=0===this._virtualStart?this._physicalTop:Math.min(this._scrollPosition+this._physicalTop,0);if(0!==t){this._physicalTop=this._physicalTop-t;var e=this._scrollTop;!Pp&&e>0&&this._resetScrollPosition(e-t)}},_resetScrollPosition:function(t){this.scrollTarget&&t>=0&&(this._scrollTop=t,this._scrollPosition=this._scrollTop)},_updateScrollerSize:function(t){this.grid?this._estScrollHeight=this._virtualRowCount*this._rowHeight:this._estScrollHeight=this._physicalBottom+Math.max(this._virtualCount-this._physicalCount-this._virtualStart,0)*this._physicalAverage,((t=(t=(t=t||0===this._scrollHeight)||this._scrollPosition>=this._estScrollHeight-this._physicalSize)||this.grid&&this.$.items.style.height<this._estScrollHeight)||Math.abs(this._estScrollHeight-this._scrollHeight)>=this._viewportHeight)&&(this.$.items.style.height=this._estScrollHeight+"px",this._scrollHeight=this._estScrollHeight)},scrollToIndex:function(t){if(!("number"!=typeof t||t<0||t>this.items.length-1)&&(hu(),0!==this._physicalCount)){t=this._clamp(t,0,this._virtualCount-1),(!this._isIndexRendered(t)||t>=this._maxVirtualStart)&&(this._virtualStart=this.grid?t-2*this._itemsPerRow:t-1),this._manageFocus(),this._assignModels(),this._updateMetrics(),this._physicalTop=Math.floor(this._virtualStart/this._itemsPerRow)*this._physicalAverage;for(var e=this._physicalStart,n=this._virtualStart,r=0,i=this._hiddenContentSize;n<t&&r<=i;)r+=this._getPhysicalSizeIncrement(e),e=(e+1)%this._physicalCount,n++;this._updateScrollerSize(!0),this._positionItems(),this._resetScrollPosition(this._physicalTop+this._scrollOffset+r),this._increasePoolIfNeeded(0),this._firstVisibleIndexVal=null,this._lastVisibleIndexVal=null}},_resetAverage:function(){this._physicalAverage=0,this._physicalAverageCount=0},_resizeHandler:function(){this._debounce("_render",function(){this._firstVisibleIndexVal=null,this._lastVisibleIndexVal=null,this.updateViewportBoundaries(),this._isVisible?(this.toggleScrollListener(!0),this._resetAverage(),this._render()):this.toggleScrollListener(!1)},Ep)},_convertIndexToCompleteRow:function(t){return this._itemsPerRow=this._itemsPerRow||1,this.grid?Math.ceil(t/this._itemsPerRow)*this._itemsPerRow:t},_isIndexRendered:function(t){return t>=this._virtualStart&&t<=this._virtualEnd},_getPhysicalIndex:function(t){return(this._physicalStart+(t-this._virtualStart))%this._physicalCount},_clamp:function(t,e,n){return Math.min(n,Math.max(e,t))},_debounce:function(t,e,n){this._debouncers=this._debouncers||{},this._debouncers[t]=rh.debounce(this._debouncers[t],n,e.bind(this)),sh(this._debouncers[t])}});
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/class Op extends Mp{static get is(){return"vaadin-grid-scroller"}static get properties(){return{size:{type:Number,notify:!0},_vidxOffset:{value:0}}}static get observers(){return["_effectiveSizeChanged(_effectiveSize)"]}connectedCallback(){super.connectedCallback(),this._scrollHandler()}_updateScrollerItem(t,e){}_afterScroll(){}_getRowTarget(){}_createScrollerRows(){}_canPopulate(){}scrollToIndex(t){this._warnPrivateAPIAccess("scrollToIndex"),t>0&&(this._pendingScrollToIndex=null),!parseInt(this.$.items.style.borderTopWidth)&&t>0&&(this._pendingScrollToIndex=t),this._scrollingToIndex=!0,t=Math.min(Math.max(t,0),this._effectiveSize-1),this.$.table.scrollTop=t/this._effectiveSize*(this.$.table.scrollHeight-this.$.table.offsetHeight),this._scrollHandler(),this._accessIronListAPI(()=>this._maxScrollTop)&&this._virtualCount<this._effectiveSize&&this._adjustVirtualIndexOffset(1e6),this._accessIronListAPI(()=>super.scrollToIndex(t-this._vidxOffset)),this._scrollHandler();const e=Array.from(this.$.items.children).filter(e=>e.index===t)[0];if(e){const t=e.getBoundingClientRect().top-this.$.header.getBoundingClientRect().bottom;Math.abs(t)>1&&(this.$.table.scrollTop+=t,this._scrollHandler())}this._scrollingToIndex=!1}_effectiveSizeChanged(t){let e,n=0;if(this._iterateItems((t,r)=>{if(r===this._firstVisibleIndex){const r=this._physicalItems[t];e=r.index,n=r.getBoundingClientRect().top}}),this.items&&t<this.items.length&&(this._scrollTop=0),!Array.isArray(this.items)){const e=this._edge||this._ie?3e4:1e5;this.items={length:Math.min(t,e)}}this._accessIronListAPI(()=>super._itemsChanged({path:"items"})),this._virtualCount=Math.min(this.items.length,t)||0,0===this._scrollTop&&(this._accessIronListAPI(()=>this._scrollToIndex(Math.min(t-1,e))),this._iterateItems((t,r)=>{const i=this._physicalItems[t];if(i.index===e&&(this.$.table.scrollTop+=Math.round(i.getBoundingClientRect().top-n)),i.index===this._focusedItemIndex&&this._itemsFocusable&&this.$.items.contains(this.shadowRoot.activeElement)){const t=Array.from(this._itemsFocusable.parentElement.children).indexOf(this._itemsFocusable);i.children[t].focus()}})),this._assignModels(),requestAnimationFrame(()=>this._update())}_positionItems(){let t;this._adjustScrollPosition(),isNaN(this._physicalTop)&&(t=!0,this._physicalTop=0);let e=this._physicalTop;this._iterateItems((t,n)=>{this._physicalItems[t].style.transform=`translateY(${e}px)`,e+=this._physicalSizes[t]}),t&&this._scrollToIndex(0)}_increasePoolIfNeeded(t){0===t&&this._scrollingToIndex||!this._canPopulate()||!this._effectiveSize||(this._initialPoolCreated?this._optPhysicalSize!==1/0&&(this._debounceIncreasePool=rh.debounce(this._debounceIncreasePool,rc,()=>{this._updateMetrics();const t=this._optPhysicalSize-this._physicalSize;let e=Math.ceil(t/this._physicalAverage);this._physicalCount+e>this._effectiveSize&&(e=Math.max(0,this._effectiveSize-this._physicalCount)),this._physicalSize&&e>0&&(super._increasePoolIfNeeded(e),this.__reorderChildNodes())})):(this._initialPoolCreated=!0,super._increasePoolIfNeeded(25)))}__reorderChildNodes(){const t=Array.from(this.$.items.childNodes);!!t.reduce((t,e,n,r)=>{if(0===n||r[n-1].index===e.index-1)return t},!0)||t.sort((t,e)=>t.index-e.index).forEach(t=>this.$.items.appendChild(t))}_createPool(t){const e=document.createDocumentFragment(),n=this._createScrollerRows(t);n.forEach(t=>e.appendChild(t)),this._getRowTarget().appendChild(e);const r=this.querySelector("[slot]");if(r){const t=r.getAttribute("slot");r.setAttribute("slot","foo-bar"),r.setAttribute("slot",t)}return this._updateHeaderFooterMetrics(),lu(this,()=>this.notifyResize()),n}_assignModels(t){this._iterateItems((t,e)=>{const n=this._physicalItems[t];this._toggleAttribute("hidden",e>=this._effectiveSize,n),this._updateScrollerItem(n,e+(this._vidxOffset||0))},t)}_scrollHandler(){const t=this.$.table.scrollTop-this._scrollPosition;this._accessIronListAPI(super._scrollHandler);const e=this._vidxOffset;this._accessIronListAPI(()=>this._maxScrollTop)&&this._virtualCount<this._effectiveSize&&this._adjustVirtualIndexOffset(t),this._vidxOffset!==e&&this._update(),this._afterScroll()}_adjustVirtualIndexOffset(t){if(Math.abs(t)>1e4){if(this._noScale)return void(this._noScale=!1);const t=this.$.table.scrollTop/(this.$.table.scrollHeight-this.$.table.offsetHeight),e=t*this._effectiveSize;this._vidxOffset=Math.round(e-t*this._virtualCount)}else{const t=this._vidxOffset||0,e=1e3,n=100;0===this._scrollTop?(this._vidxOffset=0,t!==this._vidxOffset&&super.scrollToIndex(0)):this.firstVisibleIndex<e&&this._vidxOffset>0&&(this._vidxOffset-=Math.min(this._vidxOffset,n),t!==this._vidxOffset&&super.scrollToIndex(this.firstVisibleIndex+(t-this._vidxOffset)),this._noScale=!0);const r=this._effectiveSize-this._virtualCount;this._scrollTop>=this._maxScrollTop&&this._maxScrollTop>0?(this._vidxOffset=r,t!==this._vidxOffset&&super.scrollToIndex(this._virtualCount)):this.firstVisibleIndex>this._virtualCount-e&&this._vidxOffset<r&&(this._vidxOffset+=Math.min(r-this._vidxOffset,n),t!==this._vidxOffset&&super.scrollToIndex(this.firstVisibleIndex-(this._vidxOffset-t)),this._noScale=!0)}}_accessIronListAPI(t){this._warnPrivateAPIAccessAsyncEnabled=!1;const e=t.apply(this);return this._debouncerWarnPrivateAPIAccess=rh.debounce(this._debouncerWarnPrivateAPIAccess,rc,()=>this._warnPrivateAPIAccessAsyncEnabled=!0),e}_debounceRender(t,e){super._debounceRender(()=>this._accessIronListAPI(t),e)}_warnPrivateAPIAccess(t){this._warnPrivateAPIAccessAsyncEnabled&&console.warn(`Accessing private API (${t})!`)}_render(){this._accessIronListAPI(super._render)}_createFocusBackfillItem(){}_multiSelectionChanged(){}clearSelection(){}_itemsChanged(){}_manageFocus(){}_removeFocusedItem(){}get _firstVisibleIndex(){return this._accessIronListAPI(()=>super.firstVisibleIndex)}get _lastVisibleIndex(){return this._accessIronListAPI(()=>super.lastVisibleIndex)}_scrollToIndex(t){this._accessIronListAPI(()=>this.scrollToIndex(t))}get firstVisibleIndex(){return this._warnPrivateAPIAccess("firstVisibleIndex"),super.firstVisibleIndex}set firstVisibleIndex(t){this._warnPrivateAPIAccess("firstVisibleIndex"),super.firstVisibleIndex=t}get lastVisibleIndex(){return this._warnPrivateAPIAccess("lastVisibleIndex"),super.lastVisibleIndex}set lastVisibleIndex(t){this._warnPrivateAPIAccess("lastVisibleIndex"),super.lastVisibleIndex=t}updateViewportBoundaries(){this._warnPrivateAPIAccess("updateViewportBoundaries"),super.updateViewportBoundaries.apply(this,arguments)}_resizeHandler(){super._resizeHandler(),hu()}}customElements.define(Op.is,Op);
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/
const Rp=t=>(class extends t{static get observers(){return["_a11yUpdateGridSize(size, _columnTree, _columnTree.*)"]}_a11yGetHeaderRowCount(t){return t.filter(t=>t.some(t=>t._headerTemplate||t.headerRenderer||t.path||t.header)).length}_a11yGetFooterRowCount(t){return t.filter(t=>t.some(t=>t._headerTemplate||t.headerRenderer)).length}_a11yUpdateGridSize(t,e){if(void 0===t||void 0===e)return;const n=e[e.length-1];this.$.table.setAttribute("aria-rowcount",t+this._a11yGetHeaderRowCount(e)+this._a11yGetFooterRowCount(e)),this.$.table.setAttribute("aria-colcount",n&&n.length||0),this._a11yUpdateHeaderRows(),this._a11yUpdateFooterRows()}_a11yUpdateHeaderRows(){Array.from(this.$.header.children).forEach((t,e)=>t.setAttribute("aria-rowindex",e+1))}_a11yUpdateFooterRows(){Array.from(this.$.footer.children).forEach((t,e)=>t.setAttribute("aria-rowindex",this._a11yGetHeaderRowCount(this._columnTree)+this.size+e+1))}_a11yUpdateRowRowindex(t,e){t.setAttribute("aria-rowindex",e+this._a11yGetHeaderRowCount(this._columnTree)+1)}_a11yUpdateRowSelected(t,e){t.setAttribute("aria-selected",Boolean(e)),Array.from(t.children).forEach(t=>t.setAttribute("aria-selected",Boolean(e)))}_a11yUpdateRowLevel(t,e){t.setAttribute("aria-level",e+1)}_a11yUpdateRowDetailsOpened(t,e){Array.from(t.children).forEach(t=>{"boolean"==typeof e?t.setAttribute("aria-expanded",e):t.hasAttribute("aria-expanded")&&t.removeAttribute("aria-expanded")})}_a11ySetRowDetailsCell(t,e){Array.from(t.children).forEach(t=>{t!==e&&t.setAttribute("aria-controls",e.id)})}_a11yUpdateCellColspan(t,e){t.setAttribute("aria-colspan",Number(e))}_a11yUpdateSorters(){Array.from(this.querySelectorAll("vaadin-grid-sorter")).forEach(t=>{let e=t.parentNode;for(;e&&"vaadin-grid-cell-content"!==e.localName;)e=e.parentNode;if(e&&e.assignedSlot){e.assignedSlot.parentNode.setAttribute("aria-sort",{asc:"ascending",desc:"descending"}[String(t.direction)]||"none")}})}}),kp=t=>(class extends t{static get properties(){return{activeItem:{type:Object,notify:!0,value:null}}}ready(){super.ready(),this.$.scroller.addEventListener("click",this._onClick.bind(this)),this.addEventListener("cell-activate",this._activateItem.bind(this))}_activateItem(t){const e=t.detail.model,n=e?e.item:null;n&&(this.activeItem=this._itemsEqual(this.activeItem,n)?null:n)}_onClick(t){if(t.defaultPrevented)return;const e=t.composedPath(),n=e[e.indexOf(this.$.table)-3];if(!n||n.getAttribute("part").indexOf("details-cell")>-1)return;const r=n._content,i=this.getRootNode().activeElement;r.contains(i)&&(!this._ie||this._isFocusable(i))||this._isFocusable(t.target)||this.dispatchEvent(new CustomEvent("cell-activate",{detail:{model:this.__getRowModel(n.parentElement)}}))}_isFocusable(t){if(!t.parentNode)return!1;const e=-1!==Array.from(t.parentNode.querySelectorAll("[tabindex], button, input, select, textarea, object, iframe, label, a[href], area[href]")).filter(t=>"cell body-cell"!==t.getAttribute("part")).indexOf(t);return!t.disabled&&e}}),zp=t=>(class extends t{static get properties(){return{items:Array}}static get observers(){return["_itemsChanged(items, items.*, isAttached)"]}_itemsChanged(t,e,n){if(n){if(!Array.isArray(t))return void 0!==t&&null!==t||(this.size=0),void(this.dataProvider===this._arrayDataProvider&&(this.dataProvider=void 0));this.size=t.length,this.dataProvider=this.dataProvider||this._arrayDataProvider,this.clearCache(),this._ensureFirstPageLoaded()}}_arrayDataProvider(t,e){let n=(Array.isArray(this.items)?this.items:[]).slice(0);this._filters&&this._checkPaths(this._filters,"filtering",n)&&(n=this._filter(n)),this.size=n.length,t.sortOrders.length&&this._checkPaths(this._sorters,"sorting",n)&&(n=n.sort(this._multiSort.bind(this)));const r=t.page*t.pageSize,i=r+t.pageSize;e(n.slice(r,i),n.length)}_checkPaths(t,e,n){if(!n.length)return!1;let r=!0;for(var i in t){const s=t[i].path;if(!s||-1===s.indexOf("."))continue;const o=s.replace(/\.[^\.]*$/,"");void 0===ip.get(o,n[0])&&(console.warn(`Path "${s}" used for ${e} does not exist in all of the items, ${e} is disabled.`),r=!1)}return r}_multiSort(t,e){return this._sorters.map(n=>"asc"===n.direction?this._compare(ip.get(n.path,t),ip.get(n.path,e)):"desc"===n.direction?this._compare(ip.get(n.path,e),ip.get(n.path,t)):0).reduce((t,e)=>t||e,0)}_normalizeEmptyValue(t){return[void 0,null].indexOf(t)>=0?"":isNaN(t)?t.toString():t}_compare(t,e){return(t=this._normalizeEmptyValue(t))<(e=this._normalizeEmptyValue(e))?-1:t>e?1:0}_filter(t){return t.filter((t,e)=>0===this._filters.filter(e=>{const n=this._normalizeEmptyValue(ip.get(e.path,t)),r=this._normalizeEmptyValue(e.value).toString().toLowerCase();return-1===n.toString().toLowerCase().indexOf(r)}).length)}}),Dp=t=>(class extends(Yh(t)){ready(){super.ready();const t=this.$.scroller;Lh(t,"track",this._onHeaderTrack.bind(this)),t.addEventListener("touchmove",e=>t.hasAttribute("column-resizing")&&e.preventDefault()),t.addEventListener("contextmenu",t=>"resize-handle"==t.target.getAttribute("part")&&t.preventDefault()),t.addEventListener("mousedown",t=>"resize-handle"===t.target.getAttribute("part")&&t.preventDefault())}_onHeaderTrack(t){const e=t.target;if("resize-handle"===e.getAttribute("part")){let s=e.parentElement._column;for(this._toggleAttribute("column-resizing",!0,this.$.scroller);"vaadin-grid-column-group"===s.localName;)s=Array.prototype.slice.call(s._childColumns,0).sort(function(t,e){return t._order-e._order}).filter(function(t){return!t.hidden}).pop();const o=Array.from(this.$.header.querySelectorAll('[part~="row"]:last-child [part~="cell"]'));var n=o.filter(t=>t._column===s)[0];if(n.offsetWidth){var r=window.getComputedStyle(n),i=10+parseInt(r.paddingLeft)+parseInt(r.paddingRight)+parseInt(r.borderLeftWidth)+parseInt(r.borderRightWidth)+parseInt(r.marginLeft)+parseInt(r.marginRight);s.width=Math.max(i,n.offsetWidth+t.detail.x-n.getBoundingClientRect().right)+"px",s.flexGrow=0}o.sort(function(t,e){return t._column._order-e._column._order}).forEach(function(t,e,r){e<r.indexOf(n)&&(t._column.width=t.offsetWidth+"px",t._column.flexGrow=0)}),"end"===t.detail.state&&(this._toggleAttribute("column-resizing",!1,this.$.scroller),this.dispatchEvent(new CustomEvent("column-resize",{detail:{resizedColumn:s}}))),this._resizeHandler()}}}),Lp=class t{constructor(t,e,n){this.grid=t,this.parentCache=e,this.parentItem=n,this.itemCaches={},this.items={},this.effectiveSize=0,this.size=0,this.pendingRequests={}}isLoading(){return Object.keys(this.pendingRequests).length||Object.keys(this.itemCaches).filter(t=>this.itemCaches[t].isLoading())[0]}getItemForIndex(t){const{cache:e,scaledIndex:n}=this.getCacheAndIndex(t);return e.items[n]}updateSize(){this.effectiveSize=!this.parentItem||this.grid._isExpanded(this.parentItem)?this.size+Object.keys(this.itemCaches).reduce((t,e)=>{const n=this.itemCaches[e];return n.updateSize(),t+n.effectiveSize},0):0}ensureSubCacheForScaledIndex(e){if(!this.itemCaches[e]){const n=new t(this.grid,this,this.items[e]);this.itemCaches[e]=n,this.grid._loadPage(0,n)}}getCacheAndIndex(t){let e=t;const n=Object.keys(this.itemCaches);for(var r=0;r<n.length;r++){const t=Number(n[r]),i=this.itemCaches[t];if(e<=t)return{cache:this,scaledIndex:e};if(e<=t+i.effectiveSize)return i.getCacheAndIndex(e-t-1);e-=i.effectiveSize}return{cache:this,scaledIndex:e}}},Fp=t=>(class extends t{static get properties(){return{pageSize:{type:Number,value:50,observer:"_pageSizeChanged"},dataProvider:{type:Object,notify:!0,observer:"_dataProviderChanged"},loading:{type:Boolean,notify:!0,readOnly:!0,reflectToAttribute:!0},_cache:{type:Object,value:function(){return new Lp(this)}},itemIdPath:{type:String,value:null},expandedItems:{type:Object,notify:!0,value:()=>[]}}}static get observers(){return["_sizeChanged(size)","_itemIdPathChanged(itemIdPath)","_expandedItemsChanged(expandedItems.*)"]}_sizeChanged(t){const e=t-this._cache.size;this._cache.size+=e,this._cache.effectiveSize+=e,this._effectiveSize=this._cache.effectiveSize}_updateRowItem(t,e){e.children.forEach(e=>{e._instance&&(e._instance.item=t)})}_getItem(t,e){if(t>=this._effectiveSize)return;e.index=t;const{cache:n,scaledIndex:r}=this._cache.getCacheAndIndex(t),i=n.items[r];i?(this._toggleAttribute("loading",!1,e),this._updateItem(e,i),this._isExpanded(i)&&n.ensureSubCacheForScaledIndex(r)):(this._toggleAttribute("loading",!0,e),this._loadPage(this._getPageForIndex(r),n))}_pagesForPhysicalItems(){return[this._getPageForIndex(this._firstVisibleIndex+this._vidxOffset)].concat(this._physicalItems.filter(t=>t.index).items(t=>this._getPageForIndex(t.index))).reduce((t,e)=>(-1===t.indexOf(e)&&t.push(e),t),[])}_expandedInstanceChangedCallback(t,e){void 0!==t.item&&(e?this.expandItem(t.item):this.collapseItem(t.item))}getItemId(t){return this.itemIdPath?this.get(this.itemIdPath,t):t}_isExpanded(t){return this.__expandedKeys.has(this.getItemId(t))}_expandedItemsChanged(t){this.__cacheExpandedKeys(),this._cache.updateSize(),this._effectiveSize=this._cache.effectiveSize,this._assignModels()}_itemIdPathChanged(t){this.__cacheExpandedKeys()}__cacheExpandedKeys(){this.expandedItems&&(this.__expandedKeys=new Set,this.expandedItems.forEach(t=>{this.__expandedKeys.add(this.getItemId(t))}))}expandItem(t){this._isExpanded(t)||this.push("expandedItems",t)}collapseItem(t){this._isExpanded(t)&&this.splice("expandedItems",this._getItemIndexInArray(t,this.expandedItems),1)}_getIndexLevel(t){let{cache:e}=this._cache.getCacheAndIndex(t),n=0;for(;e.parentCache;)e=e.parentCache,n++;return n}_canPopulate(){return this._hasData&&this._columnTree}_loadPage(t,e){if(!e.pendingRequests[t]&&this.dataProvider){this._setLoading(!0),e.pendingRequests[t]=!0;const n={page:t,pageSize:this.pageSize,sortOrders:this._mapSorters(),filters:this._mapFilters(),parentItem:e.parentItem};this.dataProvider(n,(r,i)=>{void 0!==i?e.size=i:n.parentItem&&(e.size=r.length);const s=Array.from(this.$.items.children).map(t=>t._item);r.forEach((n,r)=>{const i=t*this.pageSize+r;e.items[i]=n,this._isExpanded(n)&&s.indexOf(n)>-1&&e.ensureSubCacheForScaledIndex(i)}),this._hasData=!0,delete e.pendingRequests[t],this._setLoading(!1),this._cache.updateSize(),this._effectiveSize=this._cache.effectiveSize,Array.from(this.$.items.children).filter(t=>!t.hidden).forEach(t=>{const e=this._cache.getItemForIndex(t.index);e&&(this._toggleAttribute("loading",!1,t),this._updateItem(t,e))}),this._increasePoolIfNeeded(0),this.__itemsReceived()})}}_getPageForIndex(t){return Math.floor(t/this.pageSize)}clearCache(){this._cache=new Lp(this),Array.from(this.$.items.children).forEach(t=>{Array.from(t.children).forEach(t=>{t._instance&&t._instance._setPendingProperty("item",{},!1)})}),this._cache.size=this.size||0,this._cache.updateSize(),this._hasData=!1,this._assignModels(),this._effectiveSize||this._loadPage(0,this._cache)}_flushItemsDebouncer(){this._debouncerLoad&&this._debouncerLoad.flush()}_pageSizeChanged(t,e){void 0!==e&&t!==e&&this.clearCache()}_checkSize(){void 0===this.size&&0===this._effectiveSize&&console.warn("The <vaadin-grid> needs the total number of items in order to display rows. Set the total number of items to the `size` property, or provide the total number of items in the second argument of the `dataProvider`’s `callback` call.")}_dataProviderChanged(t,e){void 0!==e&&this.clearCache(),t&&this.items&&this.items.length&&this._scrollToIndex(this._firstVisibleIndex),this._ensureFirstPageLoaded(),this._debouncerCheckSize=rh.debounce(this._debouncerCheckSize,nc.after(2e3),this._checkSize.bind(this)),this._scrollHandler()}_ensureFirstPageLoaded(){this._hasData||this._loadPage(0,this._cache,()=>{const t=this._hasData;this._hasData=!0,t||this.notifyResize()})}_itemsEqual(t,e){return this.getItemId(t)===this.getItemId(e)}_getItemIndexInArray(t,e){let n=-1;return e.forEach((e,r)=>{this._itemsEqual(e,t)&&(n=r)}),n}}),Hp=t=>(class extends t{ready(){super.ready(),this._addNodeObserver()}_hasColumnGroups(t){for(let e=0;e<t.length;e++)if("vaadin-grid-column-group"===t[e].localName)return!0;return!1}_getChildColumns(t){return rd.getFlattenedNodes(t).filter(this._isColumnElement)}_flattenColumnGroups(t){return t.map(t=>"vaadin-grid-column-group"===t.localName?this._getChildColumns(t):[t]).reduce((t,e)=>t.concat(e),[])}_getColumnTree(){for(var t=[],e=rd.getFlattenedNodes(this).filter(this._isColumnElement);t.push(e),this._hasColumnGroups(e);)e=this._flattenColumnGroups(e);return t}_updateColumnTree(){var t=this._getColumnTree();this._arrayEquals(t,this._columnTree)||(this._columnTree=t)}_addNodeObserver(){this._observer=new rd(this,t=>{const e=t.addedNodes.filter(t=>"template"===t.localName&&t.classList.contains("row-details"))[0];e&&this._rowDetailsTemplate!==e&&(this._rowDetailsTemplate=e),(t.addedNodes.filter(this._isColumnElement).length>0||t.removedNodes.filter(this._isColumnElement).length>0)&&this._updateColumnTree(),this._debouncerCheckImports=rh.debounce(this._debouncerCheckImports,nc.after(2e3),this._checkImports.bind(this)),this._ensureFirstPageLoaded()})}_arrayEquals(t,e){if(!t||!e||t.length!=e.length)return!1;for(var n=0,r=t.length;n<r;n++)if(t[n]instanceof Array&&e[n]instanceof Array){if(!this._arrayEquals(t[n],e[n]))return!1}else if(t[n]!=e[n])return!1;return!0}_checkImports(){["vaadin-grid-column-group","vaadin-grid-filter","vaadin-grid-filter-column","vaadin-grid-tree-toggle","vaadin-grid-selection-column","vaadin-grid-sort-column","vaadin-grid-sorter"].forEach(t=>{var e=this.querySelector(t);!e||e instanceof nh||console.warn(`Make sure you have imported the required module for <${t}> element.`)})}_updateFirstAndLastColumn(){Array.from(this.shadowRoot.querySelectorAll("tr")).forEach(t=>this._updateFirstAndLastColumnForRow(t))}_updateFirstAndLastColumnForRow(t){Array.from(t.querySelectorAll('[part~="cell"]:not([part~="details-cell"])')).sort((t,e)=>t._column._order-e._column._order).forEach((t,e,n)=>{this._toggleAttribute("first-column",0===e,t),this._toggleAttribute("last-column",e===n.length-1,t)})}_isColumnElement(t){return t.nodeType===Node.ELEMENT_NODE&&/\bcolumn\b/.test(t.localName)}}),Bp=t=>(class extends t{getEventContext(t){const e={},n=t.composedPath(),r=n[n.indexOf(this.$.table)-3];return r?(e.section=["body","header","footer","details"].filter(t=>r.getAttribute("part").indexOf(t)>-1)[0],r._column&&(e.column=r._column),"body"!==e.section&&"details"!==e.section||Object.assign(e,this.__getRowModel(r.parentElement)),e):e}}),Vp=t=>(class extends t{static get properties(){return{_filters:{type:Array,value:function(){return[]}}}}ready(){super.ready(),this.addEventListener("filter-changed",this._filterChanged.bind(this))}_filterChanged(t){-1===this._filters.indexOf(t.target)&&this._filters.push(t.target),t.stopPropagation(),this.dataProvider&&this.clearCache()}_mapFilters(){return this._filters.map(t=>({path:t.path,value:t.value}))}});
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/
class Up extends class extends nh{}{static get is(){return"vaadin-grid-templatizer"}static get properties(){return{dataHost:Object,template:Object,_templateInstances:{type:Array,value:function(){return[]}},_parentPathValues:{value:function(){return{}}},_grid:Object}}static get observers(){return["_templateInstancesChanged(_templateInstances.*, _parentPathValues.*)"]}constructor(){super(),this._instanceProps={detailsOpened:!0,index:!0,item:!0,selected:!0,expanded:!0,level:!0}}createInstance(){this._ensureTemplatized();const t=new this._TemplateClass({});return this.addInstance(t),t}addInstance(t){-1===this._templateInstances.indexOf(t)&&(this._templateInstances.push(t),requestAnimationFrame(()=>this.notifyPath("_templateInstances.*",this._templateInstances)))}removeInstance(t){const e=this._templateInstances.indexOf(t);this.splice("_templateInstances",e,1)}_ensureTemplatized(){this._TemplateClass||(this._TemplateClass=Yu(this.template,this,{instanceProps:this._instanceProps,parentModel:!0,forwardHostProp:function(t,e){this._forwardParentProp(t,e),this._templateInstances&&this._templateInstances.forEach(n=>n.notifyPath(t,e))},notifyInstanceProp:function(t,e,n){if("index"===e||"item"===e)return;const r=`__${e}__`;if(t[r]===n)return;t[r]=n;const i=Array.from(this._grid.$.items.children).filter(e=>this._grid._itemsEqual(e._item,t.item))[0];i&&Array.from(i.children).forEach(t=>{t._instance&&(t._instance[r]=n,t._instance.notifyPath(e,n))});if(Array.isArray(this._grid.items)&&0===e.indexOf("item.")){const r=this._grid.items.indexOf(t.item),i=e.slice("item.".length);this._grid.notifyPath(`items.${r}.${i}`,n)}const s=`_${e}InstanceChangedCallback`;this._grid&&this._grid[s]&&this._grid[s](t,n)}}))}_forwardParentProp(t,e){this._parentPathValues[t]=e,this._templateInstances.forEach(n=>n.notifyPath(t,e))}_templateInstancesChanged(t,e){let n,r;if("_templateInstances"===t.path)n=0,r=this._templateInstances.length;else{if("_templateInstances.splices"!==t.path)return;n=t.value.index,r=t.value.addedCount}Object.keys(this._parentPathValues||{}).forEach(t=>{for(var e=n;e<n+r;e++)this._templateInstances[e].set(t,this._parentPathValues[t])})}}customElements.define(Up.is,Up);
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/
const $p=t=>(class extends t{static get properties(){return{detailsOpenedItems:{type:Array,value:function(){return[]}},_rowDetailsTemplate:Object,rowDetailsRenderer:Function,_detailsCells:{type:Array}}}static get observers(){return["_detailsOpenedItemsChanged(detailsOpenedItems.*, _rowDetailsTemplate, rowDetailsRenderer)","_rowDetailsTemplateOrRendererChanged(_rowDetailsTemplate, rowDetailsRenderer)"]}_rowDetailsTemplateOrRendererChanged(t,e){if(t&&e)throw new Error("You should only use either a renderer or a template for row details");if(t||e){if(t&&!t.templatizer){var n=new Up;n._grid=this,n.dataHost=this.dataHost,n.template=t,t.templatizer=n}this._columnTree&&Array.from(this.$.items.children).forEach(t=>{t.querySelector("[part~=details-cell]")||(this._updateRow(t,this._columnTree[this._columnTree.length-1]),this._a11yUpdateRowDetailsOpened(t,!1)),delete t.querySelector("[part~=details-cell]")._instance}),this.detailsOpenedItems.length&&(Array.from(this.$.items.children).forEach(this._toggleDetailsCell,this),this._update())}}_detailsOpenedItemsChanged(t,e,n){"detailsOpenedItems.length"!==t.path&&t.value&&Array.from(this.$.items.children).forEach(t=>{this._toggleDetailsCell(t,t._item),this._a11yUpdateRowDetailsOpened(t,this._isDetailsOpened(t._item)),this._toggleAttribute("details-opened",this._isDetailsOpened(t._item),t)})}_configureDetailsCell(t){t.setAttribute("part","cell details-cell"),this._toggleAttribute("frozen",!0,t)}_toggleDetailsCell(t,e){const n=t.querySelector('[part~="details-cell"]');if(!n)return;const r=!this._isDetailsOpened(e),i=!!n.hidden!==r;(n._instance||n._renderer)&&n.hidden===r||(n.hidden=r,r?t.style.removeProperty("padding-bottom"):(this.rowDetailsRenderer?(n._renderer=this.rowDetailsRenderer,n._renderer.call(this,n._content,this,{index:t.index,item:e})):this._rowDetailsTemplate&&!n._instance&&(n._instance=this._rowDetailsTemplate.templatizer.createInstance(),n._content.innerHTML="",n._content.appendChild(n._instance.root),this._updateItem(t,e)),hu(),t.style.setProperty("padding-bottom",`${n.offsetHeight}px`),requestAnimationFrame(()=>this.notifyResize()))),i&&(this._updateMetrics(),this._positionItems())}_updateDetailsCellHeights(){Array.from(this.$.items.querySelectorAll('[part~="details-cell"]:not([hidden])')).forEach(t=>{t.parentElement.style.setProperty("padding-bottom",`${t.offsetHeight}px`)})}_isDetailsOpened(t){return this.detailsOpenedItems&&-1!==this._getItemIndexInArray(t,this.detailsOpenedItems)}openItemDetails(t){this._isDetailsOpened(t)||this.push("detailsOpenedItems",t)}closeItemDetails(t){this._isDetailsOpened(t)&&this.splice("detailsOpenedItems",this._getItemIndexInArray(t,this.detailsOpenedItems),1)}_detailsOpenedInstanceChangedCallback(t,e){super._detailsOpenedInstanceChangedCallback&&super._detailsOpenedInstanceChangedCallback(t,e),e?this.openItemDetails(t.item):this.closeItemDetails(t.item)}}),jp=t=>(class extends t{get _timeouts(){return{SCROLL_PERIOD:1e3,WHEEL_SCROLLING:200,SCROLLING:100,IGNORE_WHEEL:500}}static get properties(){return{_frozenCells:{type:Array,value:function(){return[]}},_scrollbarWidth:{type:Number,value:function(){var t=document.createElement("div");t.style.width="100px",t.style.height="100px",t.style.overflow="scroll",t.style.position="absolute",t.style.top="-9999px",document.body.appendChild(t);var e=t.offsetWidth-t.clientWidth;return document.body.removeChild(t),e}},_rowWithFocusedElement:Element,_deltaYAcc:{type:Number,value:0}}}static get observers(){return["_scrollHeightUpdated(_estScrollHeight)","_scrollViewportHeightUpdated(_viewportHeight)"]}set _scrollTop(t){this.$.table.scrollTop=t}get _scrollTop(){return this.$.table.scrollTop}constructor(){super(),this._scrollLineHeight=this._getScrollLineHeight()}_getScrollLineHeight(){const t=document.createElement("div");t.style.fontSize="initial",t.style.display="none",document.body.appendChild(t);const e=window.getComputedStyle(t).fontSize;return document.body.removeChild(t),e?window.parseInt(e):void 0}_scrollViewportHeightUpdated(t){this._scrollPageHeight=t-this.$.header.clientHeight-this.$.footer.clientHeight-this._scrollLineHeight}ready(){super.ready(),this.scrollTarget=this.$.table,this.addEventListener("wheel",t=>{this._wheelScrolling=!0,this._debouncerWheelScrolling=rh.debounce(this._debouncerWheelScrolling,nc.after(this._timeouts.WHEEL_SCROLLING),()=>this._wheelScrolling=!1),this._onWheel(t)}),this.$.table.addEventListener("scroll",t=>{this.$.outerscroller.outerScrolling&&t.stopImmediatePropagation()},!0),this.$.items.addEventListener("focusin",t=>{const e=t.composedPath().indexOf(this.$.items);this._rowWithFocusedElement=t.composedPath()[e-1]}),this.$.items.addEventListener("focusout",()=>this._rowWithFocusedElement=void 0)}scrollToIndex(t){this._accessIronListAPI(()=>super.scrollToIndex(t))}_onWheel(t){if(t.ctrlKey||this._hasScrolledAncestor(t.target,t.deltaX,t.deltaY))return;const e=this.$.table;let n=t.deltaY;if(t.deltaMode===WheelEvent.DOM_DELTA_LINE?n*=this._scrollLineHeight:t.deltaMode===WheelEvent.DOM_DELTA_PAGE&&(n*=this._scrollPageHeight),this._wheelAnimationFrame)return this._deltaYAcc+=n,void t.preventDefault();n+=this._deltaYAcc,this._deltaYAcc=0,this._wheelAnimationFrame=!0,this._debouncerWheelAnimationFrame=rh.debounce(this._debouncerWheelAnimationFrame,rc,()=>this._wheelAnimationFrame=!1);var r=Math.abs(t.deltaX)+Math.abs(n);this._canScroll(e,t.deltaX,n)?(t.preventDefault(),e.scrollTop+=n,e.scrollLeft+=t.deltaX,this._scrollHandler(),this._hasResidualMomentum=!0,this._ignoreNewWheel=!0,this._debouncerIgnoreNewWheel=rh.debounce(this._debouncerIgnoreNewWheel,nc.after(this._timeouts.IGNORE_WHEEL),()=>this._ignoreNewWheel=!1)):this._hasResidualMomentum&&r<=this._previousMomentum||this._ignoreNewWheel?t.preventDefault():r>this._previousMomentum&&(this._hasResidualMomentum=!1),this._previousMomentum=r}_hasScrolledAncestor(t,e,n){return"vaadin-grid-cell-content"!==t.localName&&(!(!this._canScroll(t,e,n)||-1===["auto","scroll"].indexOf(getComputedStyle(t).overflow))||(t!==this&&t.parentElement?this._hasScrolledAncestor(t.parentElement,e,n):void 0))}_canScroll(t,e,n){return n>0&&t.scrollTop<t.scrollHeight-t.offsetHeight||n<0&&t.scrollTop>0||e>0&&t.scrollLeft<t.scrollWidth-t.offsetWidth||e<0&&t.scrollLeft>0}_scheduleScrolling(){this._scrollingFrame||(this._scrollingFrame=requestAnimationFrame(()=>this._toggleAttribute("scrolling",!0,this.$.scroller))),this._debounceScrolling=rh.debounce(this._debounceScrolling,nc.after(this._timeouts.SCROLLING),()=>{cancelAnimationFrame(this._scrollingFrame),delete this._scrollingFrame,this._toggleAttribute("scrolling",!1,this.$.scroller),this.$.outerscroller.outerScrolling||this._reorderRows()}),this._scrollPeriodFrame||(this._scrollPeriodFrame=requestAnimationFrame(()=>this._toggleAttribute("scroll-period",!0,this.$.scroller))),this._debounceScrollPeriod=rh.debounce(this._debounceScrollPeriod,nc.after(this._timeouts.SCROLL_PERIOD),()=>{cancelAnimationFrame(this._scrollPeriodFrame),delete this._scrollPeriodFrame,this._toggleAttribute("scroll-period",!1,this.$.scroller)})}_afterScroll(){this._translateStationaryElements(),this.hasAttribute("reordering")||this._scheduleScrolling();const t=this.$.outerscroller;if(this._ios||!this._wheelScrolling&&!t.passthrough||t.syncOuterScroller(),this._ios){const e=Math.max(-t.scrollTop,0)||Math.min(0,t.scrollHeight-t.scrollTop-t.offsetHeight);this.$.items.style.transform=`translateY(${e}px)`}this._updateOverflow()}_updateOverflow(){let t="";const e=this.$.table;e.scrollTop<e.scrollHeight-e.clientHeight&&(t+=" bottom"),e.scrollTop>0&&(t+=" top"),e.scrollLeft<e.scrollWidth-e.clientWidth&&(t+=" right"),e.scrollLeft>0&&(t+=" left"),this._debounceOverflow=rh.debounce(this._debounceOverflow,rc,()=>{const e=t.trim();e.length>0&&this.getAttribute("overflow")!==e?this.setAttribute("overflow",e):0==e.length&&this.hasAttribute("overflow")&&this.removeAttribute("overflow")})}_reorderRows(){const t=this.$.items,e=t.querySelectorAll("tr");if(!e.length)return;const n=this._virtualStart+this._vidxOffset,r=this._rowWithFocusedElement||Array.from(e).filter(t=>!t.hidden)[0];if(!r)return;const i=r.index-n,s=Array.from(e).indexOf(r)-i;if(s>0)for(let n=0;n<s;n++)t.appendChild(e[n]);else if(s<0)for(let n=e.length+s;n<e.length;n++)t.insertBefore(e[n],e[0])}_frozenCellsChanged(){this._debouncerCacheElements=rh.debounce(this._debouncerCacheElements,sc,()=>{Array.from(this.root.querySelectorAll('[part~="cell"]')).forEach(function(t){t.style.transform=""}),this._frozenCells=Array.prototype.slice.call(this.$.table.querySelectorAll("[frozen]")),this._translateStationaryElements()}),this._updateLastFrozen()}_updateLastFrozen(){if(!this._columnTree)return;const t=this._columnTree[this._columnTree.length-1].slice(0);t.sort((t,e)=>t._order-e._order);const e=t.reduce((t,e,n)=>(e._lastFrozen=!1,e.frozen&&!e.hidden?n:t),void 0);void 0!==e&&(t[e]._lastFrozen=!0)}_translateStationaryElements(){this._edge&&!this._scrollbarWidth?(this.$.items.style.transform=this._getTranslate(-this._scrollLeft||0,-this._scrollTop||0),this.$.footer.style.transform=this.$.header.style.transform=this._getTranslate(-this._scrollLeft||0,0)):this.$.footer.style.transform=this.$.header.style.transform=this._getTranslate(0,this._scrollTop);for(var t=this._getTranslate(this._scrollLeft,0),e=0;e<this._frozenCells.length;e++)this._frozenCells[e].style.transform=t}_getTranslate(t,e){return"translate("+t+"px,"+e+"px)"}_scrollHeightUpdated(t){this.$.outersizer.style.top=this.$.fixedsizer.style.top=t+"px"}}),qp=t=>(class extends t{static get properties(){return{selectedItems:{type:Object,notify:!0,value:()=>[]}}}static get observers(){return["_selectedItemsChanged(selectedItems.*)"]}_isSelected(t){return this.selectedItems&&this._getItemIndexInArray(t,this.selectedItems)>-1}selectItem(t){this._isSelected(t)||this.push("selectedItems",t)}deselectItem(t){const e=this._getItemIndexInArray(t,this.selectedItems);e>-1&&this.splice("selectedItems",e,1)}_toggleItem(t){-1===this._getItemIndexInArray(t,this.selectedItems)?this.selectItem(t):this.deselectItem(t)}_selectedItemsChanged(t){!this.$.items.children.length||"selectedItems"!==t.path&&"selectedItems.splices"!==t.path||Array.from(this.$.items.children).forEach(t=>{this._updateItem(t,t._item)})}_selectedInstanceChangedCallback(t,e){super._selectedInstanceChangedCallback&&super._selectedInstanceChangedCallback(t,e),e?this.selectItem(t.item):this.deselectItem(t.item)}}),Gp=t=>(class extends t{static get properties(){return{multiSort:{type:Boolean,value:!1},_sorters:{type:Array,value:function(){return[]}},_previousSorters:{type:Array,value:function(){return[]}}}}ready(){super.ready(),this.addEventListener("sorter-changed",this._onSorterChanged),window.ShadyDOM&&sc.run(()=>{const t=this.querySelectorAll("vaadin-grid-sorter");Array.from(t).forEach(t=>{t instanceof nh&&t.dispatchEvent(new CustomEvent("sorter-changed",{bubbles:!0,composed:!0}))})})}_onSorterChanged(t){const e=t.target;this._removeArrayItem(this._sorters,e),e._order=null,this.multiSort?(e.direction&&this._sorters.unshift(e),this._sorters.forEach((t,e)=>t._order=this._sorters.length>1?e:null,this)):e.direction&&(this._sorters.forEach(t=>{t._order=null,t.direction=null}),this._sorters=[e]),t.stopPropagation(),this.dataProvider&&JSON.stringify(this._previousSorters)!==JSON.stringify(this._mapSorters())&&this.clearCache(),this._a11yUpdateSorters(),this._previousSorters=this._mapSorters()}_mapSorters(){return this._sorters.map(t=>({path:t.path,direction:t.direction}))}_removeArrayItem(t,e){const n=t.indexOf(e);n>-1&&t.splice(n,1)}}),Yp=t=>(class extends t{static get properties(){return{cellClassNameGenerator:Function}}static get observers(){return["__cellClassNameGeneratorChanged(cellClassNameGenerator)"]}__cellClassNameGeneratorChanged(t){this.generateCellClassNames()}generateCellClassNames(){Array.from(this.$.items.children).filter(t=>!t.hidden).forEach(t=>this._generateCellClassNames(t,this.__getRowModel(t)))}_generateCellClassNames(t,e){Array.from(t.children).forEach(t=>{if(t.__generatedClasses&&t.__generatedClasses.forEach(e=>t.classList.remove(e)),this.cellClassNameGenerator){const n=this.cellClassNameGenerator(t._column,e);t.__generatedClasses=n&&n.split(" ").filter(t=>t.length>0),t.__generatedClasses&&t.__generatedClasses.forEach(e=>t.classList.add(e))}})}}),Wp="between",Xp="on-top-or-between",Jp="on-grid",Kp="on-top",Zp="above",Qp="below",tf="empty",ef=t=>(class extends t{static get properties(){return{dropMode:String,rowsDraggable:Boolean,dragFilter:Function,dropFilter:Function,__dndAutoScrollThreshold:{value:50}}}static get observers(){return["_dragDropAccessChanged(rowsDraggable, dropMode, dragFilter, dropFilter)"]}ready(){super.ready(),this.$.table.addEventListener("dragstart",this._onDragStart.bind(this)),this.$.table.addEventListener("dragend",this._onDragEnd.bind(this)),this.$.table.addEventListener("dragover",this._onDragOver.bind(this)),this.$.table.addEventListener("dragleave",this._onDragLeave.bind(this)),this.$.table.addEventListener("drop",this._onDrop.bind(this)),this.$.table.addEventListener("dragenter",t=>{this.dropMode&&(t.preventDefault(),t.stopPropagation())})}_onDragStart(t){if(this.rowsDraggable){let e=t.target;if("vaadin-grid-cell-content"===e.localName&&(e=e.assignedSlot.parentNode.parentNode),e.parentNode!==this.$.items)return;if(t.stopPropagation(),this._toggleAttribute("dragging-rows",!0,this),this._safari){const t=e.style.transform;e.style.top=/translateY\((.*)\)/.exec(t)[1],e.style.transform="none",requestAnimationFrame(()=>{e.style.top="",e.style.transform=t})}const n=e.getBoundingClientRect();window.ShadyDOM||(this._ios?t.dataTransfer.setDragImage(e):t.dataTransfer.setDragImage(e,t.clientX-n.left,t.clientY-n.top));let r=[e];this._isSelected(e._item)&&(r=this.__getViewportRows().filter(t=>this._isSelected(t._item)).filter(t=>!this.dragFilter||this.dragFilter(this.__getRowModel(t)))),t.dataTransfer.setData("text",this.__formatDefaultTransferData(r)),e.setAttribute("dragstart",r.length>1?r.length:""),this.updateStyles({"--_grid-drag-start-x":`${t.clientX-n.left+20}px`,"--_grid-drag-start-y":`${t.clientY-n.top+10}px`}),requestAnimationFrame(()=>{e.removeAttribute("dragstart"),this.updateStyles({"--_grid-drag-start-x":"","--_grid-drag-start-y":""})});const i=new CustomEvent("grid-dragstart",{detail:{draggedItems:r.map(t=>t._item),setDragData:(e,n)=>t.dataTransfer.setData(e,n),setDraggedItemsCount:t=>e.setAttribute("dragstart",t)}});i.originalEvent=t,this.dispatchEvent(i)}}_onDragEnd(t){this._toggleAttribute("dragging-rows",!1,this),t.stopPropagation();const e=new CustomEvent("grid-dragend");e.originalEvent=t,this.dispatchEvent(e)}_onDragLeave(t){t.stopPropagation(),this._clearDragStyles()}_onDragOver(t){if(this.dropMode){if(this._dropLocation=void 0,this._dragOverItem=void 0,this.__dndAutoScroll(t.clientY))return void this._clearDragStyles();let e=t.composedPath().filter(t=>"tr"===t.localName)[0];if(this._effectiveSize&&this.dropMode!==Jp)if(e&&e.parentNode===this.$.items){const n=e.getBoundingClientRect();if(this._dropLocation=Kp,this.dropMode===Wp){const e=t.clientY-n.top<n.bottom-t.clientY;this._dropLocation=e?Zp:Qp}else this.dropMode===Xp&&(t.clientY-n.top<n.height/3?this._dropLocation=Zp:t.clientY-n.top>n.height/3*2&&(this._dropLocation=Qp))}else{if(e)return;if(this.dropMode!==Wp&&this.dropMode!==Xp)return;e=Array.from(this.$.items.children).filter(t=>!t.hidden).pop(),this._dropLocation=Qp}else this._dropLocation=tf;if(e&&e.hasAttribute("drop-disabled"))return void(this._dropLocation=void 0);t.stopPropagation(),t.preventDefault(),this._dropLocation===tf?this._toggleAttribute("dragover",!0,this):e?(this._dragOverItem=e._item,e.getAttribute("dragover")!==this._dropLocation&&e.setAttribute("dragover",this._dropLocation)):this._clearDragStyles()}}__dndAutoScroll(t){if(this.__dndAutoScrolling)return!0;const e=this.$.header.getBoundingClientRect().bottom,n=this.$.footer.getBoundingClientRect().top,r=e-t+this.__dndAutoScrollThreshold,i=t-n+this.__dndAutoScrollThreshold;let s=0;if(i>0?s=2*i:r>0&&(s=2*-r),s){const t=this.$.table.scrollTop;if(this.$.table.scrollTop+=s,t!==this.$.table.scrollTop)return this.__dndAutoScrolling=!0,setTimeout(()=>this.__dndAutoScrolling=!1,20),this._scrollHandler(),!0}}__getViewportRows(){const t=this.$.header.getBoundingClientRect().bottom,e=this.$.footer.getBoundingClientRect().top;return Array.from(this.$.items.children).filter(n=>{const r=n.getBoundingClientRect();return r.bottom>t&&r.top<e})}_clearDragStyles(){this.removeAttribute("dragover"),Array.from(this.$.items.children).forEach(t=>t.removeAttribute("dragover"))}_onDrop(t){if(this.dropMode){t.stopPropagation(),t.preventDefault();const e=t.dataTransfer.types&&Array.from(t.dataTransfer.types).map(e=>({type:e,data:t.dataTransfer.getData(e)}));this._clearDragStyles();const n=new CustomEvent("grid-drop",{bubbles:t.bubbles,cancelable:t.cancelable,detail:{dropTargetItem:this._dragOverItem,dropLocation:this._dropLocation,dragData:e}});n.originalEvent=t,this.dispatchEvent(n)}}__formatDefaultTransferData(t){return t.map(t=>Array.from(t.children).filter(t=>!t.hidden&&-1===t.getAttribute("part").indexOf("details-cell")).sort((t,e)=>t._column._order>e._column._order?1:-1).map(t=>t._content.textContent.trim()).filter(t=>t).join("\t")).join("\n")}_dragDropAccessChanged(t,e,n,r){this.filterDragAndDrop()}filterDragAndDrop(){Array.from(this.$.items.children).filter(t=>!t.hidden).forEach(t=>{this._filterDragAndDrop(t,this.__getRowModel(t))})}_filterDragAndDrop(t,e){const n=!this.rowsDraggable||this.dragFilter&&!this.dragFilter(e),r=!this.dropMode||this.dropFilter&&!this.dropFilter(e);(window.ShadyDOM?[t]:Array.from(t.children).map(t=>t._content)).forEach(t=>{n?t.removeAttribute("draggable"):t.setAttribute("draggable",!0)}),this._toggleAttribute("drag-disabled",n,t),this._toggleAttribute("drop-disabled",r,t)}}),nf=t=>(class extends t{static get properties(){return{_headerFocusable:{type:Object,observer:"_focusableChanged"},_itemsFocusable:{type:Object,observer:"_focusableChanged"},_footerFocusable:{type:Object,observer:"_focusableChanged"},_navigatingIsHidden:Boolean,_focusedItemIndex:{type:Number,value:0},_focusedColumnOrder:Number}}ready(){super.ready(),this._ios||this._android||(this.addEventListener("keydown",this._onKeyDown),this.addEventListener("focusin",this._onFocusIn),this.addEventListener("focusout",this._onFocusOut),this.$.table.addEventListener("focusin",this._onCellFocusIn.bind(this)),this.$.table.addEventListener("focusout",this._onCellFocusOut.bind(this)),this.addEventListener("mousedown",()=>{this._toggleAttribute("navigating",!1,this),this._isMousedown=!0}),this.addEventListener("mouseup",()=>this._isMousedown=!1))}_focusableChanged(t,e){e&&e.setAttribute("tabindex","-1"),t&&t.setAttribute("tabindex","0")}_onKeyDown(t){let e,n=t.key;switch("Up"!==n&&"Down"!==n&&"Left"!==n&&"Right"!==n||(n="Arrow"+n),"Esc"===n&&(n="Escape"),"Spacebar"===n&&(n=" "),n){case"ArrowUp":case"ArrowDown":case"ArrowLeft":case"ArrowRight":case"PageUp":case"PageDown":case"Home":case"End":e="Navigation";break;case"Enter":case"Escape":case"F2":e="Interaction";break;case"Tab":e="Tab";break;case" ":e="Space"}this._detectInteracting(t),this.hasAttribute("interacting")&&"Interaction"!==e&&(e=void 0),e&&this[`_on${e}KeyDown`](t,n)}_ensureScrolledToIndex(t){Array.from(this.$.items.children).filter(e=>e.index===t)[0]||this._scrollToIndex(t)}_onNavigationKeyDown(t,e){function n(t){return Array.prototype.indexOf.call(t.parentNode.children,t)}t.preventDefault();const r=this._lastVisibleIndex-this._firstVisibleIndex-1;let i=0,s=0;switch(e){case"ArrowRight":i=1;break;case"ArrowLeft":i=-1;break;case"Home":i=-1/0,t.ctrlKey&&(s=-1/0);break;case"End":i=1/0,t.ctrlKey&&(s=1/0);break;case"ArrowDown":s=1;break;case"ArrowUp":s=-1;break;case"PageDown":s=r;break;case"PageUp":s=-r}const o=t.composedPath()[0],a=n(o),l=this._elementMatches(o,'[part~="details-cell"]'),c=o.parentNode,h=c.parentNode,d=(h===this.$.items?this._effectiveSize:h.children.length)-1,u=h===this.$.items?void 0!==this._focusedItemIndex?this._focusedItemIndex:c.index:n(c);let p=Math.max(0,Math.min(u+s,d)),f=!1;if(h===this.$.items){const t=c._item,e=this._cache.getItemForIndex(p);(f=l?0===s:1===s&&this._isDetailsOpened(t)||-1===s&&p!==u&&this._isDetailsOpened(e))!==l&&(1===s&&f||-1===s&&!f)&&(p=u)}if(h!==this.$.items)if(p>u)for(;p<d&&h.children[p].hidden;)p++;else if(p<u)for(;p>0&&h.children[p].hidden;)p--;void 0===this._focusedColumnOrder&&(this._focusedColumnOrder=l?0:this._getColumns(h,u)[a]._order);const _=this._getColumns(h,p),m=_.filter(t=>!t.hidden).map(t=>t._order).sort((t,e)=>t-e),g=m.length-1,y=m.indexOf(m.slice(0).sort((t,e)=>Math.abs(t-this._focusedColumnOrder)-Math.abs(e-this._focusedColumnOrder))[0]),v=0===s&&l?y:Math.max(0,Math.min(y+i,g));v!==y&&(this._focusedColumnOrder=void 0),h===this.$.items&&this._ensureScrolledToIndex(p),this._toggleAttribute("navigating",!0,this);const b=_.reduce((t,e,n)=>(t[e._order]=n,t),{})[m[v]],w=h===this.$.items?Array.from(h.children).filter(t=>t.index===p)[0]:h.children[p];if(!w)return;const x=f?Array.from(w.children).filter(t=>this._elementMatches(t,'[part~="details-cell"]'))[0]:w.children[b];if(this._scrollHorizontallyToCell(x),h===this.$.items&&(this._focusedItemIndex=p),h===this.$.items){const t=x.getBoundingClientRect(),e=this.$.footer.getBoundingClientRect().top,n=this.$.header.getBoundingClientRect().bottom;t.bottom>e?(this.$.table.scrollTop+=t.bottom-e,this._scrollHandler()):t.top<n&&(this.$.table.scrollTop-=n-t.top,this._scrollHandler())}x.focus()}_parseEventPath(t){const e=t.indexOf(this.$.table);return{rowGroup:t[e-1],row:t[e-2],cell:t[e-3]}}_onInteractionKeyDown(t,e){const n=t.composedPath()[0],r="input"===n.localName&&!/^(button|checkbox|color|file|image|radio|range|reset|submit)$/i.test(n.type);let i;switch(e){case"Enter":i=!this.hasAttribute("interacting")||!r;break;case"Escape":i=!1;break;case"F2":i=!this.hasAttribute("interacting")}const{cell:s}=this._parseEventPath(t.composedPath());if(this.hasAttribute("interacting")!==i)if(i){const e=s._content.querySelector("[focus-target]")||s._content.firstElementChild;e&&(t.preventDefault(),e.focus(),this._toggleAttribute("interacting",!0,this),this._toggleAttribute("navigating",!1,this))}else t.preventDefault(),this._focusedColumnOrder=void 0,s.focus(),this._toggleAttribute("interacting",!1,this),this._toggleAttribute("navigating",!0,this)}_predictFocusStepTarget(t,e){const n=[this.$.table,this._headerFocusable,this._itemsFocusable,this._footerFocusable,this.$.focusexit];let r=n.indexOf(t);for(r+=e;r>=0&&r<=n.length-1&&(!n[r]||n[r].parentNode.hidden);)r+=e;return n[r]}_onTabKeyDown(t){const e=this._predictFocusStepTarget(t.composedPath()[0],t.shiftKey?-1:1);if(e===this.$.table)this.$.table.focus();else if(e===this.$.focusexit)this.$.focusexit.focus();else if(e===this._itemsFocusable){let n=e;const r=this._itemsFocusable.parentNode;if(this._ensureScrolledToIndex(this._focusedItemIndex),r.index!==this._focusedItemIndex){const t=Array.from(r.children).indexOf(this._itemsFocusable),e=Array.from(this.$.items.children).filter(t=>t.index===this._focusedItemIndex)[0];e&&(n=e.children[t])}t.preventDefault(),n.focus()}else t.preventDefault(),e.focus();this._toggleAttribute("navigating",!0,this)}_onSpaceKeyDown(t){t.preventDefault();const e=t.composedPath()[0];if(e._content&&e._content.firstElementChild){const t=this.hasAttribute("navigating");e._content.firstElementChild.click(),this._toggleAttribute("navigating",t,this)}else this.dispatchEvent(new CustomEvent("cell-activate",{detail:{model:this.__getRowModel(e.parentElement)}}))}_onFocusIn(t){this._isMousedown||this._toggleAttribute("navigating",!0,this);const e=t.composedPath()[0];e===this.$.table||e===this.$.focusexit?(this._predictFocusStepTarget(e,e===this.$.table?1:-1).focus(),this._toggleAttribute("interacting",!1,this)):this._detectInteracting(t)}_onFocusOut(t){this._toggleAttribute("navigating",!1,this),this._detectInteracting(t)}_onCellFocusIn(t){if(this._detectInteracting(t),3===t.composedPath().indexOf(this.$.table)){const e=t.composedPath()[0];this._activeRowGroup=e.parentNode.parentNode,this._activeRowGroup===this.$.header?this._headerFocusable=e:this._activeRowGroup===this.$.items?this._itemsFocusable=e:this._activeRowGroup===this.$.footer&&(this._footerFocusable=e),e._content.dispatchEvent(new CustomEvent("cell-focusin",{bubbles:!1}))}this._detectFocusedItemIndex(t)}_onCellFocusOut(t){if(3===t.composedPath().indexOf(this.$.table)){t.composedPath()[0]._content.dispatchEvent(new CustomEvent("cell-focusout",{bubbles:!1}))}}_detectInteracting(t){this._toggleAttribute("interacting",t.composedPath().some(t=>"vaadin-grid-cell-content"===t.localName),this)}_detectFocusedItemIndex(t){const{rowGroup:e,row:n}=this._parseEventPath(t.composedPath());e===this.$.items&&(this._focusedItemIndex=n.index)}_preventScrollerRotatingCellFocus(t,e){t.index===this._focusedItemIndex&&this.hasAttribute("navigating")&&this._activeRowGroup===this.$.items&&(this._navigatingIsHidden=!0,this._toggleAttribute("navigating",!1,this)),e===this._focusedItemIndex&&this._navigatingIsHidden&&(this._navigatingIsHidden=!1,this._toggleAttribute("navigating",!0,this))}_getColumns(t,e){let n=this._columnTree.length-1;return t===this.$.header?n=e:t===this.$.footer&&(n=this._columnTree.length-1-e),this._columnTree[n]}_resetKeyboardNavigation(){if(this.$.header.firstElementChild&&(this._headerFocusable=Array.from(this.$.header.firstElementChild.children).filter(t=>!t.hidden)[0]),this.$.items.firstElementChild){const t=this._iterateItems((t,e)=>{if(this._firstVisibleIndex===e)return this.$.items.children[t]});t&&(this._itemsFocusable=Array.from(t.children).filter(t=>!t.hidden)[0])}this.$.footer.firstElementChild&&(this._footerFocusable=Array.from(this.$.footer.firstElementChild.children).filter(t=>!t.hidden)[0])}_scrollHorizontallyToCell(t){if(t.hasAttribute("frozen")||this._elementMatches(t,'[part~="details-cell"]'))return;const e=t.getBoundingClientRect(),n=t.parentNode,r=Array.from(n.children).indexOf(t),i=this.$.table.getBoundingClientRect();let s=i.left,o=i.right;for(let t=r-1;t>=0;t--){const e=n.children[t];if(!e.hasAttribute("hidden")&&!this._elementMatches(e,'[part~="details-cell"]')&&e.hasAttribute("frozen")){s=e.getBoundingClientRect().right;break}}for(let t=r+1;t<n.children.length;t++){const e=n.children[t];if(!e.hasAttribute("hidden")&&!this._elementMatches(e,'[part~="details-cell"]')&&e.hasAttribute("frozen")){o=e.getBoundingClientRect().left;break}}e.left<s&&(this.$.table.scrollLeft+=Math.round(e.left-s)),e.right>o&&(this.$.table.scrollLeft+=Math.round(e.right-o))}_elementMatches(t,e){return t.matches?t.matches(e):-1!==Array.from(t.parentNode.querySelectorAll(e)).indexOf(t)}}),rf=t=>(class extends(Yh(t)){static get properties(){return{columnReorderingAllowed:{type:Boolean,value:!1},_orderBaseScope:{type:Number,value:1e7}}}static get observers(){return["_updateOrders(_columnTree, _columnTree.*)"]}ready(){super.ready(),Lh(this,"track",this._onTrackEvent),this._reorderGhost=this.shadowRoot.querySelector('[part="reorder-ghost"]'),this.addEventListener("touchstart",this._onTouchStart.bind(this)),this.addEventListener("touchmove",this._onTouchMove.bind(this)),this.addEventListener("touchend",this._onTouchEnd.bind(this)),this.addEventListener("contextmenu",this._onContextMenu.bind(this))}_onContextMenu(t){this.hasAttribute("reordering")&&t.preventDefault()}_onTouchStart(t){this._startTouchReorderTimeout=setTimeout(()=>{this._onTrackStart({detail:{x:t.touches[0].clientX,y:t.touches[0].clientY}})},100)}_onTouchMove(t){this._draggedColumn&&t.preventDefault(),clearTimeout(this._startTouchReorderTimeout)}_onTouchEnd(){clearTimeout(this._startTouchReorderTimeout),this._onTrackEnd()}_onTrackEvent(t){if("start"===t.detail.state){const e=t.composedPath(),n=e[e.indexOf(this.$.header)-2];if(!n||!n._content)return;const r=this.getRootNode().activeElement;if(n._content.contains(this.getRootNode().activeElement)&&(!this._ie||!this._isFocusable(r)))return;if(this.$.scroller.hasAttribute("column-resizing"))return;this._touchDevice||this._onTrackStart(t)}else"track"===t.detail.state?this._onTrack(t):"end"===t.detail.state&&this._onTrackEnd(t)}_onTrackStart(t){if(!this.columnReorderingAllowed)return;const e=t.path||yu(t).path;if(e&&e.filter(t=>t.hasAttribute&&t.hasAttribute("draggable"))[0])return;const n=this._cellFromPoint(t.detail.x,t.detail.y);if(n&&-1!==n.getAttribute("part").indexOf("header-cell")){for(this._toggleAttribute("reordering",!0,this),this._draggedColumn=n._column;1===this._draggedColumn.parentElement.childElementCount;)this._draggedColumn=this._draggedColumn.parentElement;this._setSiblingsReorderStatus(this._draggedColumn,"allowed"),this._draggedColumn._reorderStatus="dragging",this._updateGhost(n),this._reorderGhost.style.visibility="visible",this._updateGhostPosition(t.detail.x,this._touchDevice?t.detail.y-50:t.detail.y),this._autoScroller()}}_onTrack(t){if(!this._draggedColumn)return;const e=this._cellFromPoint(t.detail.x,t.detail.y);if(!e)return;const n=this._getTargetColumn(e,this._draggedColumn);this._isSwapAllowed(this._draggedColumn,n)&&this._isSwappableByPosition(n,t.detail.x)&&this._swapColumnOrders(this._draggedColumn,n),this._updateGhostPosition(t.detail.x,this._touchDevice?t.detail.y-50:t.detail.y),this._lastDragClientX=t.detail.x}_onTrackEnd(){this._draggedColumn&&(this._toggleAttribute("reordering",!1,this),this._draggedColumn._reorderStatus="",this._setSiblingsReorderStatus(this._draggedColumn,""),this._draggedColumn=null,this._lastDragClientX=null,this._reorderGhost.style.visibility="hidden",this.dispatchEvent(new CustomEvent("column-reorder",{detail:{columns:this._getColumnsInOrder()}})))}_getColumnsInOrder(){return this._columnTree.slice(0).pop().filter(t=>!t.hidden).sort((t,e)=>t._order-e._order)}_cellFromPoint(t,e){let n;if(t=t||0,e=e||0,this._draggedColumn||this._toggleAttribute("no-content-pointer-events",!0,this.$.scroller),Za?n=this.shadowRoot.elementFromPoint(t,e):"vaadin-grid-cell-content"===(n=document.elementFromPoint(t,e)).localName&&(n=n.assignedSlot.parentNode),this._toggleAttribute("no-content-pointer-events",!1,this.$.scroller),n&&n._column)return n}_updateGhostPosition(t,e){const n=this._reorderGhost.getBoundingClientRect(),r=t-n.width/2,i=e-n.height/2,s=parseInt(this._reorderGhost._left||0),o=parseInt(this._reorderGhost._top||0);this._reorderGhost._left=s-(n.left-r),this._reorderGhost._top=o-(n.top-i),this._reorderGhost.style.transform=`translate(${this._reorderGhost._left}px, ${this._reorderGhost._top}px)`}_getInnerText(t){return t.localName?"none"===getComputedStyle(t).display?"":Array.from(t.childNodes).map(t=>this._getInnerText(t)).join(""):t.textContent}_updateGhost(t){const e=this._reorderGhost;e.textContent=this._getInnerText(t._content);const n=window.getComputedStyle(t);return["boxSizing","display","width","height","background","alignItems","padding","border","flex-direction","overflow"].forEach(t=>e.style[t]=n[t]),e}_updateOrders(t,e){void 0!==t&&void 0!==e&&(t[0].forEach((t,e)=>t._order=0),t[0].forEach((t,e)=>t._order=(e+1)*this._orderBaseScope))}_setSiblingsReorderStatus(t,e){Array.from(t.parentNode.children).filter(e=>/column/.test(e.localName)&&this._isSwapAllowed(e,t)).forEach(t=>t._reorderStatus=e)}_autoScroller(){if(this._lastDragClientX){const t=this._lastDragClientX-this.getBoundingClientRect().right+50,e=this.getBoundingClientRect().left-this._lastDragClientX+50;t>0?this.$.table.scrollLeft+=t/10:e>0&&(this.$.table.scrollLeft-=e/10),this._scrollHandler()}this._draggedColumn&&this.async(this._autoScroller,10)}_isSwapAllowed(t,e){if(t&&e){const n=t!==e,r=t.parentElement===e.parentElement,i=t.frozen===e.frozen;return n&&r&&i}}_isSwappableByPosition(t,e){const n=Array.from(this.$.header.querySelectorAll('tr:not([hidden]) [part~="cell"]')).filter(e=>t.contains(e._column))[0],r=this.$.header.querySelector("tr:not([hidden]) [reorder-status=dragging]").getBoundingClientRect(),i=n.getBoundingClientRect();return i.left>r.left?e>i.right-r.width:e<i.left+r.width}_swapColumnOrders(t,e){const n=t._order;t._order=e._order,e._order=n,this._updateLastFrozen(),this._updateFirstAndLastColumn()}_getTargetColumn(t,e){if(t&&e){let n=t._column;for(;n.parentElement!==e.parentElement&&n!==this;)n=n.parentElement;return n.parentElement===e.parentElement?n:t._column}}}),sf=t=>(class extends t{static get properties(){return{resizable:{type:Boolean,value:function(){if("vaadin-grid-column-group"===this.localName)return;const t=this.parentNode;return t&&"vaadin-grid-column-group"===t.localName&&t.resizable||!1}},_headerTemplate:{type:Object},_footerTemplate:{type:Object},frozen:{type:Boolean,value:!1},hidden:{type:Boolean},header:{type:String},textAlign:{type:String},_lastFrozen:{type:Boolean,value:!1},_order:Number,_reorderStatus:Boolean,_emptyCells:Array,_headerCell:Object,_footerCell:Object,_grid:Object,headerRenderer:Function,footerRenderer:Function}}static get observers(){return["_widthChanged(width, _headerCell, _footerCell, _cells.*)","_frozenChanged(frozen, _headerCell, _footerCell, _cells.*)","_flexGrowChanged(flexGrow, _headerCell, _footerCell, _cells.*)","_pathOrHeaderChanged(path, header, _headerCell, _footerCell, _cells.*, renderer, headerRenderer, _bodyTemplate, _headerTemplate)","_textAlignChanged(textAlign, _cells.*, _headerCell, _footerCell)","_orderChanged(_order, _headerCell, _footerCell, _cells.*)","_lastFrozenChanged(_lastFrozen)","_setBodyTemplateOrRenderer(_bodyTemplate, renderer, _cells, _cells.*)","_setHeaderTemplateOrRenderer(_headerTemplate, headerRenderer, _headerCell)","_setFooterTemplateOrRenderer(_footerTemplate, footerRenderer, _footerCell)","_resizableChanged(resizable, _headerCell)","_reorderStatusChanged(_reorderStatus, _headerCell, _footerCell, _cells.*)","_hiddenChanged(hidden, _headerCell, _footerCell, _cells.*)"]}connectedCallback(){super.connectedCallback(),this._bodyTemplate&&(this._bodyTemplate.templatizer._grid=this._grid),this._headerTemplate&&(this._headerTemplate.templatizer._grid=this._grid),this._footerTemplate&&(this._footerTemplate.templatizer._grid=this._grid),this._templateObserver.flush(),this._bodyTemplate||this._templateObserver.callback(),requestAnimationFrame(()=>{this._allCells.forEach(t=>{t._content.parentNode||this._grid&&this._grid.appendChild(t._content)})})}disconnectedCallback(){super.disconnectedCallback(),requestAnimationFrame(()=>{this._findHostGrid()||this._allCells.forEach(t=>{t._content.parentNode&&t._content.parentNode.removeChild(t._content)})}),this._gridValue=void 0}_findHostGrid(){let t=this;for(;t&&!/^vaadin.*grid(-pro)?$/.test(t.localName);)t=t.assignedSlot?t.assignedSlot.parentNode:t.parentNode;return t||void 0}get _grid(){return this._gridValue||(this._gridValue=this._findHostGrid()),this._gridValue}get _allCells(){return[].concat(this._cells||[]).concat(this._emptyCells||[]).concat(this._headerCell).concat(this._footerCell).filter(t=>t)}constructor(){super(),this._templateObserver=new rd(this,t=>{this._headerTemplate=this._prepareHeaderTemplate(),this._footerTemplate=this._prepareFooterTemplate(),this._bodyTemplate=this._prepareBodyTemplate()})}_prepareHeaderTemplate(){return this._prepareTemplatizer(this._findTemplate(!0)||null,{})}_prepareFooterTemplate(){return this._prepareTemplatizer(this._findTemplate(!1,!0)||null,{})}_prepareBodyTemplate(){return this._prepareTemplatizer(this._findTemplate()||null)}_prepareTemplatizer(t,e){if(t&&!t.templatizer){const n=new Up;n._grid=this._grid,n.dataHost=this.dataHost,n._instanceProps=e||n._instanceProps,n.template=t,t.templatizer=n}return t}_renderHeaderAndFooter(){this.headerRenderer&&this.__runRenderer(this.headerRenderer,this._headerCell),this.footerRenderer&&this.__runRenderer(this.footerRenderer,this._footerCell)}__runRenderer(t,e,n){const r=[e._content,this];n&&n.item&&r.push(n),t.apply(this,r)}__setColumnTemplateOrRenderer(t,e,n){if(t&&e)throw new Error("You should only use either a renderer or a template");n.forEach(n=>{const r=this._grid.__getRowModel(n.parentElement);if(e)n._renderer=e,(r.item||e===this.headerRenderer||e===this.footerRenderer)&&this.__runRenderer(e,n,r);else if(n._template!==t){n._template=t,n._content.innerHTML="",t.templatizer._grid=t.templatizer._grid||this._grid;const e=t.templatizer.createInstance();n._content.appendChild(e.root),n._instance=e,r.item&&n._instance.setProperties(r)}})}_setBodyTemplateOrRenderer(t,e,n,r){(t||e)&&n&&this.__setColumnTemplateOrRenderer(t,e,n)}_setHeaderTemplateOrRenderer(t,e,n){(t||e)&&n&&this.__setColumnTemplateOrRenderer(t,e,[n])}_setFooterTemplateOrRenderer(t,e,n){(t||e)&&n&&(this.__setColumnTemplateOrRenderer(t,e,[n]),this._grid.__updateHeaderFooterRowVisibility(n.parentElement))}_selectFirstTemplate(t=!1,e=!1){return rd.getFlattenedNodes(this).filter(n=>"template"===n.localName&&n.classList.contains("header")===t&&n.classList.contains("footer")===e)[0]}_findTemplate(t,e){const n=this._selectFirstTemplate(t,e);return n&&this.dataHost&&(n._rootDataHost=this.dataHost._rootDataHost||this.dataHost),n}_flexGrowChanged(t,e,n,r){this.parentElement&&this.parentElement._columnPropChanged&&this.parentElement._columnPropChanged("flexGrow"),this._allCells.forEach(e=>e.style.flexGrow=t)}_orderChanged(t,e,n,r){this._allCells.forEach(e=>e.style.order=t)}_widthChanged(t,e,n,r){this.parentElement&&this.parentElement._columnPropChanged&&this.parentElement._columnPropChanged("width"),this._allCells.forEach(e=>e.style.width=t),this._grid&&this._grid.__forceReflow&&this._grid.__forceReflow()}_frozenChanged(t,e,n,r){this.parentElement&&this.parentElement._columnPropChanged&&this.parentElement._columnPropChanged("frozen",t),this._allCells.forEach(e=>this._toggleAttribute("frozen",t,e)),this._grid&&this._grid._frozenCellsChanged&&this._grid._frozenCellsChanged()}_lastFrozenChanged(t){this._allCells.forEach(e=>this._toggleAttribute("last-frozen",t,e)),this.parentElement&&this.parentElement._columnPropChanged&&(this.parentElement._lastFrozen=t)}_pathOrHeaderChanged(t,e,n,r,i,s,o,a,l){const c=void 0!==e;if(!o&&!l&&c&&n&&this.__setTextContent(n._content,e),t&&i.value){if(!s&&!a){const e=(e,n,{item:r})=>this.__setTextContent(e,this.get(t,r));this.__setColumnTemplateOrRenderer(void 0,e,i.value)}o||l||c||!n||null===e||this.__setTextContent(n._content,this._generateHeader(t))}n&&this._grid.__updateHeaderFooterRowVisibility(n.parentElement)}__setTextContent(t,e){t.textContent!==e&&(t.textContent=e)}_generateHeader(t){return t.substr(t.lastIndexOf(".")+1).replace(/([A-Z])/g,"-$1").toLowerCase().replace(/-/g," ").replace(/^./,t=>t.toUpperCase())}_toggleAttribute(t,e,n){n.hasAttribute(t)===!e&&(e?n.setAttribute(t,""):n.removeAttribute(t))}_reorderStatusChanged(t,e,n,r){this._allCells.forEach(e=>e.setAttribute("reorder-status",t))}_resizableChanged(t,e){void 0!==t&&void 0!==e&&e&&[e].concat(this._emptyCells).forEach(e=>{if(e){const n=e.querySelector('[part~="resize-handle"]');if(n&&e.removeChild(n),t){const t=document.createElement("div");t.setAttribute("part","resize-handle"),e.appendChild(t)}}})}_textAlignChanged(t,e,n,r){if(void 0===t)return;if(-1===["start","end","center"].indexOf(t))return void console.warn('textAlign can only be set as "start", "end" or "center"');let i;"ltr"===getComputedStyle(this._grid).direction?"start"===t?i="left":"end"===t&&(i="right"):"start"===t?i="right":"end"===t&&(i="left"),this._allCells.forEach(e=>{e._content.style.textAlign=t,getComputedStyle(e._content).textAlign!==t&&(e._content.style.textAlign=i)})}_hiddenChanged(t,e,n,r){this.parentElement&&this.parentElement._columnPropChanged&&this.parentElement._columnPropChanged("hidden",t),this._allCells.forEach(e=>this._toggleAttribute("hidden",t,e)),!!t!=!!this._previousHidden&&this._grid&&(this._grid._updateLastFrozen&&this._grid._updateLastFrozen(),this._grid.notifyResize&&this._grid.notifyResize(),this._grid._resetKeyboardNavigation&&this._grid._resetKeyboardNavigation()),this._previousHidden=t}});
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/class of extends(sf(nh)){static get is(){return"vaadin-grid-column"}static get properties(){return{width:{type:String,value:"100px"},flexGrow:{type:Number,value:1},renderer:Function,path:{type:String},autoWidth:{type:Boolean,value:!1},_bodyTemplate:{type:Object},_cells:Array}}}customElements.define(of.is,of);
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/
class af extends class extends nh{}{static get template(){return Ml`
    <style>
      :host {
        display: block;
        height: 100%;
        width: 100%;
        position: absolute;
        top: 0;
        box-sizing: border-box;
        overflow: auto;
      }

      :host([passthrough]) {
        pointer-events: none;
      }
    </style>

    <slot></slot>
`}static get is(){return"vaadin-grid-outer-scroller"}static get properties(){return{scrollTarget:{type:Object},scrollHandler:{type:Object},passthrough:{type:Boolean,reflectToAttribute:!0,value:!0},outerScrolling:Boolean,noScrollbars:Boolean,_touchDevice:Boolean}}ready(){super.ready(),this.addEventListener("scroll",()=>this._syncScrollTarget()),this.parentElement.addEventListener("mousemove",this._onMouseMove.bind(this)),this.style.webkitOverflowScrolling="touch",this.addEventListener("mousedown",t=>this.outerScrolling=!0),this.addEventListener("mouseup",t=>{this.outerScrolling=!1,this.scrollHandler._scrollHandler()})}_onMouseMove(t){this._touchDevice||(this.noScrollbars&&this.parentElement.hasAttribute("scroll-period")?this.passthrough=t.offsetY<=this.clientHeight-20&&t.offsetX<=this.clientWidth-20:this.passthrough=t.offsetY<=this.clientHeight&&t.offsetX<=this.clientWidth)}syncOuterScroller(){this.scrollTop=this.scrollTarget.scrollTop,this.scrollLeft=this.scrollTarget.scrollLeft}_syncScrollTarget(){requestAnimationFrame(()=>{this.scrollTarget.scrollTop=this.scrollTop,this.scrollTarget.scrollLeft=this.scrollLeft,this.scrollHandler._scrollHandler()})}}customElements.define(af.is,af);
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/
const lf=document.createElement("dom-module");lf.appendChild(Ml`
  <style>
    @keyframes vaadin-grid-appear {
      to {
        opacity: 1;
      }
    }

    :host {
      display: block;
      animation: 1ms vaadin-grid-appear;
      height: 400px;
      flex: 1 1 auto;
      align-self: stretch;
      position: relative;
    }

    :host([hidden]) {
      display: none !important;
    }

    #scroller {
      display: block;
      transform: translateY(0);
      width: auto;
      height: auto;
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
    }

    :host([height-by-rows]) {
      height: auto;
      align-self: flex-start;
      flex-grow: 0;
      width: 100%;
    }

    :host([height-by-rows]) #scroller {
      width: 100%;
      height: 100%;
      position: relative;
    }

    #table {
      display: block;
      width: 100%;
      height: 100%;
      overflow: auto;
      z-index: -2;
      position: relative;
      outline: none;
    }

    #header {
      display: block;
      position: absolute;
      top: 0;
      width: 100%;
    }

    th {
      text-align: inherit;
    }

    /* Safari doesn't work with "inherit" */
    [safari] th {
      text-align: initial;
    }

    #footer {
      display: block;
      position: absolute;
      bottom: 0;
      width: 100%;
    }

    #items {
      display: block;
      width: 100%;
      position: relative;
      z-index: -1;
    }

    #items,
    #outersizer,
    #fixedsizer {
      border-top: 0 solid transparent;
      border-bottom: 0 solid transparent;
    }

    [part~="row"] {
      display: flex;
      width: 100%;
      box-sizing: border-box;
      margin: 0;
    }

    [part~="row"][loading] [part~="body-cell"] ::slotted(vaadin-grid-cell-content) {
      opacity: 0;
    }

    #items [part~="row"] {
      position: absolute;
    }

    #items [part~="row"]:empty {
      height: 1em;
    }

    [part~="cell"]:not([part~="details-cell"]) {
      flex-shrink: 0;
      flex-grow: 1;
      box-sizing: border-box;
      display: flex;
      width: 100%;
      position: relative;
      align-items: center;
      padding: 0;
      white-space: nowrap;
    }

    [part~="details-cell"] {
      position: absolute;
      bottom: 0;
      width: 100%;
      box-sizing: border-box;
      padding: 0;
    }

    [part~="cell"] ::slotted(vaadin-grid-cell-content) {
      display: block;
      width: 100%;
      box-sizing: border-box;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    [hidden] {
      display: none !important;
    }

    [frozen] {
      z-index: 2;
      will-change: transform;
    }

    #outerscroller {
      /* Needed (at least) for Android Chrome */
      z-index: 0;
    }

    #scroller:not([safari]) #outerscroller {
      /* Needed for Android Chrome (#1020). Can't be applied to Safari
      since it would re-introduce the sub-pixel overflow bug (#853) */
      will-change: transform;
    }

    [no-scrollbars]:not([safari]):not([firefox]) #outerscroller,
    [no-scrollbars][safari] #table,
    [no-scrollbars][firefox] #table {
      overflow: hidden;
    }

    [no-scrollbars]:not([safari]):not([firefox]) #outerscroller {
      pointer-events: none;
    }

    /* Reordering styles */
    :host([reordering]) [part~="cell"] ::slotted(vaadin-grid-cell-content),
    :host([reordering]) [part~="resize-handle"],
    #scroller[no-content-pointer-events] [part~="cell"] ::slotted(vaadin-grid-cell-content) {
      pointer-events: none;
    }

    [part~="reorder-ghost"] {
      visibility: hidden;
      position: fixed;
      pointer-events: none;
      opacity: 0.5;

      /* Prevent overflowing the grid in Firefox */
      top: 0;
      left: 0;
    }

    :host([reordering]) {
      -moz-user-select: none;
      -webkit-user-select: none;
      user-select: none;
    }

    #scroller[ie][column-reordering-allowed] [part~="header-cell"] {
      -ms-user-select: none;
    }

    :host([reordering]) #outerscroller {
      -webkit-overflow-scrolling: auto !important;
    }

    /* Resizing styles */
    [part~="resize-handle"] {
      position: absolute;
      top: 0;
      right: 0;
      height: 100%;
      cursor: col-resize;
      z-index: 1;
    }

    [part~="resize-handle"]::before {
      position: absolute;
      content: "";
      height: 100%;
      width: 35px;
      transform: translateX(-50%);
    }

    [last-column] [part~="resize-handle"]::before,
    [last-frozen] [part~="resize-handle"]::before {
      width: 18px;
      transform: none;
      right: 0;
    }

    #scroller[column-resizing] {
      -ms-user-select: none;
      -moz-user-select: none;
      -webkit-user-select: none;
      user-select: none;
    }

    /* Sizer styles */
    .sizer {
      display: flex;
      position: relative;
      width: 100%;
      visibility: hidden;
    }

    .sizer [part~="details-cell"] {
      display: none !important;
    }

    .sizer [part~="cell"][hidden] {
      display: none !important;
    }

    .sizer [part~="cell"] {
      display: block;
      flex-shrink: 0;
      line-height: 0;
      margin-top: -1em;
      height: 0 !important;
      min-height: 0 !important;
      max-height: 0 !important;
      padding: 0 !important;
    }

    .sizer [part~="cell"]::before {
      content: "-";
    }

    .sizer [part~="cell"] ::slotted(vaadin-grid-cell-content) {
      display: none !important;
    }

    /* Fixed mode (Tablet Edge) */
    #fixedsizer {
      position: absolute;
    }

    :not([edge][no-scrollbars]) #fixedsizer {
      display: none;
    }

    [edge][no-scrollbars] {
      /* Any value other than ‘none’ for the transform results in the creation of both a stacking context and
      a containing block. The object acts as a containing block for fixed positioned descendants. */
      transform: translateZ(0);
      overflow: hidden;
    }

    [edge][no-scrollbars] #header,
    [edge][no-scrollbars] #footer {
      position: fixed;
    }

    [edge][no-scrollbars] #items {
      position: fixed;
      width: 100%;
      will-change: transform;
    }
  </style>
`);const cf=/^((?!chrome|android).)*safari/i.test(navigator.userAgent),hf=navigator.userAgent.toLowerCase().indexOf("firefox")>-1;if(cf||hf){const t=document.createElement("style");t.textContent="\n    [scrolling][safari] #outerscroller,\n    [scrolling][firefox] #outerscroller {\n      pointer-events: auto;\n    }\n\n    [ios] #outerscroller {\n      pointer-events: auto;\n      z-index: -3;\n    }\n\n    [ios][scrolling] #outerscroller {\n      z-index: 0;\n    }\n\n    [ios] [frozen] {\n      will-change: auto;\n    }\n  ",lf.querySelector("template").content.appendChild(t)}lf.register("vaadin-grid-styles");
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/
const df=(()=>{try{return document.createEvent("TouchEvent"),!0}catch(t){return!1}})();class uf extends(gp(lp(Fp(zp(Hp(kp(jp(qp(Gp($p(nf(Rp(Vp(rf(Dp(Bp(ef(Yp(Op))))))))))))))))))){static get template(){return Ml`
    <style include="vaadin-grid-styles"></style>

    <div id="scroller" no-scrollbars\$="[[!_scrollbarWidth]]" wheel-scrolling\$="[[_wheelScrolling]]" safari\$="[[_safari]]" ios\$="[[_ios]]" loading\$="[[loading]]" edge\$="[[_edge]]" firefox\$="[[_firefox]]" ie\$="[[_ie]]" column-reordering-allowed\$="[[columnReorderingAllowed]]">

      <table id="table" role="grid" aria-multiselectable="true" tabindex="0">
        <caption id="fixedsizer" class="sizer" part="row"></caption>
        <thead id="header" role="rowgroup"></thead>
        <tbody id="items" role="rowgroup"></tbody>
        <tfoot id="footer" role="rowgroup"></tfoot>
      </table>

      <div part="reorder-ghost"></div>
      <vaadin-grid-outer-scroller id="outerscroller" _touch-device="[[_touchDevice]]" scroll-target="[[scrollTarget]]" scroll-handler="[[_this]]" no-scrollbars="[[!_scrollbarWidth]]">
        <div id="outersizer" class="sizer" part="row"></div>
      </vaadin-grid-outer-scroller>
    </div>

    <!-- The template needs at least one slot or else shady doesn't distribute -->
    <slot name="nodistribute"></slot>

    <div id="focusexit" tabindex="0"></div>
`}static get is(){return"vaadin-grid"}static get version(){return"5.5.2"}static get observers(){return["_columnTreeChanged(_columnTree, _columnTree.*)"]}static get properties(){return{_this:{type:Object,value:function(){return this}},_safari:{type:Boolean,value:/^((?!chrome|android).)*safari/i.test(navigator.userAgent)},_ios:{type:Boolean,value:/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1},_edge:{type:Boolean,value:"undefined"!=typeof CSS&&CSS.supports("(-ms-ime-align:auto)")},_ie:{type:Boolean,value:!(!navigator.userAgent.match(/Trident/)||navigator.userAgent.match(/MSIE/))},_firefox:{type:Boolean,value:navigator.userAgent.toLowerCase().indexOf("firefox")>-1},_android:{type:Boolean,value:/android/i.test(navigator.userAgent)},_touchDevice:{type:Boolean,value:df},heightByRows:{type:Boolean,value:!1,reflectToAttribute:!0,observer:"_heightByRowsChanged"},_recalculateColumnWidthOnceLoadingFinished:{type:Boolean,value:!0}}}constructor(){super(),this.addEventListener("animationend",this._onAnimationEnd)}__hasRowsWithClientHeight(){return!!Array.from(this.$.items.children).filter(t=>t.clientHeight).length}__itemsReceived(){this._recalculateColumnWidthOnceLoadingFinished&&!this._cache.isLoading()&&this.__hasRowsWithClientHeight()&&(this._recalculateColumnWidthOnceLoadingFinished=!1,this.recalculateColumnWidths())}_recalculateColumnWidths(t){t.forEach(t=>{t.width="auto",t._origFlexGrow=t.flexGrow,t.flexGrow=0}),t.forEach(t=>{t._currentWidth=0,t._allCells.forEach(e=>{const n=Math.ceil(e.getBoundingClientRect().width);t._currentWidth=Math.max(t._currentWidth,n)})}),t.forEach(t=>{t.width=`${t._currentWidth}px`,t.flexGrow=t._origFlexGrow,t._currentWidth=void 0,t._origFlexGrow=void 0})}recalculateColumnWidths(){if(this._columnTree)if(this._cache.isLoading())this._recalculateColumnWidthOnceLoadingFinished=!0;else{const t=this._getColumns().filter(t=>!t.hidden&&t.autoWidth);this._recalculateColumnWidths(t)}}_createScrollerRows(t){const e=[];for(var n=0;n<t;n++){const t=document.createElement("tr");t.setAttribute("part","row"),t.setAttribute("role","row"),this._columnTree&&this._updateRow(t,this._columnTree[this._columnTree.length-1],"body",!1,!0),e.push(t)}return this._columnTree&&this._columnTree[this._columnTree.length-1].forEach(t=>t.notifyPath&&t.notifyPath("_cells.*",t._cells)),function(t,e,n){nu||su(),ru.push([t,e,n])}(this,()=>{this._updateFirstAndLastColumn(),this._resetKeyboardNavigation()}),e}_getRowTarget(){return this.$.items}_createCell(t){const e="vaadin-grid-cell-content-"+(this._contentIndex=this._contentIndex+1||0),n=document.createElement("vaadin-grid-cell-content");n.setAttribute("slot",e);const r=document.createElement(t);r.id=e.replace("-content-","-"),r.setAttribute("tabindex","-1"),r.setAttribute("role","td"===t?"gridcell":"columnheader");const i=document.createElement("slot");return i.setAttribute("name",e),r.appendChild(i),r._content=n,n.addEventListener("mousedown",()=>{if(window.chrome){const t=()=>{n.contains(this.getRootNode().activeElement)||r.focus(),document.removeEventListener("mouseup",t,!0)};document.addEventListener("mouseup",t,!0)}else setTimeout(()=>{n.contains(this.getRootNode().activeElement)||r.focus()})}),r}_updateRow(t,e,n,r,i){n=n||"body";const s=document.createDocumentFragment();Array.from(t.children).forEach(t=>t._vacant=!0),t.innerHTML="","outersizer"!==t.id&&"fixedsizer"!==t.id&&(t.hidden=!0),e.forEach((o,a)=>{let l;if("body"===n){if(o._cells=o._cells||[],(l=o._cells.filter(t=>t._vacant)[0])||(l=this._createCell("td"),o._cells.push(l)),l.setAttribute("part","cell body-cell"),t.appendChild(l),a===e.length-1&&(this._rowDetailsTemplate||this.rowDetailsRenderer)){this._detailsCells=this._detailsCells||[];const e=this._detailsCells.filter(t=>t._vacant)[0]||this._createCell("td");-1===this._detailsCells.indexOf(e)&&this._detailsCells.push(e),e._content.parentElement||s.appendChild(e._content),this._configureDetailsCell(e),t.appendChild(e),this._a11ySetRowDetailsCell(t,e),e._vacant=!1}o.notifyPath&&!i&&o.notifyPath("_cells.*",o._cells)}else{const e="header"===n?"th":"td";r||"vaadin-grid-column-group"===o.localName?((l=o[`_${n}Cell`]||this._createCell(e))._column=o,t.appendChild(l),o[`_${n}Cell`]=l):(o._emptyCells=o._emptyCells||[],(l=o._emptyCells.filter(t=>t._vacant)[0]||this._createCell(e))._column=o,t.appendChild(l),-1===o._emptyCells.indexOf(l)&&o._emptyCells.push(l)),l.setAttribute("part",`cell ${n}-cell`),this.__updateHeaderFooterRowVisibility(t)}l._content.parentElement||s.appendChild(l._content),l._vacant=!1,l._column=o}),this.appendChild(s),this._frozenCellsChanged(),this._updateFirstAndLastColumnForRow(t)}__updateHeaderFooterRowVisibility(t){if(!t)return;const e=Array.from(t.children).filter(e=>{const n=e._column;if(n._emptyCells&&n._emptyCells.indexOf(e)>-1)return!1;if(t.parentElement===this.$.header){if(n.headerRenderer||n._headerTemplate)return!0;if(null===n.header)return!1;if(n.path||void 0!==n.header)return!0}else if(n.footerRenderer||n._footerTemplate)return!0});t.hidden!==!e.length&&(t.hidden=!e.length,this.notifyResize())}_updateScrollerItem(t,e){this._preventScrollerRotatingCellFocus(t,e),this._columnTree&&(this._toggleAttribute("first",0===e,t),this._toggleAttribute("odd",e%2,t),this._a11yUpdateRowRowindex(t,e),this._getItem(e,t))}_columnTreeChanged(t,e){for(Array.from(this.$.items.children).forEach(e=>this._updateRow(e,t[t.length-1]));this.$.header.children.length<t.length;){const t=document.createElement("tr");t.setAttribute("part","row"),t.setAttribute("role","row"),this.$.header.appendChild(t);const e=document.createElement("tr");e.setAttribute("part","row"),e.setAttribute("role","row"),this.$.footer.appendChild(e)}for(;this.$.header.children.length>t.length;)this.$.header.removeChild(this.$.header.firstElementChild),this.$.footer.removeChild(this.$.footer.firstElementChild);Array.from(this.$.header.children).forEach((e,n)=>this._updateRow(e,t[n],"header",n===t.length-1)),Array.from(this.$.footer.children).forEach((e,n)=>this._updateRow(e,t[t.length-1-n],"footer",0===n)),this._updateRow(this.$.outersizer,t[t.length-1]),this._updateRow(this.$.fixedsizer,t[t.length-1]),this._resizeHandler(),this._frozenCellsChanged(),this._updateFirstAndLastColumn(),this._resetKeyboardNavigation(),this._a11yUpdateHeaderRows(),this._a11yUpdateFooterRows()}_updateItem(t,e){t._item=e;const n=this.__getRowModel(t);this._toggleAttribute("selected",n.selected,t),this._a11yUpdateRowSelected(t,n.selected),this._a11yUpdateRowLevel(t,n.level),this._toggleAttribute("expanded",n.expanded,t),(this._rowDetailsTemplate||this.rowDetailsRenderer)&&this._toggleDetailsCell(t,e),this._generateCellClassNames(t,n),this._filterDragAndDrop(t,n),Array.from(t.children).forEach(t=>{if(t._renderer){const e=t._column||this;t._renderer.call(e,t._content,e,n)}else t._instance&&(t._instance.__detailsOpened__=n.detailsOpened,t._instance.__selected__=n.selected,t._instance.__level__=n.level,t._instance.__expanded__=n.expanded,t._instance.setProperties(n))}),this._debouncerUpdateHeights=rh.debounce(this._debouncerUpdateHeights,nc.after(1),()=>{this._updateMetrics(),this._positionItems(),this._updateScrollerSize()})}_resizeHandler(){this._updateDetailsCellHeights(),this._accessIronListAPI(super._resizeHandler,!0),this._updateHeaderFooterMetrics()}_updateHeaderFooterMetrics(){const t=this.$.header.clientHeight+"px",e=this.$.footer.clientHeight+"px";[this.$.outersizer,this.$.fixedsizer,this.$.items].forEach(n=>{n.style.borderTopWidth=t,n.style.borderBottomWidth=e}),lu(this.$.header,()=>{this._pendingScrollToIndex&&this._scrollToIndex(this._pendingScrollToIndex)})}_onAnimationEnd(t){0===t.animationName.indexOf("vaadin-grid-appear")&&(this._render(),this._updateHeaderFooterMetrics(),t.stopPropagation(),this.notifyResize(),this.__itemsReceived())}_toggleAttribute(t,e,n){n.hasAttribute(t)===!e&&(e?n.setAttribute(t,""):n.removeAttribute(t))}__getRowModel(t){return{index:t.index,item:t._item,level:this._getIndexLevel(t.index),expanded:this._isExpanded(t._item),selected:this._isSelected(t._item),detailsOpened:!(!this._rowDetailsTemplate&&!this.rowDetailsRenderer)&&this._isDetailsOpened(t._item)}}render(){this._columnTree&&(this._columnTree.forEach(t=>{t.forEach(t=>t._renderHeaderAndFooter())}),this._update())}notifyResize(){super.notifyResize()}_heightByRowsChanged(t,e){(t||e)&&this.notifyResize()}__forceReflow(){this._debouncerForceReflow=rh.debounce(this._debouncerForceReflow,rc,()=>{this.$.scroller.style.overflow="hidden",setTimeout(()=>this.$.scroller.style.overflow="")})}}customElements.define(uf.is,uf);var pf,ff=function(t,e,n,r){var i,s=arguments.length,o=s<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(o=(s<3?i(o):s>3?i(e,n,o):i(e,n))||o);return s>3&&o&&Object.defineProperty(e,n,o),o};!function(t){t[t.THRESHOLD_CMD=15]="THRESHOLD_CMD",t[t.DFU_CMD=14]="DFU_CMD",t[t.SYNC_CMD=13]="SYNC_CMD",t[t.ADR_LSB_CMD=12]="ADR_LSB_CMD",t[t.ADR_MSB_CMD=11]="ADR_MSB_CMD",t[t.ADR_RST_CMD=10]="ADR_RST_CMD",t[t.back_CMD=9]="back_CMD",t[t.READ_TIM_CMD=8]="READ_TIM_CMD",t[t.CLEAR_TIM_CMD=7]="CLEAR_TIM_CMD",t[t.START_MEASURING_CMD=6]="START_MEASURING_CMD",t[t.STOP_MEASURING_CMD=5]="STOP_MEASURING_CMD",t[t.NO_CMD=4]="NO_CMD"}(pf||(pf={}));let _f=class extends dt{constructor(){super(),this.RAWVALUES_PER_DEGREE=16.4,this.name="PitchPerfect",this.readStatus=!1,this._clickDropDown=this._clickDropDown.bind(this),this._BTLEdatachanged=this._BTLEdatachanged.bind(this)}render(){if(!0===this.readStatus){let t=[];t=[{command:pf.NO_CMD,btleStruct:{serviceNr:0,action:ft.read,data:null}}];let e=this.CreateBTLEData(t);this.shadowRoot.getElementById("BTLE").btledata=e}return D`
     
      <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">

      <lsg-bluetooth id=BTLE 
      primaryServiceObject = '[[{"service":"battery_service","characteristic":"battery_level"}],[{"service":"heart_rate","characteristic":"heart_rate_measurement"}]]'
       name="${this.name}" class="button w3-round-xxlarge w3-cell w3-hover-opacity">
      </lsg-bluetooth> 
      
  
      <button @click="${this.clickFunctionRead}">Readit </button>

      <select id="country" name="country">
          <option value="Sync">Sync</option>
          <option value="Threshold">Threshold</option>
          <option value="Sensor Update">SensorUpdate</option>
          <option value="Send Adress">SendAdress</option>
          <option value="Reset Adress">ResetAdress</option>
          <option value="Read Timings">ReadTimings</option>
          <option value="Start Measuring">StartMeasuring</option>
          <option value="Stop Measuring">StopMeasuring</option>
      </select>

        `}CreateBTLEData(t){length=t.length;let e=0;var n,r;for(r=[null];e<length;){for(var i=new ArrayBuffer(8),s=new Uint32Array(i),o=0;o<2;o+=1)s[o]=0;s[0]=t[e].command,null==t[e].btleStruct.data?s[1]=1:s[1]=t[e].btleStruct.data.getUint32(0),t[e].btleStruct.action===ft.write?r[e]=new DataView(i):r[e]=null,0===e?n=[{action:t[e].btleStruct.action,serviceNr:t[e].btleStruct.serviceNr,data:r[e]}]:n[e]={action:t[e].btleStruct.action,serviceNr:t[e].btleStruct.serviceNr,data:r[e]},e++}return n}_clickDropDown(){let t=[],e=new ArrayBuffer(4);switch(this.shadowRoot.getElementById("country").value){case"Sync":t=[{command:pf.SYNC_CMD,btleStruct:{serviceNr:0,action:ft.write,data:null}}];break;case"Threshold":new DataView(e).setUint32(0,400,!0),t=[{command:pf.THRESHOLD_CMD,btleStruct:{serviceNr:0,action:ft.write,data:new DataView(e)}}];break;case"Sensor Update":t=[{command:pf.DFU_CMD,btleStruct:{serviceNr:0,action:ft.write,data:null}}];break;case"Send Adress":new DataView(e).setUint32(0,400,!0),t=[{command:pf.ADR_LSB_CMD,btleStruct:{serviceNr:0,action:ft.write,data:new DataView(e)}}];break;case"Reset Adress":t=[{command:pf.ADR_RST_CMD,btleStruct:{serviceNr:0,action:ft.write,data:null}}];break;case"Read Timings":t=[{command:pf.READ_TIM_CMD,btleStruct:{serviceNr:0,action:ft.write,data:null}},{command:pf.NO_CMD,btleStruct:{serviceNr:0,action:ft.read,data:null}}];break;case"Start Measuring":t=[{command:pf.START_MEASURING_CMD,btleStruct:{serviceNr:0,action:ft.write,data:null}}];break;case"Stop Measuring":t=[{command:pf.STOP_MEASURING_CMD,btleStruct:{serviceNr:0,action:ft.write,data:null}}]}let n=this.CreateBTLEData(t);this.shadowRoot.getElementById("BTLE").btledata=n,console.log("clicked"),console.log(this.shadowRoot.getElementById("country").value)}firstUpdated(t){this.shadowRoot.getElementById("BTLE").addEventListener("data-event",this._BTLEdatachanged),this.shadowRoot.getElementById("country").addEventListener("change",this._clickDropDown)}_BTLEdatachanged(t){let e=[];var n=t.detail.message;if(console.log(t.detail.message),"connected"===t.detail.message){console.log("connect event message setting notify on");let t=[{command:pf.NO_CMD,btleStruct:{serviceNr:1,action:ft.enableNotify,data:null}}],e=this.CreateBTLEData(t);this.shadowRoot.getElementById("BTLE").btledata=e}else{n=t.detail.message;try{if(n.byteLength>7){e[0]=mf(n,0),console.log(e[0].PitchVal),console.log(e[0].TimerVal),16==n.byteLength&&(e[1]=mf(n,e[0].NewIndex),console.log(e[1].PitchVal),console.log(e[1].TimerVal));let t=new class{constructor(t){this.eventName="pitchperfect-data-event",this.dataType=gf.data,this.callerThis=t}setData(t){this.data=t}send(){let t=new CustomEvent(this.eventName,{detail:{message:this.data},bubbles:!0,composed:!0});this.callerThis.dispatchEvent(t)}}(this);t.data=e,t.send()}}catch(t){console.log("parsing timings failed")}}}clickFunctionRead(){for(var t=new ArrayBuffer(8),e=new Int8Array(t),n=0;n<8;n+=1)e[n]=0;e[0]=8,e[4]=1;var r=[new DataView(t)];document.getElementById("BTLE").data=r,document.getElementById("BTLE").read=!0,console.log("r click called")}clickFunctionWrite(){!function(){var t=[function(t){for(var e=t.length,n=new ArrayBuffer(e),r=new Int8Array(n),i=0;i<e;i+=1)r[i]=t.charCodeAt(i);return new DataView(n)}("{'R_ACC':1}")];document.getElementById("BTLE").data=t,document.getElementById("BTLE").read=!0}(),console.log("w click called")}};function mf(t,e){let n=e,r=t.getUint32(n,!0);return n+=4,{PitchVal:r/=16.4,TimerVal:t.getUint32(n,!0),NewIndex:n+=4}}var gf;ff([ot()],_f.prototype,"name",void 0),ff([ot()],_f.prototype,"readStatus",void 0),_f=ff([it("lsg-pitchperfect")],_f),function(t){t[t.status=0]="status",t[t.data=1]="data",t[t.control=2]="control",t[t.streaming=3]="streaming"}(gf||(gf={}));n(67);window.addEventListener("load",()=>{!async function(){if("serviceWorker"in navigator)try{await navigator.serviceWorker.register("./sw.js")}catch(t){console.log("ServiceWorker registration failed. Sorry about that.",t)}else console.log("Your browser does not support ServiceWorker.")}()})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,